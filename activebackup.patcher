/* Copyright (c) 2019 Synology Inc. All rights reserved. */
Ext.define("SYNO.ActiveBackup.Util.Wizard", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    getStep: function(b) {
        var a = this.getComponent("steps").getComponent(b);
        if (a) {
            return a
        }
        if (!Ext.isFunction(this.createStep)) {
            throw Error("missing step factory method for step[" + b + "]")
        }
        a = this.createStep(b);
        if (!a) {
            throw Error("create step[" + b + "] failed")
        }
        Ext.applyIf(a, {
            itemId: b,
            nextId: null,
            getNext: SYNO.SDS.Wizard.Step.prototype.getNext,
            checkState: SYNO.SDS.Wizard.Step.prototype.checkState
        });
        this.getComponent("steps").add(a);
        return a
    },
    getParams: function() {
        var b = {};
        var a = this.getActiveStep();
        Ext.each(this.stepStack.concat(a.itemId), function(d) {
            var c = this.getStep(d);
            if (Ext.isFunction(c.getParams)) {
                Ext.apply(b, c.getParams())
            }
        }, this);
        return b
    },
    validate: function() {
        var a = this.getActiveStep();
        if (Ext.isFunction(a.validate)) {
            return a.validate()
        }
        return true
    },
    setWizardAnchor: function() {
        this.wizardAnchor = Ext.encode(this.getParams())
    },
    getWizardAnchor: function() {
        return this.wizardAnchor
    },
    goNext: function(b, c) {
        if (!this.validate()) {
            return false
        }
        var a = this.getActiveStep();
        if (a.isAnchor) {
            this.setWizardAnchor()
        }
        if (Ext.isFunction(a.beforeNext)) {
            a.beforeNext(this, function() {
                this.doGoNext(b, c)
            });
            return false
        }
        this.doGoNext(b, c)
    },
    doGoNext: function(a, b) {
        if (a === null && Ext.isFunction(this.onApply)) {
            this.onApply();
            return false
        } else {
            return SYNO.ActiveBackup.Util.Wizard.superclass.goNext.call(this, a, b)
        }
    },
    onApply: Ext.emptyFn,
    initEvents: function() {
        this.callParent(arguments);
        this.getComponent("steps").items.each(function(a) {
            this.mon(a, "checkvalid", this.checkValid, this);
            a.checkState = function() {
                SYNO.SDS.Wizard.Step.prototype.checkState.call(this, arguments);
                this.fireEvent("checkvalid", this)
            }
        }, this)
    },
    checkValid: function(a) {
        if (a !== this.getActiveStep()) {
            return
        }
        if (!Ext.isFunction(a.validate)) {
            return
        }
        if (a.validate()) {
            this.getButton("next").enable()
        } else {
            this.getButton("next").disable()
        }
    }
});
Ext.define("SYNO.ActiveBackup.Util.ExpandableListView", {
    extend: "SYNO.ux.ExpandableListView",
    trackResetOnLoad: false,
    constructor: function(a) {
        a.innerTpl = a.innerTpl || new Ext.XTemplate("{detail_html}");
        this.callParent(arguments)
    },
    initComponent: function() {
        this.callParent(arguments);
        this.addEvents("beforetoggle", "toggle")
    },
    needToggleEvent: true,
    toggleDetail: function(a, b) {
        if (!this.innerTpl || !a) {
            return
        }
        if (this.needToggleEvent && this.fireEvent("beforetoggle", this, a) === false) {
            return
        }
        this.callParent(arguments);
        if (this.needToggleEvent) {
            this.fireEvent("toggle", this, a)
        }
    },
    restoreUIState: function() {
        this.needToggleEvent = false;
        this.callParent(arguments);
        this.needToggleEvent = true
    },
    selectAndExpandById: function(a) {
        var d = this.store.getById(a),
            c, b;
        if (!d) {
            return
        }
        this.select(d);
        c = this.getNode(d);
        b = Ext.get(c);
        this.fleXcrollTo(b);
        if (!b.child(".item-toggle-expanded")) {
            this.toggleDetail(b, true)
        }
    },
    collapseAll: function() {
        var a = this.getToggledItemIds();
        Ext.each(a, function(g, c, b) {
            var e, d;
            var f = this.getStore().getById(g);
            if (f) {
                e = this.getNode(f);
                d = Ext.fly(e);
                if (d && d.child(".item-toggle-expanded")) {
                    this.toggleDetail(d, false)
                }
            }
        }, this)
    }
});
Ext.define("SYNO.ActiveBackup.Util.ActionGroup", function(a) {
    return {
        constructor: function(b) {
            var c;
            this._actions = [];
            for (c in b) {
                if (b.hasOwnProperty(c)) {
                    this.add(c, b[c])
                }
            }
        },
        add: function(b, c) {
            this._actions[b] = new Ext.Action(c)
        },
        get: function(b) {
            return this._actions[b]
        },
        each: function(d) {
            var b = true,
                c;
            for (c in this._actions) {
                if (this._actions.hasOwnProperty(c)) {
                    b = d(c, this._actions[c]);
                    if (b === false) {
                        return
                    }
                }
            }
        },
        onSelectionChange: function(b) {
            this.each(function(e, c) {
                var d = c.initialConfig;
                var f = b;
                if (b > 1) {
                    f = 2
                }
                if (d.select_type_enable && d.select_type_enable[f] === true) {
                    c.enable()
                } else {
                    c.disable()
                }
            })
        }
    }
});
Ext.ns("SYNO.SDS.ActiveBackup");
SYNO.SDS.ActiveBackup.LogMassageId = {
    INTERNAL_ERROR: 1000,
    TASK_CREATED: 1001,
    TASK_REMOVED: 1002,
    TASK_PAUSED: 1003,
    TASK_RESUME: 1004,
    TASK_EDIT_RENAME: 1005,
    TASK_EDIT_BANDWIDTH: 1006,
    TASK_EDIT_SCHEDULE_ON: 1007,
    TASK_EDIT_SCHEDULE_OFF: 1008,
    TASK_START: 1101,
    TASK_FINISH: 1102,
    TASK_CANCEL: 1103,
    TASK_ERROR: 1104,
    TASK_WARNING: 1105,
    TASK_BACKUP_CONFLICT: 1106,
    TASK_ANOTHER_BACKUP_EXIST: 1107,
    TASK_PARTIAL_SUCCESS: 1108,
    VM_SPEED_INFO: 1110,
    AGENT_SPEED_INFO: 1111,
    TASK_VERIFY_EXIST: 1112,
    TASK_EXPORT_CONFIG_FAIL: 1113,
    TASK_DELETE_EXIST: 1114,
    TASK_FORBIDDEN: 1115,
    TASK_FORBIDDEN_COPY: 1116,
    RESTORE_START: 1201,
    RESTORE_CANCEL: 1202,
    RESTORE_FINISH: 1203,
    RESTORE_ERROR: 1204,
    RESTORE_WARNING: 1205,
    RESTORE_CONFLICT: 1206,
    RESTORE_ANOTHER_EXIST: 1207,
    RESTORE_PARTIAL_SUCCESS: 1208,
    RESTORE_TASK_NOT_FOUND: 1209,
    RESTORE_TASK_VERSION_NOT_FOUND: 1210,
    TASK_VERSION_ROTATE: 1301,
    TASK_VERSION_DELETE_START: 1302,
    TASK_VERSION_DELETE_FINISH: 1303,
    TASK_VERSION_DELETE_ERROR: 1304,
    TASK_TARGET_DELETE_START: 1305,
    TASK_TARGET_DELETE_FINISH: 1306,
    TASK_TARGET_DELETE_ERROR: 1307,
    TASK_VERSION_ROLLBACK: 1308,
    REMOVE_SERVER_START: 1309,
    REMOVE_SERVER_COMPLETED: 1310,
    REMOVE_SERVER_FAILED: 1311,
    REMOVE_VM_IN_TASK_START: 1312,
    REMOVE_VM_IN_TASK_FINISH: 1313,
    REMOVE_VM_IN_TASK_FAILED: 1314,
    REMOVE_VM_NAME_IN_TASK: 1315,
    RETENTION_DELETE_FAILED_BEING_RESTORED: 1316,
    RETENTION_DELETE_FAILED_BEING_DELETED: 1317,
    RETENTION_DELETE_FAILED_UNKNOWN_ERROR: 1318,
    RETENTION_DELETE_FAILED_FORBIDDEN: 1319,
    TEMPLATE_CREATE: 1401,
    TEMPLATE_REMOVE: 1402,
    TEMPLATE_EDIT: 1403,
    TEMPLATE_EDIT_RENAME: 1404,
    JOBQUEUE_DOWN: 1501,
    LICENSE_PUBLIC_BETA: 1602,
    VERIFICATION_VMM_NOT_INSTALLED: 1701,
    VERIFICATION_VMM_NOT_SUPPORTED: 1702,
    VERIFICATION_VMM_NO_CLUSTER: 1703,
    VERIFICATION_CREATE_IMAGES_ERROR: 1704,
    VERIFICATION_CREATE_VIDEO_ERROR: 1705,
    VERIFICATION_START: 1706,
    VERIFICATION_SUCCESS: 1707,
    VERIFICATION_PARTIAL_SUCCESS: 1708,
    VERIFICATION_ERROR: 1709,
    VERIFICATION_CANCEL: 1710,
    VERIFICATION_REPORT_SUCCESS: 1711,
    VERIFICATION_VMM_NO_SAME_VOLUME: 1712,
    VERIFICATION_MOUNT_TEST_ERROR: 1713,
    VERIFICATION_DSM_NOT_SUPPORTED: 1714,
    VERIFICATION_ACTIVATE_CODEC_ERROR: 1715,
    VMM_WEBAPI_ERROR: 1801,
    VMM_WEBAPI_ERROR_POWERON_GUEST: 1802,
    VMM_WEBAPI_ERROR_POWEROFF_GUEST: 1803,
    VMM_WEBAPI_ERROR_POWERON_GUEST_SEL_HOST: 1804,
    MOUNT_DIR_EXIST: 1901,
    SHARE_DELETED: 2001,
    SHARE_PATH_CHANGED: 2002,
    SHARE_RENAME: 2003,
    RELINK_TARGET_FINISH: 2004,
    RELINK_TARGET_ERROR: 2005,
    RELINK_DATA_CORRUPT: 2006,
    RELINK_NO_ENOUGH_SPACE: 2007,
    RELINK_PERMISSION_DENIED: 2008,
    VM_CBT_ENABLE: 3001,
    VM_CBT_ENABLE_ERROR: 3002,
    VM_SNAPSHOT_TAKE: 3003,
    VM_SNAPSHOT_TAKE_ERROR: 3004,
    VM_SNAPSHOT_REMOVE: 3005,
    VM_SNAPSHOT_REMOVE_ERROR: 3006,
    VM_EXEC_SCRIPT_NOT_ALLOWED: 3007,
    INCOMPATIBLE_VM_VERSION: 3008,
    VM_AUTHENTICATION_FAIL: 3009,
    VM_EXEC_SCRIPT_PATH_NOT_FOUND: 3010,
    VM_EXEC_SCRIPT_ERROR: 3011,
    VM_BACKUP_SPEC: 3013,
    VM_BACKUP_DISK: 3014,
    VM_RESTORE_NFS_MOUNT_ERROR: 3015,
    VM_RESTORE_NFS_SERVICE_ERROR: 3016,
    VM_BACKUP_START: 3017,
    VM_BACKUP_FINISH: 3018,
    VM_BACKUP_ERROR: 3019,
    VM_BACKUP_CANCEL: 3020,
    VM_RESTORE_START: 3021,
    VM_RESTORE_FINISH: 3022,
    VM_RESTORE_ERROR: 3023,
    VM_RESTORE_CANCEL: 3024,
    VM_MIGRATE_START: 3025,
    VM_MIGRATE_FINISH: 3026,
    VM_MIGRATE_PARTIAL_SUCCESS: 3027,
    VM_MIGRATE_ERROR: 3028,
    VM_MIGRATE_CANCEL: 3029,
    VM_MIGRATE_VM_START: 3030,
    VM_MIGRATE_VM_FINISH: 3031,
    VM_MIGRATE_VM_ERROR: 3032,
    VM_MIGRATE_VM_CANCEL: 3033,
    VM_EXEC_PRE_SCRIPT: 3034,
    VM_EXEC_PRE_SCRIPT_IGNORE_FAILURE: 3035,
    VM_EXEC_PRE_SCRIPT_ERROR: 3036,
    VM_EXEC_POST_SCRIPT: 3037,
    VM_EXEC_POST_SCRIPT_IGNORE_FAILURE: 3038,
    VM_EXEC_POST_SCRIPT_ERROR: 3039,
    VM_EXEC_SCRIPT_NO_VMTOOL_ERROR: 3040,
    VM_EXEC_SCRIPT_UPLOAD_ERROR: 3041,
    VM_EXEC_SCRIPT_NO_RETURN_ERROR: 3042,
    VM_RESTORE_LOAD_RECORDS: 3043,
    VM_RESTORE_CREATE_NFS_FOLDER: 3044,
    VM_RESTORE_FILE_TRANSFER: 3045,
    VM_RESTORE_VM_POWER_ON: 3046,
    VM_RESTORE_VM_REGISTER: 3047,
    VM_RESTORE_VM_CREATE_FOLDER: 3048,
    VM_RESTORE_VM_CREATE_DATASTORE: 3049,
    VM_RESTORE_VM_REMOVE_CONFLICT: 3050,
    VM_TASK_CREATED: 3051,
    VM_TASK_REMOVED: 3052,
    FREE_LICENSE_ESXI_NEED_SSH_CONNECT: 3053,
    VM_CONNECTION_FAIL: 3054,
    VM_ENTITY_NOT_FOUND: 3055,
    VM_SEND_REQUEST_FAIL: 3056,
    VM_DO_FULL_BACKUP: 3057,
    VM_DO_FULL_BACKUP_FREE_LICENSE: 3058,
    VM_RESTORE_CREATE_DISK_TIMEOUT: 3059,
    VM_RESTORE_GUEST_NOT_ENOUGH_SPACE: 3061,
    ADD_SERVER_COMPLETED: 3062,
    VM_BACKUP_DATASTORE_NOT_ENOUGH_SPACE: 3063,
    VM_RESTORE_STOP_WAIT_MIGRATION: 3064,
    VMTOOL_NOT_INSTALLED: 3065,
    VM_SKIP_NOT_SUPPORTED_DISK_FIRST_TIME: 3066,
    VM_SKIP_NOT_SUPPORTED_DISK: 3067,
    VM_SKIP_NOT_SUPPORTED_DISK_ONE: 3068,
    VM_TASK_PARTIAL_SUCCESS: 3069,
    VM_INVENTORY_THUMBPRINT_MISMATCH: 3070,
    VM_SSH_CONNECTION_FAIL: 3071,
    VM_RESTORE_OS_NOT_SUPPORT: 3072,
    VM_SKIP_NOT_SUPPORTED_DISK_ONE_FIRST_TIME: 3073,
    STORAGE_BUSY: 4001,
    STORAGE_CREATE_SUCCESS: 4002,
    STORAGE_REMOVE_SUCCESS: 4003,
    DEVICE_CONNECT: 5001,
    DEVICE_REMOVE: 5002,
    DEVICE_OPEN_VMM: 5003,
    DEVICE_EXPORT_VM: 5004,
    DEVICE_APPLY_TASK_TEMPLATE: 5005,
    DEVICE_OFFLINE: 5006,
    DEVICE_LOGOUT: 5007,
    DEVICE_PC_OFFLINE: 5010,
    DEVICE_NOT_FOUND: 5011,
    PATH_BACKUP: 6001,
    PATH_BACKUP_ERROR: 6002,
    PATH_RESTORE: 6003,
    PATH_RESTORE_SKIP: 6004,
    PATH_RESTORE_OVERWRITE: 6005,
    PATH_RESTORE_ERROR: 6006,
    PATH_RESTORE_CANCEL: 6007,
    PATH_DOWNLOAD: 6008,
    PATH_BACKUP_ATTR_ERROR: 6009,
    PATH_RESTORE_ATTR_ERROR: 6010,
    PC_COLLECT_DEVICE_SPEC: 7001,
    PC_TAKE_SNAPSHOT_START: 7002,
    PC_TAKE_SNAPSHOT_FINISH: 7003,
    PC_TAKE_SNAPSHOT_FINISH_ERROR: 7004,
    PC_TAKE_SNAPSHOT_SET_START: 7005,
    PC_TAKE_SNAPSHOT_SET_FINISH: 7006,
    PC_TAKE_SNAPSHOT_SET_FINISH_ERROR: 7007,
    PC_DATABASE_ERROR: 7008,
    PC_UPLOAD_DEVICE_SPEC_START: 7009,
    PC_UPLOAD_DEVICE_SPEC_FINISH: 7010,
    PC_UPLOAD_DEVICE_SPEC_FINISH_ERROR: 7011,
    PC_UPLOAD_VOLUME_START: 7012,
    PC_UPLOAD_VOLUME_FINISH: 7013,
    PC_UPLOAD_VOLUME_FINISH_ERROR: 7014,
    PC_RESTORE_RETRY: 7015,
    PC_UPDATE_AGENT_ERROR: 7016,
    PC_CREATE_TASK_ERROR_SHARE_NAME: 7017,
    PC_CREATE_TASK_ERROR_INTERNAL: 7018,
    PC_AUTH_ERROR: 7019,
    PC_READ_SNAPSHOT_ERROR: 7020,
    PC_SNAPSHOT_NOT_FOUND: 7021,
    PC_DEVICE_UPGRADE: 7022,
    PC_RESTORE_CREATE_FILE_ERROR: 7023,
    PC_RESTORE_WRITE_FILE_ERROR: 7024,
    PC_RESTORE_MISSING_OFFSET: 7025,
    PC_CREATE_TASK_ERROR_NO_QUOTA: 7026,
    PC_CREATE_TASK_ERROR_NO_SPACE: 7027,
    PC_CREATE_TASK_ERROR_STORAGE_EXISTED: 7028,
    REASON_NO_SPACE: 8001,
    REASON_NO_PERM: 8002,
    REASON_NO_QUOTA: 8003,
    REASON_READONLY_FS: 8004,
    REASON_IO_ERR: 8005,
    REASON_DATA_CORRUPT: 8006,
    REASON_NO_SPACE_SYSTEM: 8007,
    REASON_NO_QUOTA_SYSTEM: 8008,
    REASON_NO_TARGET_FOLDER_LOG: 8009,
    REASON_NO_TARGET_DATABASE: 8010,
    REASON_NO_TARGET_VERSION_FOLDER: 8011,
    REASON_BACKUP_IMAGE_OPEN_FAILURE: 8012,
    REASON_TARGET_MISSING: 8013,
    REASON_VDDK_GENERAL_ERROR: 8100,
    VDDK_NOT_SUPPORT_COMPRESSION: 8101,
    REASON_VDDK_RETRY_WARNING: 8102,
    FS_PATH_SET_ACL: 9013,
    FS_NOT_SUPPORT_ACLS: 9044,
    FS_NOT_SUPPORT_XATTRS: 9045,
    FS_PATH_SET_ATTR: 9071,
    FS_OLD_TASK_CREATED: 9900,
    FS_OLD_TASK_REMOVED: 9901,
    FS_OLD_TASK_EDIT_RENAME: 9902,
    FS_OLD_TASK_EDIT_BANDWIDTH: 9903,
    FS_OLD_TASK_EDIT_SCHEDULE_ON: 9904,
    FS_OLD_TASK_EDIT_SCHEDULE_OFF: 9905,
    FS_OLD_TASK_EDIT_BACKUP_FOLDER: 9906
};
SYNO.SDS.ActiveBackup.getLogTemplateString = function(a) {
    switch (a) {
        case SYNO.SDS.ActiveBackup.LogMassageId.INTERNAL_ERROR:
            return _LABS("log_msg", "internal_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_CREATED:
            return _LABS("log_msg", "task_created");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_REMOVED:
            return _LABS("log_msg", "task_removed");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_PAUSED:
            return _LABS("log_msg", "task_paused");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_RESUME:
            return _LABS("log_msg", "task_resume");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_EDIT_RENAME:
            return _LABS("log_msg", "task_edit_rename");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_EDIT_BANDWIDTH:
            return _LABS("log_msg", "task_edit_bandwidth");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_EDIT_SCHEDULE_ON:
            return _LABS("log_msg", "task_edit_schedule_on");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_EDIT_SCHEDULE_OFF:
            return _LABS("log_msg", "task_edit_schedule_off");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_START:
            return _LABS("log_msg", "task_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_FINISH:
            return _LABS("log_msg", "task_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_CANCEL:
            return _LABS("log_msg", "task_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_ERROR:
            return _LABS("log_msg", "task_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_WARNING:
            return _LABS("log_msg", "task_warning");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_BACKUP_CONFLICT:
            return _LABS("log_msg", "task_backup_conflict");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_ANOTHER_BACKUP_EXIST:
            return _LABS("log_msg", "task_another_backup_exist");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_PARTIAL_SUCCESS:
            return _LABS("log_msg", "task_partial_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SPEED_INFO:
            return _LABS("log_msg", "vm_speed_info");
        case SYNO.SDS.ActiveBackup.LogMassageId.AGENT_SPEED_INFO:
            return _LABS("log_msg", "agent_speed_info");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_VERIFY_EXIST:
            return _LABS("log_msg", "task_verify_exist");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_EXPORT_CONFIG_FAIL:
            return _LABS("log_msg", "task_export_config_fail");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_DELETE_EXIST:
            return _LABS("log_msg", "task_delete_exist");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_FORBIDDEN:
            return _LABS("log_msg", "task_forbidden");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_FORBIDDEN_COPY:
            return _LABS("log_msg", "task_forbidden_copy");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_START:
            return _LABS("log_msg", "restore_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_CANCEL:
            return _LABS("log_msg", "restore_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_FINISH:
            return _LABS("log_msg", "restore_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_ERROR:
            return _LABS("log_msg", "restore_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_WARNING:
            return _LABS("log_msg", "restore_warning");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_CONFLICT:
            return _LABS("log_msg", "restore_conflict");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_ANOTHER_EXIST:
            return _LABS("log_msg", "restore_another_exist");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_PARTIAL_SUCCESS:
            return _LABS("log_msg", "restore_partial_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_TASK_NOT_FOUND:
            return _LABS("log_msg", "restore_task_not_found");
        case SYNO.SDS.ActiveBackup.LogMassageId.RESTORE_TASK_VERSION_NOT_FOUND:
            return _LABS("log_msg", "restore_task_version_not_found");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_VERSION_ROTATE:
            return _LABS("log_msg", "task_version_rotate");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_VERSION_DELETE_START:
            return _LABS("log_msg", "task_version_delete_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_VERSION_DELETE_FINISH:
            return _LABS("log_msg", "task_version_delete_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_VERSION_DELETE_ERROR:
            return _LABS("log_msg", "task_version_delete_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_TARGET_DELETE_START:
            return _LABS("log_msg", "task_target_delete_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_TARGET_DELETE_FINISH:
            return _LABS("log_msg", "task_target_delete_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_TARGET_DELETE_ERROR:
            return _LABS("log_msg", "task_target_delete_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.TASK_VERSION_ROLLBACK:
            return _LABS("log_msg", "task_version_rollback");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_SERVER_START:
            return _LABS("log_msg", "remove_server_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_SERVER_COMPLETED:
            return _LABS("log_msg", "remove_server_completed");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_SERVER_FAILED:
            return _LABS("log_msg", "remove_server_failed");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_VM_IN_TASK_START:
            return _LABS("log_msg", "remove_vm_in_task_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_VM_IN_TASK_FINISH:
            return _LABS("log_msg", "remove_vm_in_task_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_VM_IN_TASK_FAILED:
            return _LABS("log_msg", "remove_vm_in_task_failed");
        case SYNO.SDS.ActiveBackup.LogMassageId.REMOVE_VM_NAME_IN_TASK:
            return _LABS("log_msg", "remove_vm_name_in_task");
        case SYNO.SDS.ActiveBackup.LogMassageId.RETENTION_DELETE_FAILED_BEING_RESTORED:
            return _LABS("log_msg", "retention_delete_failed_being_restored");
        case SYNO.SDS.ActiveBackup.LogMassageId.RETENTION_DELETE_FAILED_BEING_DELETED:
            return _LABS("log_msg", "retention_delete_failed_being_deleted");
        case SYNO.SDS.ActiveBackup.LogMassageId.RETENTION_DELETE_FAILED_UNKNOWN_ERROR:
            return _LABS("log_msg", "retention_delete_failed_unknown_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.RETENTION_DELETE_FAILED_FORBIDDEN:
            return _LABS("log_msg", "retention_delete_failed_forbidden");
        case SYNO.SDS.ActiveBackup.LogMassageId.TEMPLATE_CREATE:
            return _LABS("log_msg", "template_create");
        case SYNO.SDS.ActiveBackup.LogMassageId.TEMPLATE_REMOVE:
            return _LABS("log_msg", "template_remove");
        case SYNO.SDS.ActiveBackup.LogMassageId.TEMPLATE_EDIT:
            return _LABS("log_msg", "template_edit");
        case SYNO.SDS.ActiveBackup.LogMassageId.TEMPLATE_EDIT_RENAME:
            return _LABS("log_msg", "template_edit_rename");
        case SYNO.SDS.ActiveBackup.LogMassageId.JOBQUEUE_DOWN:
            return _LABS("log_msg", "jobqueue_down");
        case SYNO.SDS.ActiveBackup.LogMassageId.LICENSE_PUBLIC_BETA:
            return _LABS("log_msg", "license_public_beta");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_VMM_NOT_INSTALLED:
            return _LABS("log_msg", "verification_vmm_not_installed");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_VMM_NOT_SUPPORTED:
            return _LABS("log_msg", "verification_vmm_not_supported");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_VMM_NO_CLUSTER:
            return _LABS("log_msg", "verification_vmm_no_cluster");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_CREATE_IMAGES_ERROR:
            return _LABS("log_msg", "verification_create_images_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_CREATE_VIDEO_ERROR:
            return _LABS("log_msg", "verification_create_video_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_START:
            return _LABS("log_msg", "verification_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_SUCCESS:
            return _LABS("log_msg", "verification_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_PARTIAL_SUCCESS:
            return _LABS("log_msg", "verification_partial_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_ERROR:
            return _LABS("log_msg", "verification_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_CANCEL:
            return _LABS("log_msg", "verification_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_REPORT_SUCCESS:
            return _LABS("log_msg", "verification_report_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_VMM_NO_SAME_VOLUME:
            return _LABS("log_msg", "verification_vmm_no_same_volume");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_MOUNT_TEST_ERROR:
            return _LABS("log_msg", "verification_mount_test_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_DSM_NOT_SUPPORTED:
            return _LABS("log_msg", "verification_dsm_not_supported");
        case SYNO.SDS.ActiveBackup.LogMassageId.VERIFICATION_ACTIVATE_CODEC_ERROR:
            return _LABS("log_msg", "verification_activate_codec_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VMM_WEBAPI_ERROR:
            return _LABS("log_msg", "vmm_webapi_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VMM_WEBAPI_ERROR_POWERON_GUEST:
            return _LABS("log_msg", "vmm_webapi_error_poweron_guest");
        case SYNO.SDS.ActiveBackup.LogMassageId.VMM_WEBAPI_ERROR_POWEROFF_GUEST:
            return _LABS("log_msg", "vmm_webapi_error_poweroff_guest");
        case SYNO.SDS.ActiveBackup.LogMassageId.VMM_WEBAPI_ERROR_POWERON_GUEST_SEL_HOST:
            return _LABS("log_msg", "vmm_webapi_error_poweron_guest_sel_host");
        case SYNO.SDS.ActiveBackup.LogMassageId.MOUNT_DIR_EXIST:
            return _LABS("log_msg", "mount_dir_exist");
        case SYNO.SDS.ActiveBackup.LogMassageId.SHARE_DELETED:
            return _LABS("log_msg", "share_deleted");
        case SYNO.SDS.ActiveBackup.LogMassageId.SHARE_PATH_CHANGED:
            return _LABS("log_msg", "share_path_changed");
        case SYNO.SDS.ActiveBackup.LogMassageId.SHARE_RENAME:
            return _LABS("log_msg", "share_rename");
        case SYNO.SDS.ActiveBackup.LogMassageId.RELINK_TARGET_FINISH:
            return _LABS("log_msg", "relink_target_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.RELINK_TARGET_ERROR:
            return _LABS("log_msg", "relink_target_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.RELINK_DATA_CORRUPT:
            return _LABS("log_msg", "relink_data_corrupt");
        case SYNO.SDS.ActiveBackup.LogMassageId.RELINK_NO_ENOUGH_SPACE:
            return _LABS("log_msg", "relink_no_enough_space");
        case SYNO.SDS.ActiveBackup.LogMassageId.RELINK_PERMISSION_DENIED:
            return _LABS("log_msg", "relink_permission_denied");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_CBT_ENABLE:
            return _LABS("log_msg", "vm_cbt_enable");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_CBT_ENABLE_ERROR:
            return _LABS("log_msg", "vm_cbt_enable_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SNAPSHOT_TAKE:
            return _LABS("log_msg", "vm_snapshot_take");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SNAPSHOT_TAKE_ERROR:
            return _LABS("log_msg", "vm_snapshot_take_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SNAPSHOT_REMOVE:
            return _LABS("log_msg", "vm_snapshot_remove");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SNAPSHOT_REMOVE_ERROR:
            return _LABS("log_msg", "vm_snapshot_remove_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_SCRIPT_NOT_ALLOWED:
            return _LABS("log_msg", "vm_exec_script_not_allowed");
        case SYNO.SDS.ActiveBackup.LogMassageId.INCOMPATIBLE_VM_VERSION:
            return _LABS("log_msg", "incompatible_vm_version");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_AUTHENTICATION_FAIL:
            return _LABS("log_msg", "vm_authentication_fail");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_SCRIPT_PATH_NOT_FOUND:
            return _LABS("log_msg", "vm_exec_script_path_not_found");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_SCRIPT_ERROR:
            return _LABS("log_msg", "vm_exec_script_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_SPEC:
            return _LABS("log_msg", "vm_backup_spec");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_DISK:
            return _LABS("log_msg", "vm_backup_disk");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_NFS_MOUNT_ERROR:
            return _LABS("log_msg", "vm_restore_nfs_mount_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_NFS_SERVICE_ERROR:
            return _LABS("log_msg", "vm_restore_nfs_service_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_START:
            return _LABS("log_msg", "vm_backup_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_FINISH:
            return _LABS("log_msg", "vm_backup_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_ERROR:
            return _LABS("log_msg", "vm_backup_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_CANCEL:
            return _LABS("log_msg", "vm_backup_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_START:
            return _LABS("log_msg", "vm_restore_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_FINISH:
            return _LABS("log_msg", "vm_restore_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_ERROR:
            return _LABS("log_msg", "vm_restore_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_CANCEL:
            return _LABS("log_msg", "vm_restore_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_START:
            return _LABS("log_msg", "vm_migrate_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_FINISH:
            return _LABS("log_msg", "vm_migrate_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_PARTIAL_SUCCESS:
            return _LABS("log_msg", "vm_migrate_partial_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_ERROR:
            return _LABS("log_msg", "vm_migrate_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_CANCEL:
            return _LABS("log_msg", "vm_migrate_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_VM_START:
            return _LABS("log_msg", "vm_migrate_vm_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_VM_FINISH:
            return _LABS("log_msg", "vm_migrate_vm_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_VM_ERROR:
            return _LABS("log_msg", "vm_migrate_vm_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_MIGRATE_VM_CANCEL:
            return _LABS("log_msg", "vm_migrate_vm_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_PRE_SCRIPT:
            return _LABS("log_msg", "vm_exec_pre_script");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_PRE_SCRIPT_IGNORE_FAILURE:
            return _LABS("log_msg", "vm_exec_pre_script_ignore_failure");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_PRE_SCRIPT_ERROR:
            return _LABS("log_msg", "vm_exec_pre_script_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_POST_SCRIPT:
            return _LABS("log_msg", "vm_exec_post_script");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_POST_SCRIPT_IGNORE_FAILURE:
            return _LABS("log_msg", "vm_exec_post_script_ignore_failure");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_POST_SCRIPT_ERROR:
            return _LABS("log_msg", "vm_exec_post_script_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_SCRIPT_NO_VMTOOL_ERROR:
            return _LABS("log_msg", "vm_exec_script_no_vmtool_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_SCRIPT_UPLOAD_ERROR:
            return _LABS("log_msg", "vm_exec_script_upload_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_EXEC_SCRIPT_NO_RETURN_ERROR:
            return _LABS("log_msg", "vm_exec_script_no_return_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_LOAD_RECORDS:
            return _LABS("log_msg", "vm_restore_load_records");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_CREATE_NFS_FOLDER:
            return _LABS("log_msg", "vm_restore_create_nfs_folder");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_FILE_TRANSFER:
            return _LABS("log_msg", "vm_restore_file_transfer");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_VM_POWER_ON:
            return _LABS("log_msg", "vm_restore_vm_power_on");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_VM_REGISTER:
            return _LABS("log_msg", "vm_restore_vm_register");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_VM_CREATE_FOLDER:
            return _LABS("log_msg", "vm_restore_vm_create_folder");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_VM_CREATE_DATASTORE:
            return _LABS("log_msg", "vm_restore_vm_create_datastore");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_VM_REMOVE_CONFLICT:
            return _LABS("log_msg", "vm_restore_vm_remove_conflict");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_TASK_CREATED:
            return _LABS("log_msg", "vm_task_created");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_TASK_REMOVED:
            return _LABS("log_msg", "vm_task_removed");
        case SYNO.SDS.ActiveBackup.LogMassageId.FREE_LICENSE_ESXI_NEED_SSH_CONNECT:
            return _LABS("log_msg", "free_license_esxi_need_ssh_connect");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_CONNECTION_FAIL:
            return _LABS("log_msg", "vm_connection_fail");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_ENTITY_NOT_FOUND:
            return _LABS("log_msg", "vm_entity_not_found");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SEND_REQUEST_FAIL:
            return _LABS("log_msg", "vm_send_request_fail");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_DO_FULL_BACKUP:
            return _LABS("log_msg", "vm_do_full_backup");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_DO_FULL_BACKUP_FREE_LICENSE:
            return _LABS("log_msg", "vm_do_full_backup_free_license");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_CREATE_DISK_TIMEOUT:
            return _LABS("log_msg", "vm_restore_create_disk_timeout");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_GUEST_NOT_ENOUGH_SPACE:
            return _LABS("log_msg", "vm_restore_guest_not_enough_space");
        case SYNO.SDS.ActiveBackup.LogMassageId.ADD_SERVER_COMPLETED:
            return _LABS("log_msg", "add_server_completed");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_BACKUP_DATASTORE_NOT_ENOUGH_SPACE:
            return _LABS("log_msg", "vm_backup_datastore_not_enough_space");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_STOP_WAIT_MIGRATION:
            return _LABS("log_msg", "vm_restore_stop_wait_migration");
        case SYNO.SDS.ActiveBackup.LogMassageId.VMTOOL_NOT_INSTALLED:
            return _LABS("log_msg", "vmtool_not_installed");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SKIP_NOT_SUPPORTED_DISK_FIRST_TIME:
            return _LABS("log_msg", "vm_skip_not_supported_disk_first_time");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SKIP_NOT_SUPPORTED_DISK:
            return _LABS("log_msg", "vm_skip_not_supported_disk");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SKIP_NOT_SUPPORTED_DISK_ONE:
            return _LABS("log_msg", "vm_skip_not_supported_disk_one");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_TASK_PARTIAL_SUCCESS:
            return _LABS("log_msg", "vm_task_partial_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_INVENTORY_THUMBPRINT_MISMATCH:
            return _LABS("log_msg", "vm_inventory_thumbprint_mismatch");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SSH_CONNECTION_FAIL:
            return _LABS("log_msg", "vm_ssh_connection_fail");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_RESTORE_OS_NOT_SUPPORT:
            return _LABS("log_msg", "vm_restore_os_not_support");
        case SYNO.SDS.ActiveBackup.LogMassageId.VM_SKIP_NOT_SUPPORTED_DISK_ONE_FIRST_TIME:
            return _LABS("log_msg", "vm_skip_not_supported_disk_one_first_time");
        case SYNO.SDS.ActiveBackup.LogMassageId.STORAGE_BUSY:
            return _LABS("log_msg", "storage_busy");
        case SYNO.SDS.ActiveBackup.LogMassageId.STORAGE_CREATE_SUCCESS:
            return _LABS("log_msg", "storage_create_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.STORAGE_REMOVE_SUCCESS:
            return _LABS("log_msg", "storage_remove_success");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_CONNECT:
            return _LABS("log_msg", "device_connect");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_REMOVE:
            return _LABS("log_msg", "device_remove");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_OPEN_VMM:
            return _LABS("log_msg", "device_open_vmm");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_EXPORT_VM:
            return _LABS("log_msg", "device_export_vm");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_APPLY_TASK_TEMPLATE:
            return _LABS("log_msg", "device_apply_task_template");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_OFFLINE:
            return _LABS("log_msg", "device_offline");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_LOGOUT:
            return _LABS("log_msg", "device_logout");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_PC_OFFLINE:
            return _LABS("log_msg", "device_pc_offline");
        case SYNO.SDS.ActiveBackup.LogMassageId.DEVICE_NOT_FOUND:
            return _LABS("log_msg", "device_not_found");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_BACKUP:
            return _LABS("log_msg", "path_backup");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_BACKUP_ERROR:
            return _LABS("log_msg", "path_backup_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_RESTORE:
            return _LABS("log_msg", "path_restore");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_RESTORE_SKIP:
            return _LABS("log_msg", "path_restore_skip");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_RESTORE_OVERWRITE:
            return _LABS("log_msg", "path_restore_overwrite");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_RESTORE_ERROR:
            return _LABS("log_msg", "path_restore_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_RESTORE_CANCEL:
            return _LABS("log_msg", "path_restore_cancel");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_DOWNLOAD:
            return _LABS("log_msg", "path_download");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_BACKUP_ATTR_ERROR:
            return _LABS("log_msg", "path_backup_attr_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PATH_RESTORE_ATTR_ERROR:
            return _LABS("log_msg", "path_restore_attr_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_COLLECT_DEVICE_SPEC:
            return _LABS("log_msg", "pc_collect_device_spec");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_TAKE_SNAPSHOT_START:
            return _LABS("log_msg", "pc_take_snapshot_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_TAKE_SNAPSHOT_FINISH:
            return _LABS("log_msg", "pc_take_snapshot_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_TAKE_SNAPSHOT_FINISH_ERROR:
            return _LABS("log_msg", "pc_take_snapshot_finish_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_TAKE_SNAPSHOT_SET_START:
            return _LABS("log_msg", "pc_take_snapshot_set_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_TAKE_SNAPSHOT_SET_FINISH:
            return _LABS("log_msg", "pc_take_snapshot_set_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_TAKE_SNAPSHOT_SET_FINISH_ERROR:
            return _LABS("log_msg", "pc_take_snapshot_set_finish_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_DATABASE_ERROR:
            return _LABS("log_msg", "pc_database_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPLOAD_DEVICE_SPEC_START:
            return _LABS("log_msg", "pc_upload_device_spec_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPLOAD_DEVICE_SPEC_FINISH:
            return _LABS("log_msg", "pc_upload_device_spec_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPLOAD_DEVICE_SPEC_FINISH_ERROR:
            return _LABS("log_msg", "pc_upload_device_spec_finish_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPLOAD_VOLUME_START:
            return _LABS("log_msg", "pc_upload_volume_start");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPLOAD_VOLUME_FINISH:
            return _LABS("log_msg", "pc_upload_volume_finish");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPLOAD_VOLUME_FINISH_ERROR:
            return _LABS("log_msg", "pc_upload_volume_finish_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_RESTORE_RETRY:
            return _LABS("log_msg", "pc_restore_retry");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_UPDATE_AGENT_ERROR:
            return _LABS("log_msg", "pc_update_agent_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_CREATE_TASK_ERROR_SHARE_NAME:
            return _LABS("log_msg", "pc_create_task_error_share_name");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_CREATE_TASK_ERROR_INTERNAL:
            return _LABS("log_msg", "pc_create_task_error_internal");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_AUTH_ERROR:
            return _LABS("log_msg", "pc_auth_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_READ_SNAPSHOT_ERROR:
            return _LABS("log_msg", "pc_read_snapshot_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_SNAPSHOT_NOT_FOUND:
            return _LABS("log_msg", "pc_snapshot_not_found");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_DEVICE_UPGRADE:
            return _LABS("log_msg", "pc_device_upgrade");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_RESTORE_CREATE_FILE_ERROR:
            return _LABS("log_msg", "pc_restore_create_file_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_RESTORE_WRITE_FILE_ERROR:
            return _LABS("log_msg", "pc_restore_write_file_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_RESTORE_MISSING_OFFSET:
            return _LABS("log_msg", "pc_restore_missing_offset");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_CREATE_TASK_ERROR_NO_QUOTA:
            return _LABS("log_msg", "pc_create_task_error_no_quota");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_CREATE_TASK_ERROR_NO_SPACE:
            return _LABS("log_msg", "pc_create_task_error_no_space");
        case SYNO.SDS.ActiveBackup.LogMassageId.PC_CREATE_TASK_ERROR_STORAGE_EXISTED:
            return _LABS("log_msg", "pc_create_task_error_storage_existed");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_SPACE:
            return _LABS("log_msg", "reason_no_space");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_PERM:
            return _LABS("log_msg", "reason_no_perm");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_QUOTA:
            return _LABS("log_msg", "reason_no_quota");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_READONLY_FS:
            return _LABS("log_msg", "reason_readonly_fs");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_IO_ERR:
            return _LABS("log_msg", "reason_io_err");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_DATA_CORRUPT:
            return _LABS("log_msg", "reason_data_corrupt");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_SPACE_SYSTEM:
            return _LABS("log_msg", "reason_no_space_system");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_QUOTA_SYSTEM:
            return _LABS("log_msg", "reason_no_quota_system");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_TARGET_FOLDER_LOG:
            return _LABS("log_msg", "reason_no_target_folder_log");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_TARGET_DATABASE:
            return _LABS("log_msg", "reason_no_target_database");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_NO_TARGET_VERSION_FOLDER:
            return _LABS("log_msg", "reason_no_target_version_folder");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_BACKUP_IMAGE_OPEN_FAILURE:
            return _LABS("log_msg", "reason_backup_image_open_failure");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_TARGET_MISSING:
            return _LABS("log_msg", "reason_target_missing");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_VDDK_GENERAL_ERROR:
            return _LABS("log_msg", "reason_vddk_general_error");
        case SYNO.SDS.ActiveBackup.LogMassageId.VDDK_NOT_SUPPORT_COMPRESSION:
            return _LABS("log_msg", "vddk_not_support_compression");
        case SYNO.SDS.ActiveBackup.LogMassageId.REASON_VDDK_RETRY_WARNING:
            return _LABS("log_msg", "reason_vddk_retry_warning");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_PATH_SET_ACL:
            return _LABS("log_msg", "fs_path_set_acl");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_NOT_SUPPORT_ACLS:
            return _LABS("log_msg", "fs_not_support_acls");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_NOT_SUPPORT_XATTRS:
            return _LABS("log_msg", "fs_not_support_xattrs");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_PATH_SET_ATTR:
            return _LABS("log_msg", "fs_path_set_attr");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_CREATED:
            return _LABS("log_msg", "fs_old_task_created");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_REMOVED:
            return _LABS("log_msg", "fs_old_task_removed");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_EDIT_RENAME:
            return _LABS("log_msg", "fs_old_task_edit_rename");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_EDIT_BANDWIDTH:
            return _LABS("log_msg", "fs_old_task_edit_bandwidth");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_EDIT_SCHEDULE_ON:
            return _LABS("log_msg", "fs_old_task_edit_schedule_on");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_EDIT_SCHEDULE_OFF:
            return _LABS("log_msg", "fs_old_task_edit_schedule_off");
        case SYNO.SDS.ActiveBackup.LogMassageId.FS_OLD_TASK_EDIT_BACKUP_FOLDER:
            return _LABS("log_msg", "fs_old_task_edit_backup_folder");
        default:
            return "Unknow Error"
    }
};

function _STRING(b, a) {
    return _TT("SYNO.ActiveBackup.AppInstance", b, a) || _TT("SYNO.SDS.ActiveBackupPortal.Application", b, a) || _T(b, a)
}
Ext.define("SYNO.SDS.ActiveBackupPortal.Errors", {});
Ext.namespace("SYNO.SDS.ActiveBackup");
SYNO.SDS.ActiveBackup.ErrorTable = {
    PACKAGE_DISABLED: 102,
    INTERNAL_ERROR: 1001,
    ERR_USER_INFO_UNAVAILABLE: 1002,
    TEMPLATE_TARGET_NOT_EXIST: 1003,
    DOMAIN_CONNECTION_FAILED: 1004,
    LDAP_CONNECTION_FAILED: 1005,
    UPGRADE_INITIALIZING: 1006,
    UPGRADE_RUNNING: 1007,
    UPGRADE_FAIL: 1008,
    BATCH_ERROR: 1009,
    NO_TASK_EXIST: 1010,
    NO_TASK_PERMISSION: 1011,
    REASON_DATA_CORRUPT: 1012,
    REASON_IO_ERR: 1013,
    REASON_NO_PERM: 1014,
    REASON_NO_QUOTA: 1015,
    REASON_NO_SPACE: 1016,
    REASON_READONLY_FS: 1017,
    DATABASE: 1018,
    REASON_NO_SPACE_SYSTEM: 1019,
    REASON_NO_QUOTA_SYSTEM: 1020,
    NOT_SUPPORT_ACL: 1021,
    FOLDER_NOT_EXISTS_BY_VERSION: 1022,
    REASON_NO_TARGET_FOLDER: 1023,
    ACTIVATION_FAIL: 1024,
    UPGRADE_FAIL_REASON_SHARE_UNMOUNT: 1025,
    STORAGE_ALREADY_EXISTED: 1026,
    OLD_VERSION_STORAGE_ALREADY_EXISTED: 1027,
    REASON_TARGET_MISSING: 1028,
    TASK_WITH_LOCKED_VERSION_REMOVE_FAIL: 1101,
    MODIFY_SOURCE_WHEN_BACKUP_TASK: 1102,
    TASK_VERSION_OR_DEVICE_NOT_EXIST: 1103,
    JOB_NOT_FOUND: 1201,
    JOB_CONFLICT: 1202,
    JOB_RESOURCE_LOCKED: 1203,
    JOB_RESOURCE_BACKUP_LOCKED: 1204,
    JOB_RESOURCE_RESTORE_LOCKED: 1205,
    JOB_RESOURCE_DELETE_LOCKED: 1206,
    JOB_CONFLICT_VERIFY_EXIST: 1207,
    JOB_CONFLICT_DELETE_EXIST: 1208,
    JOB_FORBIDDEN: 1209,
    IMAGE_NODE_LIST_ERROR: 1301,
    FS_TYPE_NOT_SUPPORTED: 1302,
    RELINK_DATA_CORRUPT: 1401,
    RELINK_NO_ENOUGH_SPACE: 1402,
    RELINK_PERMISSION_DENIED: 1403,
    MOUNT_DIR_EXIST: 1501,
    FS_ILLEGAL_SSH_KEY_NO_PASSPHRASE: 1601,
    FS_AUTH_SSH_KEY: 1602,
    LICENSE_PUBLIC_BETA: 2000,
    LICENSE_GET_INFO_FAIL: 2002,
    VM_CONNECTION_FAIL: 3001,
    VM_AUTHENTICATION_FAIL: 3002,
    VM_SEND_REQUEST_FAIL: 3003,
    HOST_ALREADY_EXIST: 3004,
    FREE_LICENSE_ESXI_NEED_SSH_CONNECT: 3005,
    VM_UNKNOWN_HOST_TYPE: 3006,
    VM_REMOVE_INVENTORY_FAIL: 3007,
    FIELD_NOT_EXIST: 3008,
    VMTOOL_NOT_INSTALLED: 3009,
    VDDK_PORT_UNAVAILABLE: 3010,
    VM_INVENTORY_THUMBPRINT_MISMATCH: 3011,
    VM_REMOVE_INVENTORY_CONFLICT: 3012,
    SERVER_USED: 4001,
    FS_FOLDER_USED: 4002,
    TASK_NAME_USED: 4003,
    RESTORE_CONFLICT: 4004,
    TASK_BACKUP_CONFLICT: 4005,
    RESTORE_ANOTHER_EXIST: 4006,
    TASK_ANOTHER_BACKUP_EXIST: 4007,
    FS_AUTH: 4008,
    SSL_VERIFY: 4009,
    SERVER: 4010,
    TIME_OUT: 4011,
    FS_INTERNET: 4012,
    FS_SERVER_OFFLINE: 4013,
    FS_SERVER_DISABLE: 4014,
    SERVER_INVALID_OPTION: 4015,
    SERVER_DENY_IP: 4016,
    CONNECTION_ABORT: 4017,
    NO_ROUTE_TO_HOST: 4018,
    CONNECTION_REFUSED: 4019,
    FS_TEST_CONNECTION_FAILED: 4020,
    FS_SSL_CONNECTION_REFUSED: 4021,
    FS_COULDNOT_RESOLVE_HOST: 4022,
    FS_OPERATION_NOT_SUPPORT: 4023,
    OPERATION_NOT_SUPPORT: 4024,
    FILE_NOT_SUPPORT: 4025,
    FOLDER_INVALID: 4026,
    FS_LOCAL_BKPFOLDER_NOT_FOUND: 4027,
    FS_SHARE_UNMOUNT: 4028,
    FS_SHARE_FOLDER_TYPE: 4029,
    FS_FOLDER_NO_PERMISSION: 4030,
    VSS_NOT_SUPPORTED_OPERATION: 4031,
    FS_LOCAL_NO_SPACE: 4032,
    FS_LOCAL_NOT_FOUND: 4033,
    FS_LOCAL_NO_PERMISSION: 4034,
    FS_SERVER_NO_SPACE: 4035,
    FS_SERVER_BKPFOLDER_NOT_FOUND: 4036,
    FS_SERVER_NOT_FOUND: 4037,
    FS_SERVER_NO_PERMISSION: 4038,
    FS_VSS_NOT_FOUND: 4039,
    FS_VSS_NOT_SUPPORTED_OPERATION: 4040,
    FS_VSS_BAD_STATE: 4041,
    FS_NOT_SUPPORT_ACLS: 4042,
    FS_NOT_SUPPORT_XATTRS: 4043,
    FS_RSYNC_COMMAND_NOT_FOUND: 4044,
    FS_UNABLE_CONNECT_TO_DAEMON: 4045,
    FS_UNKNOWN_MODULE: 4046,
    INVALID_DESTINATION_PATH: 4047,
    DEVICE_OFFLINE: 5001,
    DOWNLOAD_INSTALLER_FAILED: 5002,
    DEVICE_IS_DELETING: 5003,
    UNKNOW: 9999
};
SYNO.SDS.ActiveBackup.getErrorString = function(a) {
    switch (a) {
        case SYNO.SDS.ActiveBackup.ErrorTable.PACKAGE_DISABLED:
            return _STRING("error", "package_disabled");
        case SYNO.SDS.ActiveBackup.ErrorTable.INTERNAL_ERROR:
            return _STRING("log_msg", "internal_error");
        case SYNO.SDS.ActiveBackup.ErrorTable.ERR_USER_INFO_UNAVAILABLE:
            return _STRING("warning", "err_user_info_unavailable");
        case SYNO.SDS.ActiveBackup.ErrorTable.TEMPLATE_TARGET_NOT_EXIST:
            return _STRING("warning", "template_target_not_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.DOMAIN_CONNECTION_FAILED:
            return _STRING("warning", "domain_connection_failed");
        case SYNO.SDS.ActiveBackup.ErrorTable.LDAP_CONNECTION_FAILED:
            return _STRING("warning", "ldap_connection_failed");
        case SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_INITIALIZING:
            return _STRING("upgrade_status", "upgrade_initializing");
        case SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_RUNNING:
            return _STRING("upgrade_status", "upgrade_running");
        case SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_FAIL:
            return _STRING("upgrade_status", "upgrade_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.BATCH_ERROR:
            return _STRING("error", "batch_error");
        case SYNO.SDS.ActiveBackup.ErrorTable.NO_TASK_EXIST:
            return _STRING("warning", "no_task_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.NO_TASK_PERMISSION:
            return _STRING("error", "no_task_permission");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_DATA_CORRUPT:
            return _STRING("log_msg", "reason_data_corrupt");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_IO_ERR:
            return _STRING("log_msg", "reason_io_err");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_NO_PERM:
            return _STRING("log_msg", "reason_no_perm");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_NO_QUOTA:
            return _STRING("log_msg", "reason_no_quota");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_NO_SPACE:
            return _STRING("log_msg", "reason_no_space");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_READONLY_FS:
            return _STRING("log_msg", "reason_readonly_fs");
        case SYNO.SDS.ActiveBackup.ErrorTable.DATABASE:
            return _STRING("error", "database");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_NO_SPACE_SYSTEM:
            return _STRING("log_msg", "reason_no_space_system");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_NO_QUOTA_SYSTEM:
            return _STRING("log_msg", "reason_no_quota_system");
        case SYNO.SDS.ActiveBackup.ErrorTable.NOT_SUPPORT_ACL:
            return _STRING("error", "not_support_acl");
        case SYNO.SDS.ActiveBackup.ErrorTable.FOLDER_NOT_EXISTS_BY_VERSION:
            return _STRING("error", "folder_not_exists_by_version");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_NO_TARGET_FOLDER:
            return _STRING("log_msg", "reason_no_target_folder");
        case SYNO.SDS.ActiveBackup.ErrorTable.ACTIVATION_FAIL:
            return _STRING("error", "activation_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_FAIL_REASON_SHARE_UNMOUNT:
            return _STRING("upgrade_status", "upgrade_fail_reason_share_unmount");
        case SYNO.SDS.ActiveBackup.ErrorTable.STORAGE_ALREADY_EXISTED:
            return _STRING("error", "storage_already_existed");
        case SYNO.SDS.ActiveBackup.ErrorTable.OLD_VERSION_STORAGE_ALREADY_EXISTED:
            return _STRING("error", "old_version_storage_already_existed");
        case SYNO.SDS.ActiveBackup.ErrorTable.REASON_TARGET_MISSING:
            return _STRING("log_msg", "reason_target_missing");
        case SYNO.SDS.ActiveBackup.ErrorTable.TASK_WITH_LOCKED_VERSION_REMOVE_FAIL:
            return _STRING("error", "task_with_locked_version_remove_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.MODIFY_SOURCE_WHEN_BACKUP_TASK:
            return _STRING("warning", "modify_source_when_backup_task");
        case SYNO.SDS.ActiveBackup.ErrorTable.TASK_VERSION_OR_DEVICE_NOT_EXIST:
            return _STRING("error", "task_version_or_device_not_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_NOT_FOUND:
            return _STRING("error", "job_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_CONFLICT:
            return _STRING("error", "job_conflict");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_RESOURCE_LOCKED:
            return _STRING("error", "job_resource_locked");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_RESOURCE_BACKUP_LOCKED:
            return _STRING("error", "job_resource_backup_locked");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_RESOURCE_RESTORE_LOCKED:
            return _STRING("error", "job_resource_restore_locked");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_RESOURCE_DELETE_LOCKED:
            return _STRING("error", "job_resource_delete_locked");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_CONFLICT_VERIFY_EXIST:
            return _STRING("error", "job_conflict_verify_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_CONFLICT_DELETE_EXIST:
            return _STRING("error", "job_conflict_delete_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.JOB_FORBIDDEN:
            return _STRING("error", "job_forbidden");
        case SYNO.SDS.ActiveBackup.ErrorTable.IMAGE_NODE_LIST_ERROR:
            return _STRING("error", "image_node_list_error");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_TYPE_NOT_SUPPORTED:
            return _STRING("error", "fs_type_not_supported");
        case SYNO.SDS.ActiveBackup.ErrorTable.RELINK_DATA_CORRUPT:
            return _STRING("log_msg", "relink_data_corrupt");
        case SYNO.SDS.ActiveBackup.ErrorTable.RELINK_NO_ENOUGH_SPACE:
            return _STRING("log_msg", "relink_no_enough_space");
        case SYNO.SDS.ActiveBackup.ErrorTable.RELINK_PERMISSION_DENIED:
            return _STRING("log_msg", "relink_permission_denied");
        case SYNO.SDS.ActiveBackup.ErrorTable.MOUNT_DIR_EXIST:
            return _STRING("log_msg", "mount_dir_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_ILLEGAL_SSH_KEY_NO_PASSPHRASE:
            return _STRING("error", "fs_illegal_ssh_key_no_passphrase");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_AUTH_SSH_KEY:
            return _STRING("error", "fs_auth_ssh_key");
        case SYNO.SDS.ActiveBackup.ErrorTable.LICENSE_PUBLIC_BETA:
            return _STRING("log_msg", "license_public_beta");
        case SYNO.SDS.ActiveBackup.ErrorTable.LICENSE_GET_INFO_FAIL:
            return _STRING("error", "license_get_info_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_CONNECTION_FAIL:
            return _STRING("error", "vm_connection_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_AUTHENTICATION_FAIL:
            return _STRING("error", "vm_authentication_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_SEND_REQUEST_FAIL:
            return _STRING("error", "vm_send_request_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.HOST_ALREADY_EXIST:
            return _STRING("warning", "host_already_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.FREE_LICENSE_ESXI_NEED_SSH_CONNECT:
            return _STRING("error", "free_license_esxi_need_ssh_connect");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_UNKNOWN_HOST_TYPE:
            return _STRING("error", "vm_unknown_host_type");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_REMOVE_INVENTORY_FAIL:
            return _STRING("error", "vm_remove_inventory_fail");
        case SYNO.SDS.ActiveBackup.ErrorTable.FIELD_NOT_EXIST:
            return _STRING("restore_wizard", "field_not_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.VMTOOL_NOT_INSTALLED:
            return _STRING("error", "vmtool_not_installed");
        case SYNO.SDS.ActiveBackup.ErrorTable.VDDK_PORT_UNAVAILABLE:
            return _STRING("warning", "vddk_port_unavailable");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_INVENTORY_THUMBPRINT_MISMATCH:
            return _STRING("log_msg", "vm_inventory_thumbprint_mismatch");
        case SYNO.SDS.ActiveBackup.ErrorTable.VM_REMOVE_INVENTORY_CONFLICT:
            return _STRING("error", "vm_remove_inventory_conflict");
        case SYNO.SDS.ActiveBackup.ErrorTable.SERVER_USED:
            return _STRING("error", "server_used");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_FOLDER_USED:
            return _STRING("error", "fs_folder_used");
        case SYNO.SDS.ActiveBackup.ErrorTable.TASK_NAME_USED:
            return _STRING("error", "task_name_used");
        case SYNO.SDS.ActiveBackup.ErrorTable.RESTORE_CONFLICT:
            return _STRING("log_msg", "restore_conflict");
        case SYNO.SDS.ActiveBackup.ErrorTable.TASK_BACKUP_CONFLICT:
            return _STRING("log_msg", "task_backup_conflict");
        case SYNO.SDS.ActiveBackup.ErrorTable.RESTORE_ANOTHER_EXIST:
            return _STRING("log_msg", "restore_another_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.TASK_ANOTHER_BACKUP_EXIST:
            return _STRING("log_msg", "task_another_backup_exist");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_AUTH:
            return _STRING("log_msg", "fs_auth");
        case SYNO.SDS.ActiveBackup.ErrorTable.SSL_VERIFY:
            return _STRING("error", "ssl_verify");
        case SYNO.SDS.ActiveBackup.ErrorTable.SERVER:
            return _STRING("error", "server");
        case SYNO.SDS.ActiveBackup.ErrorTable.TIME_OUT:
            return _STRING("error", "time_out");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_INTERNET:
            return _STRING("log_msg", "fs_internet");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SERVER_OFFLINE:
            return _STRING("log_msg", "fs_server_offline");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SERVER_DISABLE:
            return _STRING("log_msg", "fs_server_disable");
        case SYNO.SDS.ActiveBackup.ErrorTable.SERVER_INVALID_OPTION:
            return _STRING("error", "server_invalid_option");
        case SYNO.SDS.ActiveBackup.ErrorTable.SERVER_DENY_IP:
            return _STRING("error", "server_deny_ip");
        case SYNO.SDS.ActiveBackup.ErrorTable.CONNECTION_ABORT:
            return _STRING("error", "connection_abort");
        case SYNO.SDS.ActiveBackup.ErrorTable.NO_ROUTE_TO_HOST:
            return _STRING("error", "no_route_to_host");
        case SYNO.SDS.ActiveBackup.ErrorTable.CONNECTION_REFUSED:
            return _STRING("error", "connection_refused");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_TEST_CONNECTION_FAILED:
            return _STRING("error", "fs_test_connection_failed");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SSL_CONNECTION_REFUSED:
            return _STRING("log_msg", "fs_ssl_connection_refused");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_COULDNOT_RESOLVE_HOST:
            return _STRING("log_msg", "fs_couldnot_resolve_host");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_OPERATION_NOT_SUPPORT:
            return _STRING("log_msg", "fs_operation_not_support");
        case SYNO.SDS.ActiveBackup.ErrorTable.OPERATION_NOT_SUPPORT:
            return _STRING("error", "operation_not_support");
        case SYNO.SDS.ActiveBackup.ErrorTable.FILE_NOT_SUPPORT:
            return _STRING("error", "file_not_support");
        case SYNO.SDS.ActiveBackup.ErrorTable.FOLDER_INVALID:
            return _STRING("error", "folder_invalid");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_LOCAL_BKPFOLDER_NOT_FOUND:
            return _STRING("error", "fs_local_bkpfolder_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SHARE_UNMOUNT:
            return _STRING("log_msg", "fs_share_unmount");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SHARE_FOLDER_TYPE:
            return _STRING("log_msg", "fs_share_folder_type");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_FOLDER_NO_PERMISSION:
            return _STRING("log_msg", "fs_folder_no_permission");
        case SYNO.SDS.ActiveBackup.ErrorTable.VSS_NOT_SUPPORTED_OPERATION:
            return _STRING("error", "vss_not_supported_operation");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_LOCAL_NO_SPACE:
            return _STRING("log_msg", "fs_local_no_space");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_LOCAL_NOT_FOUND:
            return _STRING("log_msg", "fs_local_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_LOCAL_NO_PERMISSION:
            return _STRING("log_msg", "fs_local_no_permission");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SERVER_NO_SPACE:
            return _STRING("log_msg", "fs_server_no_space");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SERVER_BKPFOLDER_NOT_FOUND:
            return _STRING("log_msg", "fs_server_bkpfolder_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SERVER_NOT_FOUND:
            return _STRING("log_msg", "fs_server_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_SERVER_NO_PERMISSION:
            return _STRING("log_msg", "fs_server_no_permission");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_VSS_NOT_FOUND:
            return _STRING("log_msg", "fs_vss_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_VSS_NOT_SUPPORTED_OPERATION:
            return _STRING("log_msg", "fs_vss_not_supported_operation");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_VSS_BAD_STATE:
            return _STRING("log_msg", "fs_vss_bad_state");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_NOT_SUPPORT_ACLS:
            return _STRING("log_msg", "fs_not_support_acls");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_NOT_SUPPORT_XATTRS:
            return _STRING("log_msg", "fs_not_support_xattrs");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_RSYNC_COMMAND_NOT_FOUND:
            return _STRING("log_msg", "fs_rsync_command_not_found");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_UNABLE_CONNECT_TO_DAEMON:
            return _STRING("log_msg", "fs_unable_connect_to_daemon");
        case SYNO.SDS.ActiveBackup.ErrorTable.FS_UNKNOWN_MODULE:
            return _STRING("log_msg", "fs_unknown_module");
        case SYNO.SDS.ActiveBackup.ErrorTable.INVALID_DESTINATION_PATH:
            return _STRING("error", "invalid_destination_path");
        case SYNO.SDS.ActiveBackup.ErrorTable.DEVICE_OFFLINE:
            return _STRING("log_msg", "device_offline");
        case SYNO.SDS.ActiveBackup.ErrorTable.DOWNLOAD_INSTALLER_FAILED:
            return _STRING("error", "download_installer_failed");
        case SYNO.SDS.ActiveBackup.ErrorTable.DEVICE_IS_DELETING:
            return _STRING("error", "device_is_deleting");
        case SYNO.SDS.ActiveBackup.ErrorTable.UNKNOW:
            return _STRING("error", "unknow");
        default:
            return SYNO.API.getErrorString(a)
    }
};
Ext.ns("SYNO.SDS.ActiveBackup");
SYNO.SDS.ActiveBackup.FSErrorCode = {
    ERR_OK: 0,
    ERR_INT: -1,
    ERR_IO: -2,
    ERR_SYS: -3,
    ERR_INVALID: -4,
    ERR_SSL_VERIFY_FAIL: -11,
    ERR_AUTH: -12,
    ERR_SERVER: -13,
    ERR_TIMEOUT: -14,
    ERR_NET_UNSTABLE: -15,
    ERR_SERVER_OFFLINE: -16,
    ERR_SERVER_DISABLE: -17,
    ERR_SERVER_INVALID_OPTION: -18,
    ERR_SERVER_DENY_IP: -19,
    ERR_CONNECTION_ABORTED: -20,
    ERR_NO_ROUTE_TO_HOST: -21,
    ERR_CONNECTION_REFUSED: -22,
    ERR_TEST_CONNECTION_FAILED: -23,
    ERR_SSL_CONNECTION_REFUSED: -24,
    ERR_COULDNOT_RESOLVE_HOST_NAME: -25,
    ERR_SSH_KEY: -26,
    ERR_OPERATION_NOT_SUPPORT: -31,
    ERR_FILE_NOT_SUPPORT: -32,
    ERR_ANOTHER_RESTORE_TASK: -33,
    ERR_TASK_BACKUP_CONFLICT: -34,
    ERR_TASK_RESTORE_CONFLICT: -35,
    ERR_ANOTHER_BACKUP_TASK: -36,
    ERR_ONLY_TRANSMITTED_PART_FILES: -37,
    ERR_SET_ATTR: -38,
    ERR_FILE_NAME_TOO_LONG: -39,
    ERR_LOCAL_NO_SPACE: -41,
    ERR_LOCAL_BKPFOLDER_NOT_FOUND: -42,
    ERR_LOCAL_EXISTS: -43,
    ERR_LOCAL_FILE_NOT_FOUND: -44,
    ERR_LOCAL_NO_PERMISSION: -45,
    ERR_LOCAL_NOT_DIR: -46,
    ERR_LOCAL_IS_DIR: -47,
    ERR_LOCAL_SHARE_UNMOUNTED: -48,
    ERR_LOCAL_QUOTA_NOT_ENOUGH: -49,
    ERR_LOCAL_READONLY_FS: -50,
    ERR_SERVER_BKPFOLDER_NOT_FOUND: -61,
    ERR_SERVER_NO_SPACE: -62,
    ERR_SERVER_FILE_NOT_FOUND: -63,
    ERR_SERVER_EXISTS: -64,
    ERR_SERVER_NO_PERMISSION: -65,
    ERR_SERVER_NOT_DIR: -66,
    ERR_SERVER_IS_DIR: -67,
    ERR_SERVER_DEVICE_RESOURCE_BUSY: -68,
    ERR_VSS_NOT_FOUND: -71,
    ERR_VSS_NOT_SUPPORTED_OPERATION: -72,
    ERR_VSS_CREATE_STORAGE_FULL: -73,
    ERR_VSS_BAD_STATE: -74,
    ERR_NOT_SUPPORT_ACLS: -80,
    ERR_NOT_SUPPORT_XATTRS: -81,
    ERR_RSYNC_COMMAND_NOT_FOUND: -82,
    ERR_UNABLE_CONNECT_TO_DAEMON: -83,
    ERR_UNKNOWN_MODULE: -84,
    ERR_TASK_EXECUTION_FAILED: -91,
    ERR_READ_FILE: -100,
    ERR_WRITE_FILE: -101,
    ERR_SET_ACL: -102,
    ERR_MAX: -200
};
SYNO.SDS.ActiveBackup.GetFSErrorString = function(a) {
    if (!a) {
        return _LABS("log_msg", "fs_unknow")
    }
    switch (a) {
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_INT:
            return _LABS("log_msg", "fs_interrupt");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_IO:
            return _LABS("log_msg", "fs_inout");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SYS:
            return _LABS("log_msg", "fs_system");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_INVALID:
            return _LABS("log_msg", "fs_invalid");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SSL_VERIFY_FAIL:
            return _LABS("log_msg", "fs_ssl_verify");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_AUTH:
            return _LABS("log_msg", "fs_auth");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER:
            return _LABS("log_msg", "fs_server");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_TIMEOUT:
            return _LABS("log_msg", "fs_time_out");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_NET_UNSTABLE:
            return _LABS("log_msg", "fs_internet");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_OFFLINE:
            return _LABS("log_msg", "fs_server_offline");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_DISABLE:
            return _LABS("log_msg", "fs_server_disable");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_INVALID_OPTION:
            return _LABS("log_msg", "fs_server_invalid_option");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_DENY_IP:
            return _LABS("log_msg", "fs_server_deny_ip");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_CONNECTION_ABORTED:
            return _LABS("log_msg", "fs_connection_abort");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_NO_ROUTE_TO_HOST:
            return _LABS("log_msg", "fs_no_route_to_host");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_CONNECTION_REFUSED:
            return _LABS("log_msg", "fs_connection_refused");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_TEST_CONNECTION_FAILED:
            return _LABS("log_msg", "fs_test_connection_failed");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SSL_CONNECTION_REFUSED:
            return _LABS("log_msg", "fs_ssl_connection_refused");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_COULDNOT_RESOLVE_HOST_NAME:
            return _LABS("log_msg", "fs_couldnot_resolve_host");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SSH_KEY:
            return _LABS("log_msg", "fs_illegal_ssh_key_no_passphrase");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_OPERATION_NOT_SUPPORT:
            return _LABS("log_msg", "fs_operation_not_support");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_FILE_NOT_SUPPORT:
            return _LABS("log_msg", "fs_file_not_support");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_ANOTHER_RESTORE_TASK:
            return _LABS("log_msg", "fs_another_restore_task");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_TASK_BACKUP_CONFLICT:
            return _LABS("log_msg", "fs_run_backup_conflict");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_TASK_RESTORE_CONFLICT:
            return _LABS("log_msg", "fs_run_restore_conflict");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_ANOTHER_BACKUP_TASK:
            return _LABS("log_msg", "fs_another_backup_task");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SET_ATTR:
            return _LABS("log_msg", "fs_set_attr");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_FILE_NAME_TOO_LONG:
            return _LABS("log_msg", "fs_file_name_too_long");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_NO_SPACE:
            return _LABS("log_msg", "fs_local_no_space");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_BKPFOLDER_NOT_FOUND:
            return _LABS("log_msg", "fs_local_bkpfolder_not_found");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_EXISTS:
            return _LABS("log_msg", "fs_local_exists");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_FILE_NOT_FOUND:
            return _LABS("log_msg", "fs_local_not_found");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_NO_PERMISSION:
            return _LABS("log_msg", "fs_local_no_permission");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_NOT_DIR:
            return _LABS("log_msg", "fs_local_not_dir");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_IS_DIR:
            return _LABS("log_msg", "fs_local_is_dir");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_SHARE_UNMOUNTED:
            return _LABS("log_msg", "fs_share_unmount");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_READONLY_FS:
            return _LABS("log_msg", "reason_readonly_fs");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_BKPFOLDER_NOT_FOUND:
            return _LABS("log_msg", "fs_server_bkpfolder_not_found");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_NO_SPACE:
            return _LABS("log_msg", "fs_server_no_space");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_FILE_NOT_FOUND:
            return _LABS("log_msg", "fs_server_not_found");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_EXISTS:
            return _LABS("log_msg", "fs_server_exists");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_NO_PERMISSION:
            return _LABS("log_msg", "fs_server_no_permission");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_NOT_DIR:
            return _LABS("log_msg", "fs_server_not_dir");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_IS_DIR:
            return _LABS("log_msg", "fs_server_is_dir");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SERVER_DEVICE_RESOURCE_BUSY:
            return _LABS("log_msg", "fs_server_device_resource_busy");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_LOCAL_QUOTA_NOT_ENOUGH:
            return _LABS("log_msg", "fs_error_quota_not_enough");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_VSS_NOT_FOUND:
            return _LABS("log_msg", "fs_vss_not_found");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_VSS_NOT_SUPPORTED_OPERATION:
            return _LABS("log_msg", "fs_vss_not_supported_operation");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_VSS_CREATE_STORAGE_FULL:
            return _LABS("log_msg", "fs_vss_create_storage_full");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_VSS_BAD_STATE:
            return _LABS("log_msg", "fs_vss_bad_state");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_NOT_SUPPORT_ACLS:
            return _LABS("log_msg", "fs_not_support_acls");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_NOT_SUPPORT_XATTRS:
            return _LABS("log_msg", "fs_not_support_xattrs");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_RSYNC_COMMAND_NOT_FOUND:
            return _LABS("log_msg", "fs_rsync_command_not_found");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_UNABLE_CONNECT_TO_DAEMON:
            return _LABS("log_msg", "fs_unable_connect_to_daemon");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_UNKNOWN_MODULE:
            return _LABS("log_msg", "fs_unknown_module");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_TASK_EXECUTION_FAILED:
            return _LABS("log_msg", "fs_task_execution_failed");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_READ_FILE:
            return _LABS("log_msg", "fs_error_read_file");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_WRITE_FILE:
            return _LABS("log_msg", "fs_error_write_file");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_SET_ACL:
            return _LABS("log_msg", "fs_error_set_acl");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_MAX:
            return _LABS("log_msg", "fs_unknow");
        case SYNO.SDS.ActiveBackup.FSErrorCode.ERR_ONLY_TRANSMITTED_PART_FILES:
            return _LABS("log_msg", "fs_only_transmitted_part_files");
        default:
            return _LABS("log_msg", "fs_unknow")
    }
};
Ext.ns("SYNO.SDS.ActiveBackup");
SYNO.SDS.ActiveBackup.Utils = {
    isEmpty: function(a) {
        return !a || (Ext.isObject(a) && !Object.keys(a).length) || (Ext.isArray(a) && !a.length)
    },
    renderDate: function(b) {
        var a, c;
        if (b != parseInt(b, 10)) {
            return b
        }
        a = new Date(1000 * b);
        c = a.format("Y/m/d");
        return c
    },
    convertTimeFormat: function(a) {
        var f = parseInt(a, 10);
        if (isNaN(f) || f < 0) {
            return "--"
        }
        var e = Math.floor(f);
        var d = Math.floor(e / (60 * 60));
        e = e % (60 * 60);
        var b = Math.floor(e / 60);
        var c = e % 60;
        if (d < 10) {
            d = ("0" + d).slice(-2)
        } else {
            d = String(d)
        }
        b = ("0" + b).slice(-2);
        c = ("0" + c).slice(-2);
        return d + ":" + b + ":" + c
    },
    getConvertSize: function(b) {
        if (!b) {
            return 0
        }
        var a = parseInt(Math.floor(Math.log(b) / Math.log(1024)), 10);
        if (a === 0) {
            return (b / Math.pow(1024, a))
        }
        return parseFloat((b / Math.pow(1024, a)).toFixed(1))
    },
    getConvertSizeByUnit: function(b, c) {
        var d = ["Byte", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
        var a = d.indexOf(c);
        if (!b || a < 0) {
            return 0
        }
        if (a === 0) {
            return (b / Math.pow(1024, a))
        }
        return parseFloat((b / Math.pow(1024, a)).toFixed(1))
    },
    getUnit: function(b) {
        if (!b) {
            return "KB"
        }
        var c = ["Byte", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
        var a = parseInt(Math.floor(Math.log(b) / Math.log(1024)), 10);
        return c[a]
    },
    alignToUnit: function(d, e, a) {
        var g = ["Byte", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
        var c = g.indexOf(e);
        if (!d || c < 0) {
            return 0
        }
        var b = Math.pow(10, a);
        var f = Math.pow(1024, c);
        return Math.floor((d / f) * b) / b * f
    },
    renderTime: function(b, c) {
        var a, d;
        if (!b) {
            return "--"
        }
        if (b != parseInt(b, 10)) {
            return b
        }
        a = new Date(1000 * b);
        d = a.format("Y-m-d H:i:s");
        if (c) {
            c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d) + '"'
        }
        return d
    },
    renderDays: function(b) {
        if (!b) {
            return "--"
        }
        if (b != parseInt(b, 10)) {
            return b
        }
        b = Math.floor(b / 86400);
        if (b < 1) {
            return _LABS("component", "within_a_day")
        }
        var a = String.format(_LABS("component", "n_days_ago"), b);
        return a
    },
    renderTimeInterval: function(f, d) {
        var c = [24 * 60 * 60, 30 * 24 * 60 * 60];
        var a = [Date.DAY, Date.MONTH];
        var b = [_LABS("common", "days"), _LABS("common", "months")];
        for (var e = 0; e < c.length; ++e) {
            if (c[e] > f) {
                e = Math.max(0, e - 1);
                break
            }
            if (a[e] === d) {
                break
            }
        }
        e = Math.min(e, c.length - 1);
        return String.format(b[e], Math.floor(f / c[e]))
    },
    getAgentVersion: function(b) {
        function a(d, e, c) {
            var f = d;
            while (f.length < c) {
                f = e + f
            }
            return f
        }
        return String.format("{0}.{1}.{2}-{3}", b.agent_version_major, b.agent_version_minor, b.agent_version_mini, a(b.agent_version_build, "0", 4))
    },
    getAgentUpdateDescription: function(b) {
        var a = "";
        switch (b.agent_update_status) {
            case SYNO.SDS.ActiveBackup.AgentUpdateStatus.WAITING:
                a = _LABS("agentbk", "update_waiting");
                break;
            case SYNO.SDS.ActiveBackup.AgentUpdateStatus.DOWNLOADING:
                a = _LABS("agentbk", "update_downloading");
                break;
            case SYNO.SDS.ActiveBackup.AgentUpdateStatus.UPDATING:
                a = _LABS("agentbk", "update_updating");
                break;
            default:
                if (b.agent_can_update) {
                    a = _LABS("agentbk", "need_update")
                }
        }
        return a
    },
    renderTargetPath: function(a) {
        switch (a.backup_type) {
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                return (a.target_dir) ? String.format("/{0}/{1}", a.share_name, a.target_dir) : String.format("/{0}", a.share_name);
            default:
                return String.format("/{0}/{1}/{2}", a.share_name, SYNO.ActiveBackup.FuseRepo, a.target_dir)
        }
    },
    renderDuration: function(a) {
        return (a.time_start === 0) ? "--" : SYNO.SDS.ActiveBackup.Utils.convertTimeFormat(a.elapsed_time || a.time_end - a.time_start)
    },
    renderJobAction: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.JobAction.NONE:
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                return _LABS("job_action", "backup");
            case SYNO.SDS.ActiveBackup.JobAction.VERIFY:
                return _LABS("job_action", "verify");
            case SYNO.SDS.ActiveBackup.JobAction.MIGRATE_DEVICE:
                return _LABS("job_action", "migrate");
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE:
                return _LABS("job_action", "restore");
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
                return _LABS("job_action", "restore");
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_PHYSICAL:
                return _LABS("job_action", "restore");
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION:
                return _LABS("job_action", "delete_version");
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET:
                return _LABS("job_action", "delete_target");
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_INVENTORY:
                return _LABS("job_action", "delete_inventory");
            case SYNO.SDS.ActiveBackup.JobAction.RELINK:
                return _LABS("action", "relink")
        }
    },
    renderJobStatus: function(d, e, c) {
        var b;
        switch (d) {
            case SYNO.ActiveBackup.BackupType.PC:
            case SYNO.ActiveBackup.BackupType.SERVER:
                b = SYNO.SDS.ActiveBackup.Utils.renderJobStatusPC(e);
                break;
            case SYNO.ActiveBackup.BackupType.VM:
                b = SYNO.SDS.ActiveBackup.Utils.renderJobStatusVM(e);
                break;
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                b = SYNO.SDS.ActiveBackup.Utils.renderJobStatusAgentless(e);
                break
        }
        if (c) {
            var f = '<span class="progress-bg"><span class="progress-fg" style="width:{0}%"></span></span><span class="progress-value">{1}</span>';
            var a = (e.percentage * 100).toFixed(2);
            b = String.format(f, a, b)
        }
        return b
    },
    renderSourceType: function(a) {
        if (a == SYNO.ActiveBackup.SourceType.BARE_METAL) {
            return _LABS("agentbk", "source_bare_metal")
        } else {
            if (a == SYNO.ActiveBackup.SourceType.SYSVOL) {
                return _LABS("agentbk", "source_sysvol")
            } else {
                if (a == SYNO.ActiveBackup.SourceType.CUSVOL) {
                    return _LABS("agentbk", "source_cusvol")
                } else {
                    return ""
                }
            }
        }
    },
    renderBackupPolicy: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.INCREMENTAL:
                return _LABS("backup_policy", "incremental");
            case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.MIRROR:
                return _LABS("backup_policy", "mirror");
            case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION:
                return _LABS("backup_policy", "version");
            default:
                return "--"
        }
    },
    getTypeStr: function(a) {
        switch (a) {
            case SYNO.ActiveBackup.BackupType.VM:
                return "VM";
            case SYNO.ActiveBackup.BackupType.PC:
                return "PC";
            case SYNO.ActiveBackup.BackupType.SERVER:
                return "Server";
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                return "Agentless"
        }
    },
    getWeekdayStr: function(e) {
        var d = "";
        if (e.length == 7) {
            d = _LABS("schedule", "daily")
        } else {
            if (e.length == 2 && (e[0] === 0) && (e[1] == 6)) {
                d = _LABS("schedule", "weekend")
            } else {
                if (e.length == 5 && (e[0] == 1) && (e[1] == 2) && (e[2] == 3) && (e[3] == 4) && (e[4] == 5)) {
                    d = _LABS("schedule", "weekday")
                } else {
                    var a = [];
                    for (var c = 0; c < e.length; c++) {
                        var b = e[c];
                        a.push(SYNO.SDS.ActiveBackup.WeekdayData[b][1])
                    }
                    d = a.join(", ")
                }
            }
        }
        return d
    },
    renderJobStatusAgentless: function(b) {
        var a = (b.percentage * 100).toFixed(0) + "%";
        switch (b.action) {
            case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "backup_waiting");
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "backup_stopping");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                    case SYNO.SDS.ActiveBackup.JobStatus.DELEGATE:
                        return _LABS("task_status", "backingup") + (b.current_path ? (" " + b.current_path.substr(b.current_path.lastIndexOf("/") + 1)) : "")
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "restore_waiting");
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "restore_stopping");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                    case SYNO.SDS.ActiveBackup.JobStatus.DELEGATE:
                        return _LABS("task_status", "restoring") + (b.current_path ? (" " + b.current_path.substr(b.current_path.lastIndexOf("/") + 1)) : "")
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "deleting_version") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "deleting_target") + " " + a
                }
                return "--"
        }
    },
    _getPCBackupStatusString: function(c, a) {
        var d;
        var b = false;
        switch (c.running_task_status) {
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.WAITING:
                switch (c.running_task_detail_status) {
                    case SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus.WAITING_TASK:
                        d = _LABS("task_status", "backup_waiting_task");
                        break;
                    case SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus.WAITING_STORAGE:
                        d = _LABS("task_status", "backup_waiting_storage");
                        break;
                    case SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus.WAITING_DEVICE:
                        d = _LABS("common", "waiting_device");
                        break;
                    default:
                        d = _LABS("task_status", "backingup")
                }
                break;
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.RUNNING:
                if (c.time_start === 0) {
                    d = _LABS("common", "backup_preparing")
                } else {
                    d = _LABS("task_status", "backingup");
                    b = true
                }
                break;
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.PAUSING:
                d = _LABS("common", "waiting_connection");
                b = true;
                break;
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.CANCELING:
                d = _LABS("task_status", "backup_stopping");
                break;
            default:
                d = _LABS("task_status", "backingup")
        }
        if (b) {
            d += " " + a
        }
        return d
    },
    _getPCFileRestoreStatusString: function(c, a) {
        var d;
        var b = false;
        switch (c.running_task_status) {
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.WAITING:
                switch (c.running_task_detail_status) {
                    case SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus.WAITING_DEVICE:
                        d = _LABS("common", "waiting_device");
                        break;
                    case SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus.WAITING_PREPARING:
                        d = _LABS("task_status", "restore_preparing");
                        break;
                    default:
                        d = _LABS("task_status", "restore_waiting")
                }
                break;
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.RUNNING:
                d = _LABS("task_status", "restoring");
                b = true;
                break;
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.PAUSING:
                d = _LABS("common", "waiting_connection");
                b = true;
                break;
            case SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.CANCELING:
                d = _LABS("task_status", "canceled");
                break;
            default:
                d = _LABS("task_status", "restoring")
        }
        if (b) {
            d += " " + a
        }
        return d
    },
    renderJobStatusPC: function(b) {
        var a = (b.percentage * 100).toFixed(0) + "%";
        switch (b.action) {
            case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                return this._getPCBackupStatusString(b, a);
            case SYNO.SDS.ActiveBackup.JobAction.VERIFY:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "verify_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "verify_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "verifying") + " " + a;
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "verify_stopping")
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE:
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_PHYSICAL:
                return this._getPCFileRestoreStatusString(b, a);
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "deleting_version") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "deleting_target") + " " + a
                }
                return "--"
        }
        return "--"
    },
    renderJobStatusVM: function(b) {
        var a = (b.percentage ? b.percentage * 100 : 0).toFixed(0) + "%";
        switch (b.action) {
            case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "backup_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "backup_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "backup_stopping");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "backingup") + " " + a;
                    case SYNO.SDS.ActiveBackup.JobStatus.DELEGATE:
                        return _LABS("task_status", "backingup") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.VERIFY:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "verify_stopping");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "verifying") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE:
            case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "restore_stopping");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        if (b.percentage < 1 || SYNO.SDS.ActiveBackup.RestoreType.INSTANT !== b.restore_type) {
                            return _LABS("task_status", "restoring") + " " + a
                        }
                        if (b.migrate_result === SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS) {
                            return _LABS("task_status", "instant_did_migrate_partial_success")
                        } else {
                            if (b.migrate_result === SYNO.SDS.ActiveBackup.ResultStatus.CANCEL) {
                                return _LABS("task_status", "instant_did_migrate_cancel")
                            } else {
                                if (b.migrate_result === SYNO.SDS.ActiveBackup.ResultStatus.FAILURE) {
                                    return _LABS("task_status", "instant_did_migrate_failure")
                                } else {
                                    if (b.migratable) {
                                        if (b.restore_result === SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS) {
                                            return _LABS("task_status", "instant_restore_success")
                                        } else {
                                            return _LABS("task_status", "instant_restore_partial_success")
                                        }
                                    } else {
                                        if (b.restore_result === SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS) {
                                            return _LABS("task_status", "not_migratable_instant_restore_success")
                                        } else {
                                            return _LABS("task_status", "not_migratable_instant_restore_partial_success")
                                        }
                                    }
                                }
                            }
                        }
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.MIGRATE_DEVICE:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.STOPPING:
                        return _LABS("task_status", "migrate_stopping");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "migrating") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "deleting_version") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("task_status", "deleting_target") + " " + a
                }
                return "--";
            case SYNO.SDS.ActiveBackup.JobAction.DELETE_INVENTORY:
                switch (b.status) {
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK:
                        return _LABS("task_status", "delete_waiting_task");
                    case SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE:
                        return _LABS("task_status", "delete_waiting_storage");
                    case SYNO.SDS.ActiveBackup.JobStatus.RUNNING:
                        return _LABS("common", "server_deleting") + " " + a
                }
                return "--"
        }
    },
    renderResultStatus: function(a) {
        var b = SYNO.SDS.ActiveBackup.Utils.getResultStatusColor(a);
        var c = SYNO.SDS.ActiveBackup.Utils.getResultStatusString(a);
        return String.format('<font color="{0}">{1}</font>', b, c)
    },
    renderVersionStatus: function(a) {
        var b = SYNO.SDS.ActiveBackup.Utils.getVersionStatusColor(a.get("status"));
        var c = SYNO.SDS.ActiveBackup.Utils.getVersionStatusString(a);
        return String.format('<font color="{0}">{1}</font>', b, c)
    },
    renderDeviceStatus: function(a) {
        var b = SYNO.SDS.ActiveBackup.Utils.getDeviceStatusColor(a);
        var c = SYNO.SDS.ActiveBackup.Utils.getDeviceStatusString(a);
        return String.format('<font color="{0}">{1}</font>', b, c)
    },
    renderDedupRate: function(a, b) {
        if (b <= 0 || a <= 0) {
            return "--"
        }
        return (a / b).toFixed(2) + "x"
    },
    renderSize: function(a) {
        return SYNO.SDS.ActiveBackup.Utils.getConvertSize(a) + " " + SYNO.SDS.ActiveBackup.Utils.getUnit(a)
    },
    renderSizeFromUnit: function(b, c) {
        var a = c;
        switch (b) {
            case "PB":
                a /= 1024 * 1024 * 1024 * 1024 * 1024;
                return a.toPrecision(3);
            case "TB":
                a /= 1024 * 1024 * 1024 * 1024;
                return a.toPrecision(3);
            case "GB":
                a /= 1024 * 1024 * 1024;
                return a.toPrecision(3);
            case "MB":
                a /= 1024 * 1024;
                return a.toPrecision(3);
            case "KB":
                a /= 1024;
                return a.toPrecision(3);
            case "B":
                return a
        }
    },
    renderTaskLastResult: function(b, d) {
        d = d || "{0} {1}";
        if (b) {
            var a = SYNO.SDS.ActiveBackup.Utils.renderResultStatus(b.status);
            var c = SYNO.SDS.ActiveBackup.Utils.renderTime(b.time_end);
            return String.format(d, a, c)
        } else {
            return _LABS("component", "task_not_backup")
        }
    },
    getResultStatusString: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.ResultStatus.NONE:
                return _LABS("task_status", "ready");
            case SYNO.SDS.ActiveBackup.ResultStatus.INCOMPLETE:
                return _LABS("task_status", "backingup");
            case SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS:
                return _LABS("task_status", "success");
            case SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS:
                return _LABS("task_status", "partial_success");
            case SYNO.SDS.ActiveBackup.ResultStatus.CANCEL:
                return _LABS("task_status", "canceled");
            case SYNO.SDS.ActiveBackup.ResultStatus.FAILURE:
                return _LABS("task_status", "error")
        }
    },
    getResultStatusColor: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.ResultStatus.NONE:
                return "seagreen";
            case SYNO.SDS.ActiveBackup.ResultStatus.INCOMPLETE:
                return "#0F93F1";
            case SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS:
                return "green";
            case SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS:
                return "orange";
            case SYNO.SDS.ActiveBackup.ResultStatus.CANCEL:
                return "#FF6347";
            case SYNO.SDS.ActiveBackup.ResultStatus.FAILURE:
                return "red"
        }
    },
    getVersionStatusString: function(a) {
        var b = a.get("status");
        switch (b) {
            case SYNO.SDS.ActiveBackup.VersionStatus.BACKING_UP:
                if (a.get("time_start") === 0) {
                    return _LABS("common", "backup_preparing")
                }
                return _LABS("version_status", "backing_up");
            case SYNO.SDS.ActiveBackup.VersionStatus.WAITING_CONNECTION:
                return _LABS("common", "waiting_connection");
            case SYNO.SDS.ActiveBackup.VersionStatus.DELETING:
                return _LABS("version_status", "deleting");
            case SYNO.SDS.ActiveBackup.VersionStatus.PAUSED:
                return _LABS("version_status", "paused");
            case SYNO.SDS.ActiveBackup.VersionStatus.COMPLETED:
                return _LABS("version_status", "completed");
            case SYNO.SDS.ActiveBackup.VersionStatus.PARTIAL:
                return _LABS("version_status", "partial");
            case SYNO.SDS.ActiveBackup.VersionStatus.FAILED:
                return _LABS("version_status", "failed");
            case SYNO.SDS.ActiveBackup.VersionStatus.CANCELED:
                return _LABS("version_status", "canceled");
            case SYNO.SDS.ActiveBackup.VersionStatus.DELETE_FAILED:
                return _LABS("version_status", "deletion_fail");
            case SYNO.SDS.ActiveBackup.VersionStatus.CLONING:
                return _LABS("version_status", "cloning");
            default:
                return "none"
        }
    },
    getVersionStatusColor: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.VersionStatus.BACKING_UP:
                return "blue";
            case SYNO.SDS.ActiveBackup.VersionStatus.WAITING_CONNECTION:
                return "gray";
            case SYNO.SDS.ActiveBackup.VersionStatus.DELETING:
                return "blue";
            case SYNO.SDS.ActiveBackup.VersionStatus.PAUSED:
                return "orange";
            case SYNO.SDS.ActiveBackup.VersionStatus.COMPLETED:
                return "green";
            case SYNO.SDS.ActiveBackup.VersionStatus.PARTIAL:
                return "orange";
            case SYNO.SDS.ActiveBackup.VersionStatus.FAILED:
            case SYNO.SDS.ActiveBackup.VersionStatus.DELETE_FAILED:
                return "red";
            case SYNO.SDS.ActiveBackup.VersionStatus.CANCELED:
                return "#FF6347";
            case SYNO.SDS.ActiveBackup.VersionStatus.CLONING:
                return "blue";
            default:
                return "blue"
        }
    },
    getDeviceStatusString: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.DeviceStatus.BACKING_UP:
                return _LABS("version_status", "backing_up");
            case SYNO.SDS.ActiveBackup.DeviceStatus.WAITING_CONNECTION:
                return _LABS("common", "waiting_connection");
            case SYNO.SDS.ActiveBackup.DeviceStatus.DELETING:
                return _LABS("version_status", "deleting");
            case SYNO.SDS.ActiveBackup.DeviceStatus.PAUSED:
                return _LABS("version_status", "paused");
            case SYNO.SDS.ActiveBackup.DeviceStatus.COMPLETED:
                return _LABS("version_status", "completed");
            case SYNO.SDS.ActiveBackup.DeviceStatus.PARTIAL:
                return _LABS("version_status", "partial");
            case SYNO.SDS.ActiveBackup.DeviceStatus.FAILED:
                return _LABS("version_status", "failed");
            case SYNO.SDS.ActiveBackup.DeviceStatus.DELETE_FAILED:
                return _LABS("version_status", "deletion_fail");
            default:
                return "none"
        }
    },
    getDeviceStatusColor: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.DeviceStatus.BACKING_UP:
                return "blue";
            case SYNO.SDS.ActiveBackup.DeviceStatus.WAITING_CONNECTION:
                return "gray";
            case SYNO.SDS.ActiveBackup.DeviceStatus.DELETING:
                return "blue";
            case SYNO.SDS.ActiveBackup.DeviceStatus.PAUSED:
                return "orange";
            case SYNO.SDS.ActiveBackup.DeviceStatus.COMPLETED:
                return "green";
            case SYNO.SDS.ActiveBackup.DeviceStatus.PARTIAL:
                return "orange";
            case SYNO.SDS.ActiveBackup.DeviceStatus.FAILED:
            case SYNO.SDS.ActiveBackup.DeviceStatus.DELETE_FAILED:
                return "red";
            default:
                return "blue"
        }
    },
    getRestoreTypeString: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.RestoreType.INSTANT:
                return _LABS("restore_type", "instant_restore");
            case SYNO.SDS.ActiveBackup.RestoreType.FULL:
                return _LABS("restore_type", "full_restore");
            case SYNO.SDS.ActiveBackup.RestoreType.FILE:
                return _LABS("restore_type", "file_restore");
            case SYNO.SDS.ActiveBackup.RestoreType.SYSTEM:
                return _LABS("restore_type", "system_restore");
            case SYNO.SDS.ActiveBackup.RestoreType.CUSTOM:
                return _LABS("restore_type", "custom_restore");
            default:
                return "--"
        }
    },
    getRecoverMediaGuideLink: function() {
        var a = "https://global.download.synology.com/download/Document/UserGuide/Packages/ActiveBackup/";
        switch (_S("lang")) {
            case "cht":
                return a + "ABB_Recovery_Media_Creation_Guide_cht.pdf";
            case "enu":
                return a + "ABB_Recovery_Media_Creation_Guide_enu.pdf";
            case "chs":
                return a + "ABB_Recovery_Media_Creation_Guide_chs.pdf";
            case "csy":
                return a + "ABB_Recovery_Media_Creation_Guide_csy.pdf";
            case "fre":
                return a + "ABB_Recovery_Media_Creation_Guide_fre.pdf";
            case "ger":
                return a + "ABB_Recovery_Media_Creation_Guide_ger.pdf";
            case "ita":
                return a + "ABB_Recovery_Media_Creation_Guide_ita.pdf";
            case "jpn":
                return a + "ABB_Recovery_Media_Creation_Guide_jpn.pdf";
            case "krn":
                return a + "ABB_Recovery_Media_Creation_Guide_krn.pdf";
            case "nld":
                return a + "ABB_Recovery_Media_Creation_Guide_nld.pdf";
            case "plk":
                return a + "ABB_Recovery_Media_Creation_Guide_plk.pdf";
            case "rus":
                return a + "ABB_Recovery_Media_Creation_Guide_rus.pdf";
            case "spn":
                return a + "ABB_Recovery_Media_Creation_Guide_spn.pdf";
            default:
                return a + "ABB_Recovery_Media_Creation_Guide_enu.pdf"
        }
    },
    getChartConfig: function(b) {
        var a = {
            color: "#3397BB",
            display_short_text: _LABS("common", "device_pcs"),
            display_text: _LABS("common", "device_personal_computer"),
            label: "PC",
            backup_type: SYNO.ActiveBackup.BackupType.PC
        };
        var e = {
            color: "#F2AF2A",
            display_short_text: _LABS("common", "device_servers"),
            display_text: _LABS("common", "device_physical_server"),
            label: "Physical Server",
            backup_type: SYNO.ActiveBackup.BackupType.SERVER
        };
        var c = {
            color: "#7ED321",
            display_short_text: _LABS("common", "device_fs"),
            display_text: _LABS("common", "device_file_server"),
            label: "File Server",
            backup_type: SYNO.ActiveBackup.BackupType.AGENTLESS
        };
        var d = {
            color: "#3FCEE6",
            display_short_text: _LABS("common", "device_vms"),
            display_text: _LABS("common", "device_virtual_machine"),
            label: "VM",
            backup_type: SYNO.ActiveBackup.BackupType.VM
        };
        switch (b) {
            case SYNO.ActiveBackup.BackupType.PC:
                return a;
            case SYNO.ActiveBackup.BackupType.SERVER:
                return e;
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                return c;
            case SYNO.ActiveBackup.BackupType.VM:
                return d;
            default:
                return [a, e, c, d]
        }
    },
    getLogString: function(a, e) {
        var c = new Ext.Template(SYNO.SDS.ActiveBackup.getLogTemplateString(a));
        var b = {};
        Ext.each(Object.keys(e), function(h) {
            if ("device_name" === h) {
                b[h] = Ext.util.Format.htmlEncode(e[h])
            } else {
                b[h] = e[h]
            }
        });
        var g = this._getHandleParams(b);
        var d = c.apply(g);
        var f;
        if (e.hasOwnProperty("fs_error")) {
            switch (a) {
                case 6002:
                case 6006:
                case 1104:
                case 1204:
                    f = SYNO.SDS.ActiveBackup.GetFSErrorString(e.fs_error);
                    break;
                default:
                    f = ""
            }
        } else {
            f = this._getErrorString(0)
        }
        if (f !== "") {
            d = d + "(" + f + ")"
        }
        if (a == 7012) {
            if (e.hasOwnProperty("cbt")) {
                d += " [CBT]"
            }
        }
        return d
    },
    _getErrorString: function(a) {
        return ""
    },
    _getHandleParams: function(e) {
        var f = {};
        for (var b in e) {
            if (e.hasOwnProperty(b)) {
                var c = b;
                var d = "";
                switch (b) {
                    case "task_id":
                        c = "task";
                        d = "<span class=task task_id=" + e.task_id + " backup_type=" + e.backup_type + ">" + Ext.util.Format.htmlEncode(e.task_name) + "</span>";
                        break;
                    case "backup_type_str":
                        d = SYNO.SDS.ActiveBackup.GetBackupTypeString(e.backup_type);
                        break;
                    case "device_id":
                        c = "device";
                        d = "<span class=device device_id=" + e.device_id + " backup_type=" + e.backup_type + ">" + e.device_name + "</span>";
                        break;
                    case "user_id":
                        c = "user";
                        d = "<span class=user user_id=" + e.user_id + ">" + e.user_name + "</span>";
                        break;
                    case "old_name":
                        d = "<span class=old_name>" + e[b] + "</span>";
                        break;
                    case "task_template":
                        d = "<span class=task_template>" + e[b] + "</span>";
                        break;
                    case "storage":
                        d = "<span class=storage>" + e[b] + "</span>";
                        break;
                    case "share":
                        d = "<span class=share>" + e[b] + "</span>";
                        break;
                    case "path":
                        d = "<span class=path>" + Ext.util.Format.htmlEncode(e[b]) + "</span>";
                        break;
                    case "script_result_path":
                        var g = e[b].split("/");
                        var a = "/" + g.splice(2, g.length - 3).join("/");
                        d = "<span class=script_result_path script_result_path=" + a + ">(" + _LABS("advansetting", "detail") + ")</span>";
                        break;
                    case "exit_code":
                        d = "<span class=exit_code>" + e[b] + "</span>";
                        break;
                    default:
                        d = e[b]
                }
                f[c] = d
            }
        }
        return f
    },
    LaunchEmailServiceSetting: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", {
            fn: "SYNO.SDS.AdminCenter.Notification.Main"
        })
    },
    generateArray: function(a, b) {
        return Array.apply(null, {
            length: a
        }).map(b)
    },
    deepMerge: function(c, b) {
        if (Ext.isString(c) && Ext.isString(b)) {
            return (c === b ? c : "")
        }
        if (Ext.isNumber(c) && Ext.isNumber(b)) {
            return (c === b ? c : 0)
        }
        if (Ext.isBoolean(c) && Ext.isBoolean(b)) {
            return (c === b ? c : false)
        }
        if (Ext.isArray(c) && Ext.isArray(b)) {
            var d = [];
            Ext.each(c, function(e) {
                if (b.indexOf(e) >= 0) {
                    d.push(e)
                }
            });
            return d
        }
        if (Ext.isObject(c) && Ext.isObject(b)) {
            var a = {};
            Ext.each(Object.keys(c), function(e) {
                if (b.hasOwnProperty(e)) {
                    a[e] = SYNO.SDS.ActiveBackup.Utils.deepMerge(c[e], b[e])
                }
            });
            return a
        }
        return null
    },
    htmlEncodeTip: function(a) {
        var c = Ext.util.Format.htmlEncode(a);
        var b = Ext.util.Format.htmlEncode(c);
        return b
    },
    isVmMigratable: function(a) {
        return a.vcenter && a.vmotion
    }
};
SYNO.SDS.ActiveBackup.Config = {
    DEFAULT_COLOR: "#dcdee0",
    COLORS: [
        ["#FFC80F"],
        ["#A9DF64"],
        ["#8DD1ED"],
        ["#5691C8"],
        ["#9EA198"],
        ["#2FAF68"],
        ["#415BA4"],
        ["#EF6769"],
        ["#4BC2C6"],
        ["#8093CA"],
        ["#FCAF5D"],
        ["#D3CC74"],
        ["#FFEE6E"],
        ["#AED0E9"],
        ["#93AC45"],
        ["#1B86A6"],
        ["#790035"],
        ["#E33E20"],
        ["#CBD4CF"],
        ["#985394"]
    ]
};
Ext.namespace("SYNO.ActiveBackup.Util");
Ext.apply(SYNO.ActiveBackup.Util, {
    parseError: function(b) {
        var e = SYNO.SDS.ActiveBackup.getErrorString(b.code);
        var a = new Ext.XTemplate(e);
        var c = {};
        var f = b.errors.params ? JSON.parse(JSON.stringify(b.errors.params)) : {};
        Ext.each(b.errors.batch_errors, function(g) {
            var h = SYNO.SDS.ActiveBackup.getErrorString(g.code);
            var j = new Ext.XTemplate(h);
            var i = g.errors.params || {};
            Object.keys(i).map(function(l, k) {
                i[l] = Ext.util.Format.htmlEncode(i[l])
            });
            c[j.apply(i)] = true
        });
        Object.keys(f).map(function(h, g) {
            f[h] = Ext.util.Format.htmlEncode(f[h])
        });
        var d = [a.apply(f)].concat(Object.keys(c));
        return d.join("<br/>")
    },
    reportError: function(b, d, h, c) {
        b = Ext.apply({
            code: SYNO.SDS.ActiveBackup.ErrorTable.INTERNAL_ERROR,
            errors: {
                params: {},
                batch_errors: []
            }
        }, b);
        if (b.has_fail) {
            b.code = SYNO.SDS.ActiveBackup.ErrorTable.BATCH_ERROR;
            b.errors = {
                params: {},
                batch_errors: []
            };
            Ext.each(b.result, function(i) {
                if (i.error) {
                    b.errors.batch_errors.push(Ext.apply({
                        code: SYNO.SDS.ActiveBackup.ErrorTable.INTERNAL_ERROR,
                        errors: {
                            params: {}
                        }
                    }, i.error))
                }
            })
        }
        if (Ext.isArray(b.errors.batch_errors) && b.errors.batch_errors.length === 1) {
            b = b.errors.batch_errors[0]
        }
        var g = SYNO.ActiveBackup.Util.parseError(b),
            e = this,
            a = this;
        d = d || "alert";
        if (this instanceof Ext.Window) {
            e = this;
            a = this
        } else {
            if (this instanceof Ext.Panel) {
                e = this.findWindow() || this.owner;
                a = this
            } else {
                e = this.appWin;
                a = this.owner
            }
        }
        var f = {
            mask: function() {
                if (Ext.isFunction(a.mask)) {
                    a.mask(g)
                } else {
                    if (Ext.isFunction(a.getEl().mask)) {
                        a.getEl().mask(g)
                    }
                }
            },
            alert: function() {
                e.getMsgBox().alert("", g, h, c)
            }
        };
        f[d].call(this)
    }
});
Ext.namespace("SYNO.ActiveBackup");
Ext.apply(SYNO.ActiveBackup, {
    FuseRepo: "ActiveBackupData",
    SourceType: {
        NONE: 0,
        BARE_METAL: 1,
        SYSVOL: 2,
        CUSVOL: 3
    },
    TemplateBackupType: {
        PC: 2,
        SERVER: 3
    },
    BackupType: {
        ALL: -1,
        NONE: 0,
        VM: 1,
        PC: 2,
        SERVER: 3,
        AGENTLESS: 4
    },
    TimePeriod: {
        NONE: 0,
        DAY: 1,
        HOUR: 2
    },
    LogLevel: {
        ALL: -1,
        ERROR: 0,
        WARNING: 1,
        INFO: 2,
        DEBUG: 3
    },
    HostType: {
        NONE: 0,
        ESXi: 1,
        vCenter: 2,
        HyperV: 3,
        SystemCenter: 4
    },
    ProtocolType: {
        ALL: 0,
        SMB: 1,
        RSYNC: 2
    },
    RetentionType: {
        KEEP_ALL: 1,
        APPLY_POLICY: 2
    },
    ShareType: {
        BTRFS: "BTRFS",
        EXT4: "EXT4",
        PETASPACE: "PETASPACE"
    }
});
Ext.namespace("SYNO.SDS.ActiveBackup");
_LABS = function(b, a) {
    return _TT("SYNO.ActiveBackup.AppInstance", b, a) || _T(b, a)
};
Ext.namespace("SYNO.ActiveBackup");
Ext.namespace("SYNO.ActiveBackup.Util");
(function(a) {
    function b(c) {
        return c.replace(/[A-Za-z0-9]/g, function(d) {
            return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt("NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm5678901234".indexOf(d))
        })
    }
    a.Rot13 = {
        encode: b
    }
})(SYNO.ActiveBackup.Util);
Ext.define("SYNO.SDS.ActiveBackup.GridStatePlugin", {
    init: function(c) {
        var d = c.getStateId();
        var b = c.findAppWindow();
        if (d && b && b.appInstance) {
            var a = b.appInstance.getUserSettings(d);
            if (a) {
                Ext.state.Manager.set(d, a)
            }
            c.on("beforestaterestore", function(e, f) {
                if (f.columns.length !== e.getState().columns.length) {
                    return false
                }
            });
            c.on("beforestatesave", function(e, f) {
                b.appInstance.setUserSettings(d, f)
            })
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackup.StateGridPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(b) {
        var a = {
            stateId: this.self.displayName,
            plugins: [],
            stateEvents: ["sortchange", "groupchange"]
        };
        if (b.enableColumnResize !== false) {
            a.stateEvents.push("columnresize")
        }
        if (b.enableColumnMove !== false) {
            a.stateEvents.push("columnmove")
        }
        var c = Ext.apply(a, b);
        c.plugins.push(new SYNO.SDS.ActiveBackup.GridStatePlugin());
        this.callParent([c])
    }
});
Ext.define("SYNO.ActiveBackup.HistogramDateInfo", {
    _selectedDay: null,
    _selectedHour: null,
    timePeriod: null,
    duration: null,
    constructor: function() {
        this._selectedDay = new Date();
        this._selectedHour = new Date();
        this.timePeriod = SYNO.ActiveBackup.TimePeriod.DAY;
        this.duration = 9
    },
    clone: function() {
        var a = new SYNO.ActiveBackup.HistogramDateInfo();
        Ext.apply(a, this);
        return a
    },
    reset: function() {
        this._selectedDay = new Date();
        this._selectedHour = new Date()
    },
    move: function(a) {
        if (SYNO.ActiveBackup.TimePeriod.DAY === this.timePeriod) {
            this._selectedDay = this._selectedDay.add(Date.DAY, a)
        } else {
            if (SYNO.ActiveBackup.TimePeriod.HOUR === this.timePeriod) {
                this._selectedHour = this._selectedHour.add(Date.HOUR, a)
            } else {}
        }
    },
    getStartDate: function() {
        var a;
        if (SYNO.ActiveBackup.TimePeriod.DAY === this.timePeriod) {
            a = new Date(this._selectedDay);
            a.setHours(0);
            a.setMinutes(0);
            a.setSeconds(0);
            a.setMilliseconds(0);
            a = a.add(Date.DAY, (this.duration - 1) * -1);
            return a
        } else {
            if (SYNO.ActiveBackup.TimePeriod.HOUR === this.timePeriod) {
                a = new Date(this._selectedHour);
                a.setMinutes(0);
                a.setSeconds(0);
                a.setMilliseconds(0);
                a = a.add(Date.HOUR, (this.duration - 1) * -1);
                return a
            } else {
                SYNO.Debug.error("Unknow time Period setting.");
                return new Date(0)
            }
        }
    },
    getEndDate: function() {
        var a;
        if (SYNO.ActiveBackup.TimePeriod.DAY === this.timePeriod) {
            a = new Date(this._selectedDay);
            a.setHours(23);
            a.setMinutes(59);
            a.setSeconds(59);
            a.setMilliseconds(999);
            return a
        } else {
            if (SYNO.ActiveBackup.TimePeriod.HOUR === this.timePeriod) {
                a = new Date(this._selectedHour);
                a.setMinutes(59);
                a.setSeconds(59);
                a.setMilliseconds(999);
                return a
            } else {
                SYNO.Debug.error("Unknow time Period setting.");
                return new Date(0)
            }
        }
    }
});
Ext.define("SYNO.ActiveBackup.HistogramFormat", {
    singleton: true,
    formatter: {
        1: SYNO.SDS.DataDrivenDocuments.DrawHelper.time.format("%m/%d"),
        2: SYNO.SDS.DataDrivenDocuments.DrawHelper.time.format("%m/%d %H:%M")
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.ContainerPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var d = a.title;
        var b = [];
        if (a.jump) {
            d += String.format('<div id="{0}" class="jump_btn"></div>', this.jump_btn_id = Ext.id())
        }
        if (a.content) {
            b.push(a.content)
        }
        this.header_bar = new SYNO.ux.Panel({
            html: d,
            region: "north",
            cls: "overview_header",
            height: 36
        });
        var c = {
            itemId: "card_panel_wrapper",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "syno_panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, {
                    xtype: "syno_panel",
                    border: false,
                    region: "center",
                    layout: "fit",
                    items: b
                }]
            }],
            listeners: {
                afterlayout: {
                    fn: function(e, g, f) {
                        if (this.jump_btn_id) {
                            Ext.get(this.jump_btn_id).addListener("click", a.jump)
                        }
                    },
                    scope: this,
                    single: true
                }
            }
        };
        return this.callParent([Ext.apply(c, a)])
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.Chart", {
    extend: "Ext.BoxComponent",
    constructor: function(b) {
        var a = {};
        this.unit = "KB";
        this.isRendering = false;
        this.needRedraw = false;
        this.chart = null;
        this.yAxisPrecision = 1;
        this.numTicks = 6;
        this.moveButtonWidth = 26;
        this.callParent([Ext.apply(a, b)])
    },
    getUnit: function() {
        return this.unit
    },
    getChartHeight: function(b) {
        b = b || this.getEl().getHeight() || 280;
        var a = b - (20 + 12 + 5);
        return a
    },
    onResize: function(d, b, a, c) {
        this.callParent(arguments);
        this.chart.resize({
            width: a,
            height: this.getChartHeight(c)
        });
        this.redraw()
    },
    _draw: Ext.emptyFn,
    moveByAction: Ext.emptyFn,
    reload: function() {
        this.moveByAction("")
    },
    reset: function() {
        this.moveByAction("tail")
    },
    redraw: function() {
        this._draw()
    },
    tryDraw: function() {
        if (this.isRendering) {
            this.needRedraw = true;
            return false
        } else {
            this.isRendering = true;
            this.needRedraw = false;
            return true
        }
    },
    tryNextDraw: function() {
        this.isRendering = false;
        if (this.needRedraw) {
            setTimeout((function() {
                this._draw()
            }).createDelegate(this), 0)
        }
    },
    getMaxValue: function(b) {
        if (b.length < 1 || b[0].length < 2) {
            return 0
        }
        var a = 0;
        Ext.each(b, function(c) {
            var d = Math.max.apply(null, c.slice(1));
            if (a < d) {
                a = d
            }
        });
        return a
    },
    generateYTick: function(f) {
        var g = [];
        var e = this.numTicks - 1;
        var d = this.yAxisPrecision;
        var a = 2;
        var j = 1.5;
        var h = Math.max(f / (e - j), Math.pow(10, -d) * 1024);
        var c = h * (e - j + a);
        for (var b = 0; b <= e; ++b) {
            g.push(b * h)
        }
        return {
            tick_values: g,
            max: c
        }
    },
    yAxisTickRenderer: function(a) {
        if (a < 0) {
            return ""
        }
        return SYNO.SDS.ActiveBackup.Utils.getConvertSizeByUnit(a, this.unit).toFixed(1)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.Grid", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    pageSize: 7,
    constructor: function(b) {
        var a = {
            disableSelection: true,
            enableColumnMove: false,
            viewConfig: {
                emptyText: '<div class="background"><div class="img"></div><div class="desc-title">' + _LABS("overview", "no_item") + "</div></div>"
            }
        };
        Ext.each(b.colModel.columns, function(c) {
            c.tooltip = Ext.util.Format.htmlEncode(c.header)
        });
        this.callParent([Ext.apply(a, b)])
    },
    initEvents: function() {
        var b = this.callParent(arguments);
        var a = this.view.scroller.dom;
        a.addEventListener("mousewheel", (function(d) {
            var c = this.getFleXcrollInfo(a);
            if (c.scrollTop === false) {
                return
            }
            if ((c.scrollTop !== 0 && d.wheelDeltaY > 0) || (c.scrollTop !== c.maxVerticalScroll && d.wheelDeltaY < 0)) {
                d.stopPropagation()
            }
        }).createDelegate(this));
        return b
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.DeviceSummary", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.device_summary = new SYNO.SDS.ActiveBackup.Overview.DeviceContainer({
            owner: this,
            appWin: a.appWin,
            itemId: "device_container"
        });
        var b = {
            title: _LABS("overview", "label_backup_device"),
            itemId: "device_summary",
            content: this.device_summary
        };
        return Ext.apply(b, a)
    },
    loadData: function(a) {
        this.device_summary.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.DeviceContainer", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.el.select(".card_wrapper.pc").on("click", function() {
            this.appWin.selectPage("SYNO.ActiveBackup.PagePcBackup")
        }, this);
        this.el.select(".card_wrapper.server").on("click", function() {
            this.appWin.selectPage("SYNO.ActiveBackup.PageServerBackup")
        }, this);
        this.el.select(".card_wrapper.vm").on("click", function() {
            this.appWin.selectPage("SYNO.ActiveBackup.PageVmBackup")
        }, this);
        this.el.select(".card_wrapper.fs").on("click", function() {
            this.appWin.selectPage("SYNO.ActiveBackup.PageAgentlessBackup")
        }, this)
    },
    fillConfig: function(a) {
        var b = {
            border: false,
            cls: "syno-activebackup-device-summary",
            id: this.card_panel_id = Ext.id(),
            layout: "fit",
            html: '<div class="panel_wrapper"><div class="line"><div class="card_wrapper pc"><div class="seperator"></div><div class="icon_image_wrapper"><div id="' + this.card_panel_id + '.pc_img" class="icon_image pc"></div></div><div class="info_wrapper"><div id="' + this.card_panel_id + '.pc_type" class="device_type">' + _LABS("overview", "device_pcs") + '</div><div id="' + this.card_panel_id + '.pc" class="value">-</div></div></div><div class="card_wrapper server"><div class="icon_image_wrapper"><div id="' + this.card_panel_id + '.server_img" class="icon_image server"></div></div><div class="info_wrapper"><div id="' + this.card_panel_id + '.server_type" class="device_type">' + _LABS("overview", "device_servers") + '</div><div id="' + this.card_panel_id + '.server" class="value">-</div></div></div></div><div class="line"><div class="card_wrapper vm"><div class="seperator"></div><div class="icon_image_wrapper"><div id="' + this.card_panel_id + '.vm_img" class="icon_image vm"></div></div><div class="info_wrapper"><div id="' + this.card_panel_id + '.vm_type" class="device_type">' + _LABS("overview", "device_vms") + '</div><div id="' + this.card_panel_id + '.vm" class="value">-</div></div></div><div class="card_wrapper fs"><div class="icon_image_wrapper"><div id="' + this.card_panel_id + '.fs_img" class="icon_image fs"></div></div><div class="info_wrapper"><div id="' + this.card_panel_id + '.fs_type" class="device_type">' + _LABS("overview", "device_fs") + '</div><div id="' + this.card_panel_id + '.fs" class="value">-</div></div></div></div></div>'
        };
        return Ext.apply(a, b)
    },
    loadData: function(b) {
        var a = this.getStatisticData(b);
        Ext.get(this.card_panel_id + ".pc").update(a.total_pc.toString(10));
        Ext.get(this.card_panel_id + ".server").update(a.total_server.toString(10));
        Ext.get(this.card_panel_id + ".vm").update(a.total_vm.toString(10));
        Ext.get(this.card_panel_id + ".fs").update(a.total_file_server.toString(10))
    },
    getStatisticData: function(b) {
        var a = {};
        a.total_pc = 0;
        a.total_server = 0;
        a.total_vm = 0;
        a.total_file_server = 0;
        Ext.each(b, function(c) {
            switch (c.backup_type) {
                case SYNO.ActiveBackup.BackupType.PC:
                    a.total_pc++;
                    break;
                case SYNO.ActiveBackup.BackupType.SERVER:
                    a.total_server++;
                    break;
                case SYNO.ActiveBackup.BackupType.VM:
                    a.total_vm++;
                    break;
                case SYNO.ActiveBackup.BackupType.AGENTLESS:
                    a.total_file_server++;
                    break
            }
        }, this);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.ResultCalendar", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.status_calendar = new SYNO.SDS.ActiveBackup.Overview.StatusCalendar({
            owner: this,
            appWin: a.appWin,
            itemId: "status_calendar"
        });
        var b = {
            title: _LABS("overview", "label_bkp_calendar"),
            itemId: "last_backup_status",
            content: this.status_calendar
        };
        return Ext.apply(b, a)
    },
    loadData: function(a) {
        this.status_calendar.store.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.StatusCalendar", {
    extend: "SYNO.ux.Panel",
    CalendarStatus: {
        SUCCESS: "success",
        ERROR: "error",
        WARNING: "warning",
        FUTURE: "future",
        NO_RECORD: "no_record"
    },
    constructor: function(a) {
        a = this.fillConfig(a);
        this.store = this.createStore(a);
        this.callParent([a]);
        this.store.addListener("datachanged", Ext.createDelegate(this.draw, this))
    },
    fillConfig: function(a) {
        this.calendar_panel = new SYNO.ux.Panel({
            itemId: "calendar_panel",
            cls: "calendar_panel",
            id: this.c_id = Ext.id(),
            border: false,
            html: '<div class = "header"><div class = "label"></div><div class = "item">' + _LABS("overview", "weekday_sun") + '</div><div class = "item">' + _LABS("overview", "weekday_mon") + '</div><div class = "item">' + _LABS("overview", "weekday_tue") + '</div><div class = "item">' + _LABS("overview", "weekday_wed") + '</div><div class = "item">' + _LABS("overview", "weekday_thr") + '</div><div class = "item">' + _LABS("overview", "weekday_fri") + '</div><div class = "item">' + _LABS("overview", "weekday_sat") + '</div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w0">-</div><div class = "item under_line"><div id="' + this.c_id + '.28" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.29" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.30" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.31" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.32" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.33" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.34" class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w1">-</div><div class = "item under_line"><div id="' + this.c_id + '.21" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.22" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.23" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.24" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.25" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.26" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.27" class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w2">-</div><div class = "item under_line"><div id="' + this.c_id + '.14" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.15" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.16" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.17" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.18"  class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.19"  class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.20"  class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w3">-</div><div class = "item under_line"><div id="' + this.c_id + '.7" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.8" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.9" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.10" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.11" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.12" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.13" class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w4">-</div><div class = "item"><div id="' + this.c_id + '.0" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.1" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.2" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.3" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.4" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.5" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.6" class = "status-icon"></div></div></div>'
        });
        var b = {
            border: false,
            cls: "syno-activebackup-status-calendar-container",
            items: [this.calendar_panel]
        };
        return Ext.apply(a, b)
    },
    draw: function() {
        this.getWeekTable();
        this.store.each(function(a) {
            this.setWeekIndex(a.data)
        }.createDelegate(this));
        this.updateView()
    },
    getDummyString: function(a) {
        if (a < 10) {
            return "0" + a
        }
        return a
    },
    getTimeString: function(f, b) {
        var a = new Date(f * 1000).getDate();
        var c = new Date(f * 1000).getMonth() + 1;
        var e = new Date(b * 1000).getDate();
        var d = new Date(b * 1000).getMonth() + 1;
        return this.getDummyString(c) + "/" + this.getDummyString(a) + " ~ " + this.getDummyString(d) + "/" + this.getDummyString(e)
    },
    updateView: function() {
        Ext.get(this.c_id + ".w0").update(_LABS("overview", "this_week"));
        var d = this.endDateTimeStamp + 27 * 60 * 60 * 24;
        var f = this.endDateTimeStamp + 21 * 60 * 60 * 24;
        Ext.get(this.c_id + ".w1").update(this.getTimeString(f, d));
        var o = this.endDateTimeStamp + 20 * 60 * 60 * 24;
        var c = this.endDateTimeStamp + 14 * 60 * 60 * 24;
        Ext.get(this.c_id + ".w2").update(this.getTimeString(c, o));
        var b = this.endDateTimeStamp + 13 * 60 * 60 * 24;
        var a = this.endDateTimeStamp + 7 * 60 * 60 * 24;
        Ext.get(this.c_id + ".w3").update(this.getTimeString(a, b));
        var k = this.endDateTimeStamp + 6 * 60 * 60 * 24;
        var n = this.endDateTimeStamp;
        Ext.get(this.c_id + ".w4").update(this.getTimeString(n, k));
        for (var e = 0; e < this.weektable.length; ++e) {
            var m = this.weektable[e].error_count + this.weektable[e].warning_count + this.weektable[e].success_count;
            if (0 === m) {
                continue
            } else {
                if (this.weektable[e].error_count > 0) {
                    this.weektable[e].status = this.CalendarStatus.ERROR
                } else {
                    if (this.weektable[e].success_count === m) {
                        this.weektable[e].status = this.CalendarStatus.SUCCESS
                    } else {
                        this.weektable[e].status = this.CalendarStatus.WARNING
                    }
                }
            }
        }
        for (var h = 0; h < this.weektable.length; h++) {
            var g = this.weektable[h];
            var l = Ext.get(this.c_id + "." + h);
            l.removeClass("success");
            l.removeClass("error");
            l.removeClass("warning");
            l.removeClass("future");
            l.removeClass("no_record");
            l.addClass(g.status);
            if (g.status === "future") {
                continue
            }
            if (g.status === "no_record") {
                l.set({
                    "ext:qtip": _LABS("overview", "no_record")
                });
                continue
            }
            var p = _LABS("task_status", "success") + ": " + g.success_count + "</br>";
            p += _LABS("task_status", "error") + ": " + g.error_count + "</br>";
            p += _LABS("common", "warning") + ": " + g.warning_count + "</br>";
            l.set({
                "ext:qtip": p
            });
            l.un("click", this.jumpTo);
            l.on("click", this.jumpTo, this, this.weektable[h])
        }
    },
    jumpTo: function(g, f, b) {
        var d = new Date(b.last_run_time * 1000);
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        this.appWin.selectPage("SYNO.ActiveBackup.PageActivity");
        var h = this.appWin.getActivePage();
        var c = h.items.items[1];
        c.searchPanel.reset();
        c.searchPanel.setDate(d, d, false);
        var a = c.setSearchingActivation(true);
        var e = c.setRestrictTimeSearch(true);
        this.appWin.selectTab("result_tab");
        c.setSearchingActivation(a);
        c.setRestrictTimeSearch(e)
    },
    getWeekTable: function() {
        this.now = new Date();
        this.today = this.now.getDay();
        var f = 28 + this.today;
        var e = this.now.getTime() / 1000;
        this.startDateTimeStamp = e + (6 - this.today) * 60 * 60 * 24;
        this.endDateTimeStamp = this.startDateTimeStamp - 34 * 60 * 60 * 24;
        this.weektable = [];
        this.date_index_table = [];
        for (var c = 0; c < 35; c++) {
            if (c > f) {
                this.weektable.push({
                    status: this.CalendarStatus.FUTURE,
                    success_count: 0,
                    error_count: 0,
                    warning_count: 0,
                    min_last_run_time: 0,
                    last_run_time: 0
                })
            } else {
                this.weektable.push({
                    status: this.CalendarStatus.NO_RECORD,
                    success_count: 0,
                    error_count: 0,
                    warning_count: 0,
                    min_last_run_time: 0,
                    last_run_time: 0
                })
            }
            var b = this.endDateTimeStamp + c * 86400;
            var g = new Date(b * 1000);
            var a = (g.getMonth() + 1) + "/" + g.getDate();
            this.date_index_table[a] = c
        }
    },
    getWeekDayIndex: function(b) {
        var c = new Date(b * 1000);
        var a = (c.getMonth() + 1) + "/" + c.getDate();
        return this.date_index_table[a]
    },
    setWeekIndex: function(a) {
        var b = this.getWeekDayIndex(a.time_end);
        if (b === undefined) {
            return
        }
        if (a.status === SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS) {
            this.weektable[b].success_count++
        } else {
            if (a.status === SYNO.SDS.ActiveBackup.ResultStatus.FAILURE) {
                this.weektable[b].error_count++
            } else {
                if (a.status === SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS) {
                    this.weektable[b].warning_count++
                } else {
                    if (a.status === SYNO.SDS.ActiveBackup.ResultStatus.CANCEL) {
                        this.weektable[b].warning_count++
                    } else {
                        if (a.status === SYNO.SDS.ActiveBackup.ResultStatus.INCOMPLETE) {
                            this.weektable[b].warning_count++
                        }
                    }
                }
            }
        }
        if (this.weektable[b].min_last_run_time === 0 || a.time_end < this.weektable[b].min_last_run_time) {
            this.weektable[b].min_last_run_time = a.time_end
        }
        if (a.time_end > this.weektable[b].last_run_time) {
            this.weektable[b].last_run_time = a.time_end
        }
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Log",
            method: "list_result",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["result_id", "status", "task_name", "backup_type", "time_start", "time_end"],
            totalProperty: "total",
            idProperty: "result_id",
            root: "results",
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.CurrentActivities", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.grid = new SYNO.SDS.ActiveBackup.Overview.CurrentActivitiesGrid({
            owner: this
        });
        var b = {
            title: _LABS("overview", "label_activities"),
            itemId: "current_activities",
            content: this.grid
        };
        return Ext.apply(b, a)
    },
    loadData: function(a) {
        this.grid.getStore().loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.CurrentActivitiesGrid", {
    extend: "SYNO.SDS.ActiveBackup.Overview.Grid",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = this.createStore(b);
        var a = {
            store: c,
            autoExpandColumn: "activities",
            colModel: this.createColumnModel(b)
        };
        return Ext.apply(a, b)
    },
    getDescriptionTemplate: function(a) {
        if (a.status === SYNO.SDS.ActiveBackup.JobStatus.RUNNING || a.status === SYNO.SDS.ActiveBackup.JobStatus.DELEGATE) {
            switch (a.action) {
                case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                    return _LABS("overview", "activity_backup");
                case SYNO.SDS.ActiveBackup.JobAction.VERIFY:
                    return _LABS("overview", "activity_verify");
                case SYNO.SDS.ActiveBackup.JobAction.MIGRATE_DEVICE:
                    return _LABS("overview", "activity_migrate_device");
                case SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE:
                case SYNO.SDS.ActiveBackup.JobAction.RESTORE_PHYSICAL:
                    return _LABS("overview", "activity_restore_device");
                case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
                    return _LABS("overview", "activity_restore_file");
                case SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET:
                    return _LABS("overview", "activity_delete_target");
                case SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION:
                    return _LABS("overview", "activity_delete_version");
                default:
                    return "--"
            }
        } else {
            if (a.status === SYNO.SDS.ActiveBackup.JobStatus.STOPPING) {
                switch (a.action) {
                    case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                        return _LABS("overview", "activity_cancel_backup");
                    case SYNO.SDS.ActiveBackup.JobAction.VERIFY:
                        return _LABS("overview", "activity_cancel_verify");
                    case SYNO.SDS.ActiveBackup.JobAction.MIGRATE_DEVICE:
                        return _LABS("overview", "activity_cancel_migrate_device");
                    case SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE:
                    case SYNO.SDS.ActiveBackup.JobAction.RESTORE_PHYSICAL:
                        return _LABS("overview", "activity_cancel_restore_device");
                    case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
                        return _LABS("overview", "activity_cancel_restore_file");
                    default:
                        return "--"
                }
            } else {
                if (a.status === SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK) {
                    switch (a.action) {
                        case SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE:
                            if (a.detail_status === SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus.WAITING_PREPARING) {
                                return _LABS("overview", "activity_prepare_restore")
                            } else {
                                return "--"
                            }
                            break;
                        default:
                            return "--"
                    }
                } else {
                    return "--"
                }
            }
        }
    },
    createColumnModel: function(c) {
        var b = [{
            header: _LABS("overview", "label_type"),
            dataIndex: "action",
            width: 114,
            resizable: false,
            renderer: (function(f, e, d) {
                return SYNO.SDS.ActiveBackup.Utils.renderJobAction(d.get("job").action)
            }).createDelegate(this)
        }, {
            header: _LABS("overview", "label_activities"),
            dataIndex: "activities",
            id: "activities",
            width: 200,
            renderer: (function(f, k, g) {
                var d = g.get("job");
                var e = g.get("task");
                var j = g.get("device").map(function(m) {
                    return m.host_name
                });
                var l = this.getDescriptionTemplate(d);
                var i = new Ext.Template(l);
                var h = i.apply({
                    login_user: d.user_name,
                    task: e.task_name,
                    device: j.join(", ")
                });
                if (k) {
                    k.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(h) + '"'
                }
                return h
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Overview",
            method: "list_activity",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["job", "device", "task"],
            totalProperty: "total",
            idProperty: "job.job_id",
            root: "activity_list",
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.LastBackupTime", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.grid = new SYNO.SDS.ActiveBackup.Overview.LastBackupTimeGrid({
            owner: this
        });
        var b = {
            title: _LABS("overview", "label_last_bkp_time"),
            itemId: "last_backup_time",
            content: this.grid
        };
        return Ext.apply(b, a)
    },
    loadData: function(a) {
        this.grid.getStore().loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.LastBackupTimeGrid", {
    extend: "SYNO.SDS.ActiveBackup.Overview.Grid",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = this.createStore(b);
        var a = {
            store: c,
            autoExpandColumn: "device",
            colModel: this.createColumnModel(b)
        };
        return Ext.apply(a, b)
    },
    createColumnModel: function(c) {
        var b = [{
            header: _LABS("overview", "label_device"),
            dataIndex: "device_name",
            id: "device",
            width: 108,
            renderer: (function(f, d, e) {
                if (d) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"'
                }
                return f
            }).createDelegate(this)
        }, {
            header: _LABS("task_info", "task_name"),
            dataIndex: "last_backup_task_name",
            id: "task",
            width: 162,
            renderer: (function(f, d, e) {
                if (!f) {
                    return "--"
                }
                f = Ext.util.Format.htmlEncode(f);
                if (d) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"'
                }
                return f
            }).createDelegate(this)
        }, {
            header: _LABS("overview", "label_last_bkp_time"),
            dataIndex: "last_backup_time",
            id: "last_backup_time",
            width: 130,
            resizable: true,
            align: "right",
            renderer: (function(f, d, e) {
                var g;
                if (f > 0) {
                    g = Math.floor((new Date()).getTime() / 1000 - f)
                } else {
                    g = 0
                }
                if (d) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(SYNO.SDS.ActiveBackup.Utils.renderTime(f)) + '"'
                }
                return SYNO.SDS.ActiveBackup.Utils.renderDays(g)
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                resizable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Overview",
            method: "list_device_last_backup",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: [{
                name: "device_id",
                convert: function(c, d) {
                    return d.device.device_id
                }
            }, {
                name: "device_name",
                convert: function(c, d) {
                    return d.device.host_name
                }
            }, {
                name: "last_backup_task_name",
                convert: function(c, d) {
                    return d.last_backup_task.task_name
                }
            }, "last_backup_time"],
            sortInfo: {
                field: "last_backup_time",
                direction: "ASC"
            },
            totalProperty: "total",
            idProperty: "device_id",
            root: "device_list",
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.StorageUsage", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.storage_usage = new SYNO.SDS.ActiveBackup.Overview.StorageContainer({
            owner: this,
            appWin: a.appWin,
            itemId: "storage_container"
        });
        var b = {
            title: _LABS("overview", "label_storage_status"),
            itemId: "storage_usage",
            content: this.storage_usage
        };
        return Ext.apply(b, a)
    },
    loadData: function(a) {
        this.storage_usage.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.StorageContainer", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        var b = {
            border: false,
            cls: "syno-activebackup-storage-usage",
            id: this.card_panel_id = Ext.id(),
            layout: "fit",
            html: '<div class="panel_wrapper"><div class="middle_area"><div class="east_area"><div class="dedup_wrapper"><div class="' + this.card_panel_id + '.dedup_title">' + _LABS("overview", "label_dedup_size") + '</div><div id="' + this.card_panel_id + '.dedup_size" class="dedup_size">-</div></div></div><div class="center_area"><div class="info_container"><div class="info_wrapper"><div id="' + this.card_panel_id + '.vm_img" class="icon_image vm"></div><div id="' + this.card_panel_id + '.vm_title" class="title">' + _LABS("overview", "device_vms") + '</div><div id="' + this.card_panel_id + '.vm_value" class="value">-</div></div><div class="seperator"></div><div class="info_wrapper"><div id="' + this.card_panel_id + '.pc_img" class="icon_image pc"></div><div id="' + this.card_panel_id + '.pc_title" class="title">' + _LABS("overview", "device_pcs") + '</div><div id="' + this.card_panel_id + '.pc_value" class="value">-</div></div><div class="seperator"></div><div class="info_wrapper"><div id="' + this.card_panel_id + '.server_img" class="icon_image server"></div><div id="' + this.card_panel_id + '.server_title" class="title">' + _LABS("overview", "device_servers") + '</div><div id="' + this.card_panel_id + '.server_value" class="value">-</div></div></div></div></div><div class="south_area"><div class="bottom_info_container"><div class="info_wrapper"><div id="' + this.card_panel_id + '.fs_img" class="icon_image fs"></div><div id="' + this.card_panel_id + '.fs_title" class="title">' + _LABS("overview", "device_fs") + '</div><div id="' + this.card_panel_id + '.fs_value" class="value">-</div></div></div></div></div>'
        };
        return Ext.apply(a, b)
    },
    loadData: function(b) {
        var a = this.getStatisticData(b);
        Ext.get(this.card_panel_id + ".pc_value").update(SYNO.SDS.ActiveBackup.Utils.renderSize(a.total_pc));
        Ext.get(this.card_panel_id + ".server_value").update(SYNO.SDS.ActiveBackup.Utils.renderSize(a.total_server));
        Ext.get(this.card_panel_id + ".vm_value").update(SYNO.SDS.ActiveBackup.Utils.renderSize(a.total_vm));
        Ext.get(this.card_panel_id + ".fs_value").update(SYNO.SDS.ActiveBackup.Utils.renderSize(a.total_file_server));
        Ext.get(this.card_panel_id + ".dedup_size").update(SYNO.SDS.ActiveBackup.Utils.renderSize(a.total_dedup))
    },
    getStatisticData: function(b) {
        var a = {};
        a.total_pc = 0;
        a.total_server = 0;
        a.total_vm = 0;
        a.total_file_server = 0;
        a.total_dedup = 0;
        Ext.each(b, function(c) {
            a.total_dedup += c.dedup_size;
            a.total_pc += c.device_info.pc_size;
            a.total_server += c.device_info.server_size;
            a.total_vm += c.device_info.vm_size;
            a.total_file_server += c.device_info.agentless_size
        }, this);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.LastEventLog", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.grid = new SYNO.SDS.ActiveBackup.Overview.EventLogGrid({
            owner: this
        });
        var b = {
            title: _LABS("overview", "label_logs"),
            jump: (function() {
                this.appWin.selectPage("SYNO.ActiveBackup.PageActivity")
            }).createDelegate(this),
            itemId: "last_event_log",
            content: this.grid
        };
        return Ext.apply(b, a)
    },
    loadData: function(a) {
        this.grid.getStore().loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.EventLogGrid", {
    extend: "SYNO.SDS.ActiveBackup.Overview.Grid",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = this.createStore(b);
        var a = {
            store: c,
            cls: "log_grid",
            autoExpandColumn: "description",
            colModel: this.createColumnModel(b)
        };
        return Ext.apply(a, b)
    },
    createColumnModel: function(c) {
        var b = [{
            header: _LABS("common", "status"),
            dataIndex: "log_level",
            id: "type",
            width: 70,
            renderer: (function(h, e, g) {
                var d, f;
                switch (h) {
                    case SYNO.ActiveBackup.LogLevel.ERROR:
                        d = "error";
                        f = _LABS("log", "error_type");
                        break;
                    case SYNO.ActiveBackup.LogLevel.WARNING:
                        d = "warning";
                        f = _LABS("log", "warning_type");
                        break;
                    case SYNO.ActiveBackup.LogLevel.INFO:
                        d = "info";
                        f = _LABS("log", "info_type");
                        break
                }
                return String.format('<span class="{0}">{1}</span>', d, Ext.util.Format.htmlEncode(f))
            }).createDelegate(this)
        }, {
            header: _LABS("overview", "label_date_and_time"),
            dataIndex: "log_time",
            id: "time",
            width: 55,
            renderer: (function(e, f) {
                var d;
                if (!e) {
                    return "--"
                }
                if (e != parseInt(e, 10)) {
                    return e
                }
                d = new Date(1000 * e);
                if (f) {
                    f.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d.format("m/d H:i:s")) + '"'
                }
                return d.format("m/d H:i")
            }).createDelegate(this)
        }, {
            header: _LABS("overview", "label_event"),
            dataIndex: "log_type",
            id: "description",
            renderer: (function(h, d, g) {
                var e = g.data;
                var f = SYNO.SDS.ActiveBackup.Utils.getLogString(e.log_type, e.other_params);
                if (d) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                    d.css = "x-grid3-col-destination"
                }
                return f
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                resizable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Log",
            method: "list_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["log_id", "log_level", "log_time", "log_type", "other_params", "backup_type"],
            totalProperty: "count",
            idProperty: "log_id",
            root: "logs",
            baseParams: {
                filter: {
                    offset: 0,
                    limit: this.pageSize
                }
            },
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.TransferRankingChart", {
    extend: "SYNO.SDS.ActiveBackup.Overview.Chart",
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin,owner");
        var b = Ext.apply({}, a);
        this.val = [];
        this.domainUnit = "day";
        this.domainSize = 9;
        this.domainStep = 4;
        this.domainOffset = 0;
        this.callParent([b]);
        this.addEvents("draw");
        this.onUpdateHistogram()
    },
    onRender: function(e) {
        this.callParent(arguments);
        this.d3 = SYNO.SDS.DataDrivenDocuments.DrawHelper;
        this.c3 = SYNO.SDS.DataDrivenDocuments.C3;
        var a = this;
        var d = this.getYData();
        var f = this.getMaxValue([d]);
        var b = this.generateYTick(f);
        this.chart = this.c3.generate({
            bindto: "#" + this.getId(),
            size: {
                height: this.getChartHeight()
            },
            data: {
                x: "x",
                columns: [
                    ["x"].concat(this.getXData()), ["y"].concat(d)
                ],
                type: "bar",
                color: this.decideColor.createDelegate(this),
                onmouseover: function(k) {
                    var h = a.d3.select(".c3-bar-" + k.index);
                    var j = a.d3.select(h.node().parentNode);
                    var i = h.node().getBBox();
                    var g = 1;
                    if (a.shadow) {
                        a.shadow.remove();
                        a.shadow = undefined
                    }
                    h.style("stroke", "white").style("stroke-width", "1px").style("fill-opacity", "1");
                    a.shadow = j.append("rect").attr("x", String(i.x - g / 2)).attr("y", String(i.y)).attr("width", String(i.width + g)).attr("height", String(i.height)).style("fill", "rgb(0,0,0)").style("fill-opacity", "0.75").style("filter", "url(#shadowblur)");
                    j.node().insertBefore(a.shadow.node(), h.node())
                },
                onmouseout: function(g) {
                    a.d3.select(".c3-bar-" + g.index).style("stroke", "none");
                    if (a.shadow) {
                        a.shadow.remove();
                        a.shadow = undefined
                    }
                }
            },
            axis: {
                x: {
                    type: "category"
                },
                y: {
                    max: b.max,
                    padding: {
                        top: 0,
                        bottom: 0
                    },
                    tick: {
                        count: this.numTicks,
                        format: this.yAxisTickRenderer.createDelegate(this)
                    }
                }
            },
            legend: {
                show: false
            },
            tooltip: {
                show: true,
                position: function(j, i, g, h) {
                    return {
                        top: 0,
                        left: 50
                    }
                },
                contents: function(l, k, m, g) {
                    var h = g(l[0]);
                    var j = String.format('<div class="label-color" style="background-color:{0}"></div>', h) + '<div class="chart-tooltip-device">' + k(l[0].x) + ":</div>";
                    var i = SYNO.SDS.ActiveBackup.Utils.renderSize(l[0].value);
                    j += String.format('<div class="chart-tooltip-data" style="color:{1}">{0}</div>', i, h);
                    return '<div class="chart-tooltip">' + j + "</div>"
                }
            },
            padding: {
                left: 50,
                right: 20
            },
            bar: {
                width: 16
            },
            grid: {
                y: {
                    show: true
                }
            }
        });
        var c = "#" + this.getId();
        this.d3.select(c).select("svg").insert("filter", ":first-child").attr("id", "shadowblur").append("feGaussianBlur").attr("stdDeviation", "2")
    },
    decideColor: function(e, b) {
        if (!(b instanceof Object)) {
            return e
        }
        var a = this.val[this.domainOffset + b.index].type;
        return SYNO.SDS.ActiveBackup.Utils.getChartConfig(a).color
    },
    getXData: function() {
        var c = [];
        var a = Math.min(this.domainSize, this.val.length);
        for (var b = 0; b < a; ++b) {
            c.push(this.val[this.domainOffset + b].name)
        }
        return c
    },
    getYData: function() {
        var c = [];
        var a = Math.min(this.domainSize, this.val.length);
        for (var b = 0; b < a; ++b) {
            c.push(this.val[this.domainOffset + b].size)
        }
        return c
    },
    getColorData: function() {
        var c = {};
        var a = Math.min(this.domainSize, this.val.length);
        for (var b = 0; b < a; ++b) {
            c[this.val[this.domainOffset + b].name] = this.decideColor(null, {
                index: b
            })
        }
        return c
    },
    _draw: function() {
        if (!this.tryDraw()) {
            return
        }
        var g = this.chart;
        var j = this.getXData();
        var a = this.getYData();
        var e = this.getColorData();
        var i = this.d3.select(".c3-zoom-rect");
        var b = i.attr("width");
        var c = i.attr("height");
        var d = 50;
        var h = this.getMaxValue([
            ["transfer"].concat(a)
        ]);
        var f = this.generateYTick(h);
        if (this.moveBtnNext && this.moveBtnPrev) {
            Ext.destroy(this.moveBtnNext);
            Ext.destroy(this.moveBtnPrev)
        }
        this.moveBtnNext = this.el.createChild({
            cls: "move-change-arrow next"
        }).setStyle("left", ((+d) + (+b) - 26) + "px").setStyle("top", (Math.ceil(c / 2) - 26) + "px");
        if (this.hasValidMove("next")) {
            this.mon(this.moveBtnNext, "click", function() {
                this.moveByAction("next")
            }, this)
        } else {
            this.moveBtnNext.addClass("disable")
        }
        this.moveBtnPrev = this.el.createChild({
            cls: "move-change-arrow prev"
        }).setStyle("left", (+d) + "px").setStyle("top", (Math.ceil(c / 2) - 26) + "px");
        if (this.hasValidMove("prev")) {
            this.mon(this.moveBtnPrev, "click", function() {
                this.moveByAction("prev")
            }, this)
        } else {
            this.moveBtnPrev.addClass("disable")
        }
        g.internal.config.axis_y_tick_values = f.tick_values;
        g.load({
            columns: [
                ["x"].concat(j), ["y"].concat(a)
            ],
            colors: e,
            unload: true,
            done: this.tryNextDraw.createDelegate(this)
        });
        g.axis.max({
            y: f.max
        });
        this.fireEvent("draw")
    },
    switchPeriod: function(a) {
        if ("day" === a) {
            this.domainUnit = "day"
        } else {
            if ("week" === a) {
                this.domainUnit = "week"
            } else {
                if ("month" === a) {
                    this.domainUnit = "month"
                } else {
                    SYNO.Debug.error("period type not exist.")
                }
            }
        }
        this.onUpdateHistogram()
    },
    hasValidMove: function(b) {
        var a = Math.max(0, this.val.length - this.domainSize);
        if (b === "next") {
            if (this.domainOffset >= a) {
                return false
            }
        } else {
            if (b === "prev") {
                if (this.domainOffset <= 0) {
                    return false
                }
            }
        }
        return true
    },
    moveByAction: function(b) {
        var a = Math.max(0, this.val.length - this.domainSize);
        if (b === "tail") {
            this.domainOffset = a
        } else {
            if (b === "next") {
                this.domainOffset = Math.min(this.domainOffset + this.domainStep, a)
            } else {
                if (b === "prev") {
                    this.domainOffset = Math.max(0, this.domainOffset - this.domainStep)
                } else {}
            }
        }
        this.redraw()
    },
    updateOverviewHistogram: function(d, a, c, b) {
        if (!d || this.owner.isDestroyed || !this.isVisible()) {
            return
        }
        this.setData(a)
    },
    onUpdateHistogram: function() {
        var c = new Date();
        var a = c.getTime(),
            b;
        switch (this.domainUnit) {
            case "month":
                b = c.add(Date.MONTH, -1).getTime();
                break;
            case "week":
                b = c.add(Date.DAY, -7).getTime();
                break;
            default:
            case "day":
                b = c.add(Date.DAY, -1).getTime();
                break
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Overview",
            version: 1,
            method: "list_device_transfer_size",
            params: {
                time_start: Math.floor(b / 1000),
                time_end: Math.floor(a / 1000)
            },
            callback: this.updateOverviewHistogram,
            scope: this
        })
    },
    summarizeByDevice: function(f) {
        var d = [];
        var c, a;
        for (c = 0; c < f.length; ++c) {
            var e = f[c];
            var b = 0;
            for (a = 0; a < e.transfer_list.length; ++a) {
                b += e.transfer_list[a].transfered_bytes
            }
            d.push({
                name: e.device.host_name,
                type: e.device.backup_type,
                size: b
            })
        }
        return d
    },
    setData: function(a) {
        this.val = this.summarizeByDevice(a.device_list);
        this.val.sort(function(c, d) {
            return c.size - d.size
        });
        if (this.val.length > 0) {
            var b = this.val[this.val.length - 1].size;
            this.unit = SYNO.SDS.ActiveBackup.Utils.getUnit(b);
            this.chart.axis.max({
                y: b
            })
        } else {
            this.unit = "KB"
        }
        this.moveByAction("tail")
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.TransferTrendChart", {
    extend: "SYNO.SDS.ActiveBackup.Overview.Chart",
    dateInfo: null,
    valMap: [],
    requires: ["SYNO.ActiveBackup.HistogramFormat"],
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin,owner,typeList,taskId");
        var b = Ext.apply({}, a);
        this.dateInfo = new SYNO.ActiveBackup.HistogramDateInfo();
        this.nextData = null;
        this.setData({
            results: []
        });
        this.callParent([b]);
        this.addEvents("draw");
        this.moveByAction("")
    },
    onRender: function(d) {
        this.callParent(arguments);
        this.d3 = SYNO.SDS.DataDrivenDocuments.DrawHelper;
        this.c3 = SYNO.SDS.DataDrivenDocuments.C3;
        var a = {};
        Ext.each(this.valMap, function(f) {
            if (f.color) {
                a[f.label] = f.color
            }
        });
        var c = this.valMap.map(function(f) {
            return [f.label].concat(f.values)
        });
        var e = this.getMaxValue(c);
        var b = this.generateYTick(e);
        this.chart = this.c3.generate({
            bindto: "#" + this.getId(),
            size: {
                height: this.getChartHeight()
            },
            data: {
                x: "x",
                xFormat: "%Y-%m-%d %H:%M",
                columns: [this.getXData(this.dateInfo)].concat(c),
                colors: a,
                type: "line"
            },
            axis: {
                x: {
                    type: "timeseries",
                    tick: {
                        format: (function(f) {
                            return SYNO.ActiveBackup.HistogramFormat.formatter[this.dateInfo.timePeriod](f)
                        }).createDelegate(this)
                    },
                    padding: {
                        left: 0,
                        right: 0
                    }
                },
                y: {
                    max: b.max,
                    padding: {
                        top: 0,
                        bottom: 0
                    },
                    tick: {
                        count: this.numTicks,
                        format: this.yAxisTickRenderer.createDelegate(this)
                    }
                }
            },
            point: {
                r: 0,
                focus: {
                    expand: {
                        r: 3.5
                    }
                }
            },
            legend: {
                show: false
            },
            tooltip: {
                show: true,
                position: function(i, h, f, g) {
                    return {
                        top: 0,
                        left: 50
                    }
                },
                contents: (function(l, k, m, f) {
                    var j = '<div class="chart-tooltip-time">' + SYNO.ActiveBackup.HistogramFormat.formatter[this.dateInfo.timePeriod](l[0].x) + "</div>";
                    for (var h = 0; h < l.length; ++h) {
                        var g = SYNO.SDS.ActiveBackup.Utils.renderSize(l[h].value);
                        j += String.format('<div class="chart-tooltip-data" style="color:{1}">{0}</div>', g, f(l[h]))
                    }
                    return '<div class="chart-tooltip">' + j + "</div>"
                }).createDelegate(this)
            },
            padding: {
                left: 50,
                right: 20
            },
            grid: {
                y: {
                    show: true
                }
            }
        })
    },
    getXData: function(c) {
        var d = ["x"],
            a;
        var b = this.generateTimeDuration(c);
        for (a = 0; a < b.length; ++a) {
            d.push(b[a] * 1000)
        }
        return d
    },
    _draw: function() {
        if (!this.tryDraw()) {
            return
        }
        if (this.nextData) {
            this.dateInfo = this.nextData.dateInfo;
            this.setData(this.nextData.response);
            this.nextData = null
        }
        var e = this.chart;
        var f = this.d3.select("#" + this.getId() + " .c3-zoom-rect");
        var d = f.attr("width");
        var a = f.attr("height");
        var g = 50;
        if (this.moveBtnNext && this.moveBtnPrev) {
            Ext.destroy(this.moveBtnNext);
            Ext.destroy(this.moveBtnPrev)
        }
        this.moveBtnNext = this.el.createChild({
            cls: "move-change-arrow next"
        }).setStyle("left", ((+g) + (+d) - this.moveButtonWidth) + "px").setStyle("top", (Math.ceil(a / 2) - 26) + "px");
        if (this.hasValidMove("next")) {
            this.mon(this.moveBtnNext, "click", function() {
                this.moveByAction("next")
            }, this)
        } else {
            this.moveBtnNext.addClass("disable")
        }
        this.moveBtnPrev = this.el.createChild({
            cls: "move-change-arrow prev"
        }).setStyle("left", (+g) + "px").setStyle("top", (Math.ceil(a / 2) - this.moveButtonWidth) + "px");
        if (this.hasValidMove("prev")) {
            this.mon(this.moveBtnPrev, "click", function() {
                this.moveByAction("prev")
            }, this)
        } else {
            this.moveBtnPrev.addClass("disable")
        }
        var c = this.valMap.map(function(i) {
            return [i.label].concat(i.values)
        });
        var h = this.getMaxValue(c);
        var b = this.generateYTick(h);
        this.addPadding(e, this.dateInfo, this.moveButtonWidth + 2, d);
        e.internal.config.axis_y_tick_values = b.tick_values;
        e.load({
            columns: [this.getXData(this.dateInfo)].concat(c),
            unload: true,
            done: this.tryNextDraw.createDelegate(this)
        });
        e.axis.max({
            y: b.max
        });
        this.fireEvent("draw")
    },
    addPadding: function(f, j, i, b) {
        var c = 0;
        var d = i / b;
        var g = d * (j.duration - 1);
        var h = (d + 4 / b) * (j.duration - 1);
        var e = j.getStartDate();
        var a = j.getEndDate();
        if (SYNO.ActiveBackup.TimePeriod.DAY === j.timePeriod) {
            c = 24 * 60 * 60 * 1000
        } else {
            if (SYNO.ActiveBackup.TimePeriod.HOUR === j.timePeriod) {
                c = 60 * 60 * 1000
            } else {
                SYNO.Debug.error("Unknow time Period setting.")
            }
        }
        f.axis.range({
            max: {
                x: a.getTime() + (h - 1) * c
            },
            min: {
                x: e.getTime() - g * c
            }
        })
    },
    switchPeriod: function(a) {
        if (SYNO.ActiveBackup.TimePeriod.DAY === a) {
            this.dateInfo.timePeriod = SYNO.ActiveBackup.TimePeriod.DAY
        } else {
            if (SYNO.ActiveBackup.TimePeriod.HOUR === a) {
                this.dateInfo.timePeriod = SYNO.ActiveBackup.TimePeriod.HOUR
            } else {
                SYNO.Debug.error("period type not exist.")
            }
        }
        this.reload()
    },
    moveDate: function(a, b) {
        if ("next" === a) {
            b.move(4)
        } else {
            if ("prev" === a) {
                b.move(-4)
            } else {
                if ("tail" === a) {
                    b.reset()
                } else {}
            }
        }
        return b
    },
    hasValidMove: function(b) {
        var a = this.dateInfo.clone();
        var c = new SYNO.ActiveBackup.HistogramDateInfo();
        c.timePeriod = a.timePeriod;
        this.moveDate(b, a);
        if ("next" === b) {
            return a.getEndDate().getTime() <= c.getEndDate().getTime()
        } else {
            if ("prev" === b) {
                return a.getStartDate().getTime() >= 0
            } else {
                return true
            }
        }
    },
    moveByAction: function(b) {
        var a = this.dateInfo.clone();
        this.moveDate(b, a);
        this.onUpdateHistogram(a)
    },
    updateOverviewHistogram: function(d, a, c, b) {
        if (!d || this.owner.isDestroyed || !this.isVisible()) {
            return
        }
        this.nextData = {
            dateInfo: b.date_info,
            response: a
        };
        this.redraw()
    },
    onUpdateHistogram: function(a) {
        var b = {
            filter: {
                time_start: Math.floor(a.getStartDate().getTime() / 1000),
                time_end: Math.floor(a.getEndDate().getTime() / 1000),
                job_action: SYNO.SDS.ActiveBackup.JobAction.BACKUP
            }
        };
        if (this.taskId) {
            b.task_id = this.taskId
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Log",
            version: 1,
            method: "list_result",
            params: b,
            callback: this.updateOverviewHistogram,
            scope: this,
            date_info: a
        })
    },
    generateTimeDuration: function(c) {
        var e = [],
            a, g = c.getStartDate(),
            f, b;
        if (SYNO.ActiveBackup.TimePeriod.DAY === c.timePeriod) {
            b = Date.DAY
        } else {
            if (SYNO.ActiveBackup.TimePeriod.HOUR === c.timePeriod) {
                b = Date.HOUR
            } else {
                SYNO.Debug.error("Unknow time Period setting.")
            }
        }
        for (a = 0; a < c.duration; ++a) {
            f = g.add(b, a);
            e.push(f.getTime() / 1000)
        }
        return e
    },
    getLowerBound: function(b, c) {
        var a;
        for (a = 0; a < b.length; ++a) {
            if (c < b[a]) {
                return a - 1
            }
        }
        return b.length - 1
    },
    summarizeTypeByTime: function(f, c) {
        var h = this.generateTimeDuration(this.dateInfo);
        var e = Array.apply(null, new Array(h.length)).map(function() {
            return 0
        });
        for (var b = 0; b < f.length; ++b) {
            var g = f[b];
            if (g.backup_type != c) {
                continue
            }
            var d = g.transfered_bytes;
            var a = this.getLowerBound(h, g.time_end);
            if (a >= 0) {
                e[a] += d
            }
        }
        return e
    },
    setData: function(f) {
        var e = 0;
        this.valMap = [];
        for (var c = 0; c < this.typeList.length; ++c) {
            var b = SYNO.SDS.ActiveBackup.Utils.getChartConfig(this.typeList[c]);
            var a = this.summarizeTypeByTime(f.results, b.backup_type);
            this.valMap.push({
                label: b.label,
                color: b.color,
                values: a
            });
            var d = Math.max.apply(null, a);
            e = Math.max(e, d)
        }
        this.unit = SYNO.SDS.ActiveBackup.Utils.getUnit(e)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.TransferChart", {
    extend: "SYNO.SDS.ActiveBackup.Overview.ContainerPanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.chart = new SYNO.SDS.ActiveBackup.Overview.TransferChartContainer(a);
        var b = {
            title: _LABS("overview", "label_transfer_trend"),
            itemId: "trend_usage",
            content: this.chart
        };
        return Ext.apply(b, a)
    },
    reset: function() {
        this.chart.reset()
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Overview.TransferChartContainer", {
    extend: "Ext.BoxComponent",
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin,owner");
        var b = Ext.apply({
            cls: "syno-activebackup-transfered-histogram",
            tpl: this.createTpl()
        }, a);
        this.callParent([b])
    },
    createTpl: function() {
        if (this.tpl) {
            return this.tpl
        }
        this.tpl = new Ext.XTemplate('<div class="legend">', '<tpl for="legends">', '<div class="label-color" style="background-color:{color:htmlEncode}"></div>', '<div class="label-name">{display_short_text:htmlEncode}</div>', "</tpl>", "</div>", '<div id="{y_label_id}" class="axis-y-label">', "{y_label:htmlEncode}", "</div>", '<div id="{toolbar_id}" class="syno-activebackup-chart-toolbar">', "</div>", '<div class="chart">', '<div id="{trend_chart_id}" class="syno-activebackup-trend-histogram">', "</div>", '<div id="{ranking_chart_id}" class="syno-activebackup-ranking-histogram">', "</div>", "</div>");
        return this.tpl
    },
    onResize: function(d, b, a, c) {
        this.callParent(arguments);
        this.trend_chart.onResize(d, b, a, c);
        this.ranking_chart.onResize(d, b, a, c)
    },
    onRender: function(a) {
        this.callParent(arguments);
        this.y_label_id = Ext.id();
        this.toolbar_id = Ext.id();
        this.trend_chart_id = Ext.id();
        this.ranking_chart_id = Ext.id();
        this.tpl.append(this.getEl(), {
            y_label_id: this.y_label_id,
            y_label: _LABS("overview", "transfer_size") + " (GB)",
            toolbar_id: this.toolbar_id,
            trend_chart_id: this.trend_chart_id,
            ranking_chart_id: this.ranking_chart_id,
            legends: SYNO.SDS.ActiveBackup.Utils.getChartConfig()
        });
        this.trend_chart = new SYNO.SDS.ActiveBackup.Overview.TransferTrendChart({
            typeList: [SYNO.ActiveBackup.BackupType.PC, SYNO.ActiveBackup.BackupType.SERVER, SYNO.ActiveBackup.BackupType.AGENTLESS, SYNO.ActiveBackup.BackupType.VM],
            renderTo: this.trend_chart_id,
            owner: this,
            height: 280
        });
        this.ranking_chart = new SYNO.SDS.ActiveBackup.Overview.TransferRankingChart({
            renderTo: this.ranking_chart_id,
            owner: this,
            height: 280
        });
        this.mon(this.trend_chart, "draw", this.onChartDraw, this);
        this.mon(this.ranking_chart, "draw", this.onChartDraw, this);
        this.trend_option = [
            [SYNO.ActiveBackup.TimePeriod.DAY, _LABS("overview", "chart_period_day")],
            [SYNO.ActiveBackup.TimePeriod.HOUR, _LABS("overview", "chart_period_hour")]
        ];
        this.ranking_option = [
            ["day", _LABS("histogram", "last_24_hours")],
            ["week", _LABS("histogram", "last_1_week")],
            ["month", _LABS("histogram", "last_1_month")]
        ];
        this.tbar = new Ext.Toolbar({
            renderTo: this.toolbar_id,
            items: ["->", {
                xtype: "syno_combobox",
                displayField: "display",
                valueField: "value",
                itemId: "data_type",
                value: "trend",
                tpl: '<tpl for="."><div ext:qtip="{display}" class="x-combo-list-item">{display}</div></tpl>',
                width: 180,
                store: new Ext.data.ArrayStore({
                    fields: ["value", "display"],
                    data: [
                        ["trend", _LABS("overview", "chart_type_trend")],
                        ["ranking", _LABS("overview", "chart_type_ranking")]
                    ]
                }),
                listeners: {
                    beforeSelect: {
                        scope: this,
                        fn: function(g, b, d) {
                            var e = this.tbar.getComponent("data_period");
                            var f = b.get("value");
                            if (f === g.getValue()) {
                                return
                            }
                            var c;
                            if (f == "trend") {
                                c = this.trend_option
                            } else {
                                c = this.ranking_option
                            }
                            e.getStore().loadData(c);
                            e.setValue(e.getStore().getAt(0).get("value"));
                            if (f === "ranking") {
                                this.ranking_chart.switchPeriod(e.getValue())
                            } else {
                                this.trend_chart.switchPeriod(e.getValue())
                            }
                            this.switchChart(f)
                        }
                    }
                }
            }, {
                xtype: "tbspacer",
                width: 8
            }, {
                xtype: "syno_combobox",
                displayField: "display",
                valueField: "value",
                itemId: "data_period",
                width: 180,
                value: SYNO.ActiveBackup.TimePeriod.DAY,
                store: new Ext.data.ArrayStore({
                    fields: ["value", "display"],
                    data: this.trend_option
                }),
                listeners: {
                    beforeSelect: {
                        scope: this,
                        fn: function(f, b, d) {
                            var e = b.get("value");
                            var c = this.tbar.getComponent("data_type").getValue();
                            if (e == f.getValue()) {
                                return
                            }
                            if (c === "ranking") {
                                this.ranking_chart.switchPeriod(b.get("value"))
                            } else {
                                this.trend_chart.switchPeriod(b.get("value"))
                            }
                        }
                    }
                }
            }, {
                xtype: "tbspacer",
                width: 30
            }]
        })
    },
    getChartType: function() {
        return this.tbar.getComponent("data_type").getValue()
    },
    onChartDraw: function() {
        this.switchChart()
    },
    switchChart: function(a) {
        if (!a) {
            a = this.getChartType()
        }
        var b = "";
        if (a === "ranking") {
            b = this.ranking_chart.getUnit();
            this.ranking_chart.setVisible(true);
            this.trend_chart.setVisible(false)
        } else {
            b = this.trend_chart.getUnit();
            this.trend_chart.setVisible(true);
            this.ranking_chart.setVisible(false)
        }
        Ext.get(this.y_label_id).update(_LABS("overview", "transfer_size") + " (" + b + ")")
    },
    reset: function() {
        var a = this.getChartType();
        if (a === "ranking") {
            this.ranking_chart.reset()
        } else {
            this.trend_chart.reset()
        }
    }
});
Ext.define("SYNO.ActiveBackup.PageOverview", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin,owner");
        this.owner = a.owner.application;
        this.vertical_height = 278;
        var b = Ext.apply({
            autoFlexcroll: true,
            border: false,
            id: this.overview_id = Ext.id(),
            cls: "synoabk-overview-page",
            items: [this.getInfoPanel(a)]
        }, a);
        this._mask_owner = [];
        this.pollingTask = null;
        return this.callParent([b])
    },
    getInfoPanel: function(a) {
        this.device_summary = new SYNO.SDS.ActiveBackup.Overview.DeviceSummary(a);
        this.status_calendar = new SYNO.SDS.ActiveBackup.Overview.ResultCalendar(a);
        this.current_activities = new SYNO.SDS.ActiveBackup.Overview.CurrentActivities(a);
        this.last_backup_time = new SYNO.SDS.ActiveBackup.Overview.LastBackupTime(a);
        this.storage_status = new SYNO.SDS.ActiveBackup.Overview.StorageUsage(a);
        this.last_event_log = new SYNO.SDS.ActiveBackup.Overview.LastEventLog(a);
        this.transfer_trend = new SYNO.SDS.ActiveBackup.Overview.TransferChart(a);
        this.float_panels = [this.device_summary, this.status_calendar, this.current_activities, this.last_backup_time, this.storage_status, this.last_event_log];
        this.group_info_panel = new SYNO.ux.Panel(Ext.apply({
            itemId: "group_info_panel",
            cls: "group_info_panel",
            items: [this.device_summary, this.status_calendar, this.current_activities, this.last_backup_time, this.storage_status, this.last_event_log, this.transfer_trend]
        }, a));
        return this.group_info_panel
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "resize", this.adjustPanelSize, this);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this)
    },
    adjustPanelSize: function(l, d, h, j, e) {
        var f, a;
        var c = "vertical";
        var k = d - 6;
        if (d > 1119) {
            c = "horizontal"
        }
        if (c === "vertical") {
            f = 4;
            a = 2
        } else {
            f = 3;
            a = 3
        }
        var b = k / a;
        for (var g = 0; g < this.float_panels.length; ++g) {
            this.float_panels[g].setWidth(b);
            this.float_panels[g].setHeight(this.vertical_height)
        }
        this.transfer_trend.setWidth(k);
        this.transfer_trend.setHeight(this.vertical_height);
        this.group_info_panel.setWidth(k);
        this.group_info_panel.setHeight(f * this.vertical_height);
        this.doLayout()
    },
    getPollingConfig: function(b) {
        var a = [{
            api: "SYNO.ActiveBackup.Overview",
            method: "list_activity",
            version: 1,
            params: {
                sort_by: "job_id",
                sort_direction: "ASC"
            }
        }, {
            api: "SYNO.ActiveBackup.Log",
            method: "list_result",
            version: 1,
            params: {
                filter: {
                    time_start: parseInt((new Date()).getTime() / 1000, 10) - 34 * 24 * 60 * 60,
                    time_end: parseInt((new Date()).getTime() / 1000, 10)
                }
            }
        }, {
            api: "SYNO.ActiveBackup.Log",
            method: "list_log",
            version: 1,
            params: {
                filter: {
                    offset: 0,
                    limit: 7
                }
            }
        }];
        if (b) {
            a = a.concat([{
                api: "SYNO.ActiveBackup.Device",
                method: "list",
                version: 1
            }, {
                api: "SYNO.ActiveBackup.Overview",
                method: "list_device_last_backup",
                version: 1
            }, {
                api: "SYNO.ActiveBackup.Share",
                method: "list_storage",
                version: 1
            }])
        }
        return {
            compound: {
                mode: "parallel",
                params: a
            }
        }
    },
    onActivate: function() {
        this.startPolling(true, true);
        this.transfer_trend.reset()
    },
    onDeactivate: function() {
        this.stopPolling()
    },
    onDestroy: function() {
        this.stopPolling()
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    startPolling: function(a, b) {
        if (a) {
            this.maskWindow("polling")
        }
        if (!this.pollingTask) {
            this.pollingTask = this.addWebAPITask({
                scope: this,
                interval: 6000,
                callback: this.onPollingDone
            })
        }
        this.pollingTask.reqConfig.webapi = this.getPollingConfig(true);
        this.pollingTask.start(b)
    },
    stopPolling: function() {
        if (!this.pollingTask) {
            return
        }
        this.pollingTask.stop();
        this.unmaskWindow("polling")
    },
    onPollingDone: function(j, e, d, a) {
        this.unmaskWindow("polling");
        if (!j) {
            return
        }
        if (e.has_fail) {
            var c = [SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_INITIALIZING, SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_RUNNING, SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_FAIL, SYNO.SDS.ActiveBackup.ErrorTable.UPGRADE_FAIL_REASON_SHARE_UNMOUNT, SYNO.SDS.ActiveBackup.ErrorTable.UNKNOW];
            Ext.each(e.result, function(l) {
                if (!l.success && c.indexOf(l.error.code) >= 0) {
                    this.stopPolling();
                    SYNO.ActiveBackup.Util.reportError.call(this, l.error, "", function() {
                        this.appWin.close()
                    }, this);
                    return false
                }
            }, this)
        }
        var i = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Device", "list");
        var h = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Overview", "list_activity");
        var b = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Overview", "list_device_last_backup");
        var k = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Log", "list_result");
        var f = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Log", "list_log");
        var g = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Share", "list_storage");
        if (i && i.devices) {
            this.device_summary.loadData(i.devices)
        }
        if (h && !h.code) {
            this.current_activities.loadData(h)
        }
        if (b && !b.code) {
            this.last_backup_time.loadData(b)
        }
        if (k && !k.code) {
            this.status_calendar.loadData(k)
        }
        if (f && !f.code) {
            this.last_event_log.loadData(f)
        }
        if (g && g.storages) {
            this.storage_status.loadData(g.storages)
        }
        this.pollingTask.reqConfig.webapi = this.getPollingConfig(false)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Model.SearchPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.searchPanel = null;
        this.dateType = {
            custom: 1,
            today: 2,
            yesterday: 4,
            lastweek: 8,
            last2week: 16,
            lastmonth: 32
        };
        this.dataRange = [
            [this.dateType.custom, _T("log", "date_custom")],
            [this.dateType.today, _T("log", "date_today")],
            [this.dateType.yesterday, _T("log", "date_yesterday")],
            [this.dateType.lastweek, _T("log", "date_lastweek")],
            [this.dateType.last2week, _LABS("histogram", "last_2_weeks")],
            [this.dateType.lastmonth, _T("log", "date_lastmonth")]
        ];
        this.defaultAnimation = ["#000", 1, {
            duration: 0.35
        }];
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var e, f, d;
        var b = [];
        this.inputfields = [];
        this.inputfields_config = [];
        this.comboboxes = [];
        this.comboboxes_config = [];
        if (c.hasOwnProperty("filter_inputfield") && c.filter_inputfield !== undefined) {
            c.filter_inputfield.forEach(function(h, g, i) {
                this.inputfields[g] = this.createInputFieled(h.name, h.display_string);
                this.inputfields_config[g] = h.name
            }, this)
        }
        this.inputfields.forEach(function(g) {
            this.push(g)
        }, b);
        if (c.hasOwnProperty("filter_combobox") && c.filter_combobox !== undefined) {
            c.filter_combobox.forEach(function(h, g, i) {
                this.comboboxes[g] = this.createComboBox(h.name, h.display_string, h.data, h.default_value);
                this.comboboxes_config[g] = h.name
            }, this)
        }
        this.comboboxes.forEach(function(g) {
            this.push(g)
        }, b);
        e = this.createFriendlyDate();
        f = this.createCustDate();
        d = this.createFootBar();
        b.push(e);
        b.push(f);
        b.push(d);
        var a = {
            width: 368,
            heigh: 480,
            floating: true,
            labelAlign: "left",
            trackResetOnLoad: true,
            waitMsgTarget: true,
            border: true,
            bodyStyle: "padding: 20px; padding-top: 0px; font-size: 24px;",
            autoFlexcroll: false,
            defaults: {
                hideLabel: true,
                anchor: "100%"
            },
            itemId: "search_panel",
            items: b
        };
        return Ext.apply(a, c)
    },
    onHide: function() {
        if (!this.triggerClick) {
            SYNO.SDS.ActiveBackup.Model.SearchPanel.superclass.onHide.call(this)
        }
    },
    onTriggerClickSelector: function() {
        this.triggerClick = true
    },
    createInputFieled: function(a, b) {
        return [{
            xtype: "syno_displayfield",
            value: b,
            flex: 1
        }, {
            xtype: "syno_textfield",
            name: a,
            flex: 2,
            vaule: ""
        }]
    },
    createComboBox: function(c, d, e, a) {
        var b = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: c,
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: e
            }),
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            value: a
        });
        return [{
            xtype: "syno_displayfield",
            value: d,
            flex: 1
        }, b]
    },
    createFriendlyDate: function() {
        this.friendlyDate = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: "dateRange",
            store: this.getFriendlyDateStore(),
            displayField: "displayText",
            valueField: "id",
            triggerAction: "all",
            value: this.dateType.custom,
            listeners: {
                scope: this,
                beforeselect: this.friendlyDateSelect
            }
        });
        return [{
            xtype: "syno_displayfield",
            value: _T("log", "date_range") + _T("common", "colon"),
            flex: 1
        }, this.friendlyDate]
    },
    createCustDate: function() {
        this.dateFrom = new SYNO.ux.DateField({
            name: "searchdatefrom",
            editable: false,
            format: "m/d/Y",
            emptyText: _T("log", "date_from"),
            value: "",
            listeners: {
                scope: this,
                select: function(b, a) {
                    this.form.findField("searchdateto").setMinValue(a)
                }
            }
        });
        this.dateTo = new SYNO.ux.DateField({
            name: "searchdateto",
            editable: false,
            format: "m/d/Y",
            emptyText: _T("log", "date_to"),
            value: "",
            listeners: {
                scope: this,
                select: function(b, a) {
                    this.form.findField("searchdatefrom").setMaxValue(a)
                }
            }
        });
        return [{
            xtype: "syno_displayfield",
            value: _T("time", "time_date") + _T("common", "colon")
        }, {
            xtype: "syno_compositefield",
            hideLabel: true,
            defaults: {
                flex: 1
            },
            defaultMargins: "0 8 0 0",
            items: [this.dateFrom, this.dateTo]
        }]
    },
    createFootBar: function() {
        return [{
            xtype: "toolbar",
            border: false,
            itemId: "btns",
            toolbarCls: "search-panel-fbar-btnPanel",
            items: [{
                xtype: "tbfill"
            }, {
                xtype: "syno_button",
                btnStyle: "blue",
                style: "margin-right: 10px",
                text: _T("log", "search"),
                itemId: "btn_search",
                handler: this.onSearch,
                scope: this
            }, {
                xtype: "syno_button",
                minWidth: 80,
                text: _T("common", "reset"),
                handler: this.onReset,
                scope: this
            }]
        }]
    },
    setKeyWord: function(a) {
        var b = this.getForm().findField("key_word");
        if (b && Ext.isString(a)) {
            b.setValue(a)
        }
        b.focus("", 1)
    },
    onSearch: function() {
        var d, g, a;
        var f = {};
        d = this.getForm();
        g = d.findField("searchdatefrom").getRawValue();
        a = d.findField("searchdateto").getRawValue();
        var c, e, b;
        for (c = 0; c < this.inputfields_config.length; c++) {
            b = this.inputfields_config[c];
            e = d.findField(b).getValue();
            if (!e) {
                continue
            }
            f[b] = e
        }
        for (c = 0; c < this.comboboxes_config.length; c++) {
            b = this.comboboxes_config[c];
            e = d.findField(b).getValue();
            if ((b === "log_level" && e === SYNO.ActiveBackup.LogLevel.ALL) || (b === "status" && e === SYNO.SDS.ActiveBackup.ResultStatus.ALL) || (b === "backup_type" && e === SYNO.ActiveBackup.BackupType.ALL) || (b === "job_action" && e === SYNO.SDS.ActiveBackup.JobAction.ALL)) {
                continue
            }
            if (b === "job_action" && e === SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE) {
                e = [SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE, SYNO.SDS.ActiveBackup.JobAction.RESTORE_FILE, SYNO.SDS.ActiveBackup.JobAction.RESTORE_PHYSICAL]
            }
            f[b] = e
        }
        if (g) {
            f.from_timestamp = new Date(g + " 00:00:00").getTime() / 1000
        }
        if (a) {
            f.to_timestamp = new Date(a + " 23:59:59").getTime() / 1000
        }
        this.fireEvent("search", this, {
            filter: f
        })
    },
    onReset: function() {
        this.getForm().items.each(function(a) {
            if (a.isDirty()) {
                this.frameAnimation(a.el, this.defaultAnimation);
                return
            }
        }, this);
        this.reset();
        this.fireEvent("search", this, {
            filter: {}
        })
    },
    reset: function() {
        this.getForm().reset();
        this.getForm().findField("searchdatefrom").setMaxValue(null);
        this.getForm().findField("searchdateto").setMinValue(null)
    },
    frameAnimation: function(a, b) {
        if (a && a.isVisible()) {
            Ext.Element.prototype.frame.apply(a, b)
        }
    },
    setDate: function(c, b, a) {
        if (a === true) {
            this.frameAnimation(this.form.findField("searchdatefrom").el, this.defaultAnimation);
            this.frameAnimation(this.form.findField("searchdateto").el, this.defaultAnimation)
        }
        this.form.findField("searchdatefrom").setMaxValue(b);
        this.form.findField("searchdateto").setMinValue(c);
        this.form.findField("searchdatefrom").setValue(c);
        this.form.findField("searchdateto").setValue(b)
    },
    getFromToDate: function(c) {
        var e, d, a;
        var b = new Date();
        d = b;
        if (c === this.dateType.today) {
            e = d = b
        } else {
            if (c === this.dateType.yesterday) {
                e = d = b.add(Date.DAY, -1)
            } else {
                if (c === this.dateType.lastweek) {
                    a = b.getDay();
                    e = b.add(Date.DAY, -7)
                } else {
                    if (c === this.dateType.last2week) {
                        a = b.getDay();
                        e = b.add(Date.DAY, -14)
                    } else {
                        if (c === this.dateType.lastmonth) {
                            e = b.add(Date.MONTH, -1)
                        }
                    }
                }
            }
        }
        return {
            from: e,
            to: d
        }
    },
    friendlyDateSelect: function(c, e, a) {
        var b = e.get("id");
        var d = this.getFromToDate(b);
        this.setDate(d.from, d.to, true)
    },
    getFriendlyDateStore: function() {
        var a = this.dataRange;
        return new Ext.data.ArrayStore({
            autoDestroy: true,
            fields: ["id", "displayText"],
            data: a
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Model.AdvancedSearchField", {
    extend: "SYNO.ux.SearchField",
    initEvents: function() {
        this.callParent(arguments);
        this.mon(Ext.getDoc(), "mousedown", this.onMouseDown, this);
        this.mon(this, "keypress", function(b, a) {
            if (a.getKey() == Ext.EventObject.ENTER) {
                this.searchPanel.setKeyWord(this.getValue());
                this.searchPanel.onSearch()
            }
        }, this)
    },
    isInnerComponent: function(c, b) {
        var a = false;
        b.items.each(function(d) {
            if (d instanceof Ext.form.ComboBox) {
                if (d.view && c.within(d.view.getEl())) {
                    a = true;
                    return false
                }
            } else {
                if (d instanceof Ext.form.DateField) {
                    if (d.menu && c.within(d.menu.getEl())) {
                        a = true;
                        return false
                    }
                } else {
                    if (d instanceof Ext.form.CompositeField) {
                        if (this.isInnerComponent(c, d)) {
                            a = true;
                            return false
                        }
                    }
                }
            }
        }, this);
        return a
    },
    onMouseDown: function(b) {
        var a = this.searchPanel;
        if (a && a.isVisible() && !a.isDestroyed && !a.inEl && !b.within(a.getEl()) && !b.within(this.searchtrigger) && !this.isInnerComponent(b, this.searchPanel.getForm())) {
            a.hide();
            this.setValue(a.getForm().findField("key_word").getValue())
        }
    },
    onSearchTriggerClick: function() {
        if (this.searchPanel.isVisible()) {
            this.searchPanel.hide();
            return
        }
        this.searchPanel.getEl().alignTo(this.wrap, "tr-br?", [0, 0]);
        this.searchPanel.show();
        this.searchPanel.setKeyWord(this.getValue())
    },
    onTriggerClick: function() {
        this.callParent();
        this.searchPanel.onReset();
        this.searchPanel.onSearch()
    }
});
Ext.define("SYNO.ActiveBackup.View.LogSettingWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = Ext.apply({
            title: _LABS("common", "log_setting_title"),
            closable: true,
            resizable: false,
            padding: "0 20px",
            border: true,
            height: 300,
            width: 500,
            items: [{
                xtype: "syno_fieldset",
                title: _LABS("log_setting_window", "log_delete_rule_title"),
                collapsible: false,
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("log_setting_window", "rotate_description")
                }, {
                    xtype: "syno_compositefield",
                    hideLabel: true,
                    items: [{
                        id: "use_del_by_cnt",
                        xtype: "syno_checkbox",
                        boxLabel: _LABS("log_setting_window", "count_rotation_desc"),
                        width: 220,
                        name: "use_del_by_cnt",
                        handler: this.onCheckBoxCheck
                    }, {
                        id: "del_cnt",
                        xtype: "syno_combobox",
                        name: "del_cnt",
                        width: 200,
                        mode: "local",
                        value: 1000000,
                        editable: false,
                        store: this.storeLogDelCntGet(),
                        forceSelection: true,
                        displayField: "display",
                        valueField: "value",
                        typeAhead: true,
                        triggerAction: "all",
                        lazyRender: true,
                        disabled: true
                    }]
                }, {
                    xtype: "syno_compositefield",
                    hideLabel: true,
                    items: [{
                        id: "use_del_by_span",
                        xtype: "syno_checkbox",
                        boxLabel: _LABS("log_setting_window", "date_rotation_desc"),
                        width: 220,
                        name: "use_del_by_span",
                        handler: this.onCheckBoxCheck
                    }, {
                        id: "del_days",
                        xtype: "syno_combobox",
                        name: "del_days",
                        width: 200,
                        mode: "local",
                        value: 30,
                        editable: false,
                        store: this.storeLogDelTimeGet(),
                        forceSelection: true,
                        displayField: "display",
                        valueField: "value",
                        typeAhead: true,
                        triggerAction: "all",
                        lazyRender: true,
                        disabled: true
                    }]
                }, {
                    xtype: "syno_button",
                    text: _LABS("log_setting_window", "clear_btn_text"),
                    scope: this,
                    handler: this.onClearClick
                }]
            }],
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _LABS("btn", "ok"),
                scope: this,
                handler: this.onOKClick
            }, {
                xtype: "syno_button",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.onCancelClick
            }]
        }, a);
        return this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments)
    },
    storeLogDelCntGet: function() {
        return new Ext.data.SimpleStore({
            autoDestroy: true,
            fields: ["value", "display"],
            data: SYNO.SDS.ActiveBackup.MaxLogCount
        })
    },
    storeLogDelTimeGet: function() {
        return new Ext.data.SimpleStore({
            autoDestroy: true,
            fields: ["value", "display"],
            data: SYNO.SDS.ActiveBackup.LogSpan
        })
    },
    onCheckBoxCheck: function(c, b) {
        var d = Ext.getCmp("del_cnt");
        var a = Ext.getCmp("del_days");
        if (Ext.getCmp("use_del_by_cnt").checked === true) {
            d.enable()
        } else {
            d.disable()
        }
        if (Ext.getCmp("use_del_by_span").checked === true) {
            a.enable()
        } else {
            a.disable()
        }
    },
    onOpen: function() {
        this.callParent(arguments);
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Log",
            method: "get_info",
            version: 1,
            params: {},
            scope: this,
            callback: this.onSetInfo
        })
    },
    checkValueValid: function(b, c) {
        var a = 0;
        switch (b) {
            case "retention_days":
                for (a = 0; a < SYNO.SDS.ActiveBackup.LogSpan.size(); a++) {
                    if (parseInt((c), 10) == SYNO.SDS.ActiveBackup.LogSpan[a][0]) {
                        return true
                    }
                }
                break;
            case "retention_counts":
                for (a = 0; a < SYNO.SDS.ActiveBackup.MaxLogCount.size(); a++) {
                    if (parseInt((c), 10) == SYNO.SDS.ActiveBackup.MaxLogCount[a][0]) {
                        return true
                    }
                }
                break;
            default:
                break
        }
        return false
    },
    onSetInfo: function(c, a) {
        if (c !== true) {
            this.clearStatusBusy();
            return
        }
        var b = a.retention_policy;
        if (b !== undefined) {
            if (b.retention_days !== undefined && this.checkValueValid("retention_days", b.retention_days)) {
                Ext.getCmp("use_del_by_span").setValue(true);
                Ext.getCmp("del_days").setValue(parseInt(b.retention_days, 10))
            }
            if (b.retention_counts !== undefined && this.checkValueValid("retention_counts", b.retention_counts)) {
                Ext.getCmp("use_del_by_cnt").setValue(true);
                Ext.getCmp("del_cnt").setValue(parseInt(b.retention_counts, 10))
            }
        }
        this.clearStatusBusy()
    },
    onOKClick: function() {
        var a = Ext.getCmp("use_del_by_cnt").checked === true ? Ext.getCmp("del_cnt").getValue() : 0;
        var b = Ext.getCmp("use_del_by_span").checked === true ? Ext.getCmp("del_days").getValue() : 0;
        this.fireEvent("save_setting", a, b);
        this.close()
    },
    onCancelClick: function() {
        this.close()
    },
    onClearClick: function() {
        var b = new SYNO.SDS.MessageBoxV5({
            owner: this.owner
        });
        var a = this;
        b.confirmDelete(_LABS("log", "log"), _LABS("warning", "confirm_clear_log"), function(c) {
            if (c == "yes") {
                a.fireEvent("send_log_clear")
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.View.LogPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = (a.task_id) ? a.task_id : -1;
        this.mode = a.mode;
        this.initActions();
        this.before_layout = true;
        this.callParent([this.fillConfig(a)])
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "viewready", function() {
            this.searchPanel.onReset()
        }, this, {
            single: true
        });
        this.mon(this.searchPanel, "search", this.onSearch, this);
        if (this.mode !== "task_detail") {
            this.mon(this.getView(), "refresh", this.bindClickEventOnCell, this)
        }
        this.addListener("rowclick", this.onRowClick, this);
        return a
    },
    fillConfig: function(c) {
        this.pageSize = 200;
        var e = this.createStore();
        var d = [{
            name: "key_word",
            display_string: _T("log", "attr_keyword") + _T("common", "colon")
        }];
        var f = [{
            name: "log_level",
            display_string: _LABS("log", "log_level") + _T("common", "colon"),
            data: [
                [SYNO.ActiveBackup.LogLevel.ALL, _LABS("log", "all_type")],
                [SYNO.ActiveBackup.LogLevel.INFO, _LABS("log", "info_type")],
                [SYNO.ActiveBackup.LogLevel.ERROR, _LABS("log", "error_type")],
                [SYNO.ActiveBackup.LogLevel.WARNING, _LABS("log", "warning_type")]
            ],
            default_value: SYNO.ActiveBackup.LogLevel.ALL
        }];
        this.searchPanel = new SYNO.SDS.ActiveBackup.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-sds-fs-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            filter_inputfield: d,
            filter_combobox: f,
            hidden: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackup.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            defaultType: "syno_button",
            owner: this,
            itemId: "tool_bar",
            items: [this.configButtons(c), "->", this.findField]
        });
        var g = new SYNO.ux.PagingToolbar({
            store: e,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            itemId: "log_tab",
            title: _LABS("log", "log"),
            tbar: b,
            cls: "synoabk-log-panel",
            store: e,
            loadMask: true,
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: g,
            viewConfig: {
                rowOverCls: "log-over",
                getRowClass: function(h, i) {
                    if (h.data.log_type === 0) {
                        return "info-type"
                    } else {
                        if (h.data.log_type === 1) {
                            return "error-type"
                        }
                    }
                }
            }
        };
        return Ext.apply(a, c)
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            setting: {
                text: _LABS("btn", "settings"),
                scope: this,
                handler: this.onSettingClick
            }
        })
    },
    configButtons: function(a) {
        var b = [];
        if (a.showSettingBtn !== false) {
            b.push(this.actions.get("setting"))
        }
        return b
    },
    createColumnModel: function(c) {
        var b = [{
            header: _LABS("log", "log_type"),
            dataIndex: "log_level",
            width: 100,
            sortable: false,
            id: "type",
            align: "center",
            renderer: (function(h, e, g) {
                var d, f;
                switch (h) {
                    case SYNO.ActiveBackup.LogLevel.ERROR:
                        d = "error";
                        f = _LABS("log", "error_type");
                        break;
                    case SYNO.ActiveBackup.LogLevel.WARNING:
                        d = "warning";
                        f = _LABS("log", "warning_type");
                        break;
                    case SYNO.ActiveBackup.LogLevel.INFO:
                        d = "info";
                        f = _LABS("log", "info_type");
                        break
                }
                return String.format('<span class="{0}">{1}</span>', d, Ext.util.Format.htmlEncode(f))
            }).createDelegate(this)
        }, {
            header: _LABS("log", "log_time"),
            dataIndex: "log_time",
            id: "time",
            width: 160,
            sortable: false,
            align: "center",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
        }, {
            header: _LABS("log", "log_description"),
            dataIndex: "log_type",
            width: 460,
            id: "description",
            sortable: false,
            renderer: (function(i, d, h) {
                var f = h.data;
                var g = SYNO.SDS.ActiveBackup.Utils.getLogString(f.log_type, f.other_params);
                var e = 'ext:qtip="' + Ext.util.Format.htmlEncode(g) + '"';
                if (d) {
                    d.attr = e;
                    if (this.mode !== "task_detail") {
                        d.css = "x-grid3-col-destination"
                    }
                }
                if (h.json.result_id > 0) {
                    g = '<div class="log_link_wrapper"><div class="log_link"></div></div><div ' + e + ">" + g + "</div>"
                } else {
                    g = '<div class="log_link_wrapper"></div><div ' + e + " >" + g + "</div>"
                }
                return g
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onActivate: function() {
        if (this.before_layout) {
            this.before_layout = false
        } else {
            this.searchPanel.onReset()
        }
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    bindClickEventOnCell: function() {
        Ext.select(".task").on("click", function(d, c) {
            c = Ext.get(c);
            var a = c.getAttribute("task_id");
            var b = c.getAttribute("backup_type");
            this.flyToTaskPage(b, a)
        }, this);
        Ext.select(".device").on("click", function(d, c) {
            c = Ext.get(c);
            var a = c.getAttribute("device_id");
            var b = c.getAttribute("backup_type");
            this.flyToDevicePage(b, a)
        }, this)
    },
    onSearch: function(a, b) {
        if (this.task_id !== -1) {
            b.task_id = this.task_id
        }
        this.getStore().baseParams = b;
        this.getBottomToolbar().moveFirst()
    },
    onSettingClick: function() {
        var a = new SYNO.ActiveBackup.View.LogSettingWindow({
            appWin: this.appWin,
            owner: this.owner,
            cls: "synoabk-log-setting-window"
        });
        a.on("send_log_clear", this._sendLogClear, this);
        a.on("save_setting", this.onSaveSetting, this);
        a.open()
    },
    onRowClick: function(b, a, f) {
        var d = this.getStore().getAt(a).json;
        if (d.result_id === 0) {
            return
        }
        var c = Ext.fly(f.getTarget());
        if (c && (c.hasClass("log_link"))) {
            this.openTaskHistory(d.result_id)
        }
    },
    openTaskHistory: function(a) {
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Log",
            method: "list_result",
            params: {
                filter: {
                    result_id: a
                }
            },
            version: 1,
            callback: function(d, c) {
                if (d === false) {
                    return
                }
                if (c.results.length !== 1) {
                    return
                }
                var b = new SYNO.ActiveBackup.View.LogDetailWindow.MainWindow({
                    appWin: this.appWin,
                    owner: this.owner,
                    result_id: a,
                    data: c.results[0],
                    width: 696,
                    height: 442
                });
                b.open()
            },
            scope: this
        })
    },
    flyToTaskPage: function(e, a) {
        var h = parseInt(e, 10);
        var d = parseInt(a, 10);
        switch (h) {
            case SYNO.ActiveBackup.BackupType.VM:
                this.appWin.selectPage("SYNO.ActiveBackup.PageVmBackup");
                break;
            case SYNO.ActiveBackup.BackupType.PC:
                this.appWin.selectPage("SYNO.ActiveBackup.PagePcBackup");
                break;
            case SYNO.ActiveBackup.BackupType.SERVER:
                this.appWin.selectPage("SYNO.ActiveBackup.PageServerBackup");
                break;
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                this.appWin.selectPage("SYNO.ActiveBackup.PageAgentlessBackup");
                break;
            default:
                console.log("backup type error, return");
                return
        }
        var g = this.appWin.getActivePage();
        var c = g.items.items[1];
        var b = c.getStore();
        b.on("load", function f(i, l, j) {
            var k = c.getSelectionModel();
            k.clearSelections();
            i.each(function(m, n) {
                if (m.json.task_id === d) {
                    k.selectRow(n)
                }
            });
            if (k.getSelections().length === 0) {
                this.appWin.getMsgBox().alert("", _LABS("warning", "no_task_exist"))
            }
        }, this, {
            single: true
        });
        g.setActiveTab(1)
    },
    flyToDevicePage: function(b, e) {
        var d = parseInt(b, 10);
        var f = parseInt(e, 10);
        switch (d) {
            case SYNO.ActiveBackup.BackupType.VM:
                this.appWin.selectPage("SYNO.ActiveBackup.PageVmBackup");
                break;
            case SYNO.ActiveBackup.BackupType.PC:
                this.appWin.selectPage("SYNO.ActiveBackup.PagePcBackup");
                break;
            case SYNO.ActiveBackup.BackupType.SERVER:
                this.appWin.selectPage("SYNO.ActiveBackup.PageServerBackup");
                break;
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                this.appWin.selectPage("SYNO.ActiveBackup.PageAgentlessBackup");
                break;
            default:
                console.log("backup type error, return");
                return
        }
        var g = this.appWin.getActivePage();
        var a = g.items.items[0];
        var i = a.getStore();
        a.setSelectedRecords([f]);
        if (d === SYNO.ActiveBackup.BackupType.VM) {
            var h = a.getView();
            h.fireEvent("mark_expand_device", f)
        } else {
            i.on("load", function c(j, l, k) {
                a.getView().clearSelections();
                j.each(function(m, n) {
                    if (m.json.device_id === f) {
                        a.getView().select(m);
                        if (a.getView().toggledItemIds.indexOf(f) === -1) {
                            a.getView().toggleSelectedItem()
                        }
                    }
                });
                if (a.getView().getSelectionCount() === 0) {
                    this.appWin.getMsgBox().alert("", _LABS("warning", "device_removed"))
                }
            }, this, {
                single: true
            })
        }
        g.setActiveTab(0)
    },
    _sendLogClear: function() {
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Log",
            method: "clear",
            version: 1,
            callback: function() {
                this.searchPanel.onReset()
            },
            scope: this
        })
    },
    onSaveSetting: function(a, b) {
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Log",
            method: "set_info",
            version: 1,
            params: {
                retention_policy: {
                    retention_counts: a,
                    retention_days: b
                }
            },
            scope: this
        })
    },
    createStore: function() {
        var b = {};
        if (this.task_id !== -1) {
            b.task_id = this.task_id
        }
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Log",
            method: "list_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["log_id", "log_level", "log_time", "log_type", "other_params", "backup_type"],
            totalProperty: "count",
            idProperty: "log_id",
            root: "logs",
            baseParams: b,
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.ActiveBackup.TaskDetail.SubProgressWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = Ext.apply({
            title: _LABS("common", "sub_progress_backingup"),
            closable: true,
            width: 600,
            height: 450,
            layout: "fit",
            resizable: false,
            cls: "task_sub_progress",
            items: this.getGrid(a)
        }, a);
        this.callParent([b])
    },
    onActivate: function() {
        this.startPolling()
    },
    onDeactivate: function() {
        this.stopPolling()
    },
    getGrid: function(a) {
        if (!this.grid) {
            this.grid = new SYNO.ux.GridPanel({
                enableHdMenu: false,
                enableColumnMove: false,
                store: this.getStore(a),
                colModel: this.getColModel(a),
                stateId: "SYNO.ActiveBackup.TaskDetail.SubProgressWindow.GridPanel",
                plugins: [new SYNO.SDS.ActiveBackup.GridStatePlugin()],
                viewConfig: {
                    trackResetOnLoad: false
                }
            })
        }
        return this.grid
    },
    getColModel: function(a) {
        return new Ext.grid.ColumnModel([{
            header: _LABS("filter_panel", "filter_panel_virtual_machine"),
            tooltip: _LABS("filter_panel", "filter_panel_virtual_machine"),
            dataIndex: "device_name",
            width: 150,
            renderer: function(b, c) {
                if (c) {
                    c.attr += 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"'
                }
                return Ext.util.Format.htmlEncode(b)
            }
        }, {
            header: _LABS("common", "status"),
            tooltip: _LABS("common", "status"),
            dataIndex: "status",
            width: 450,
            renderer: function(b) {
                return b
            }
        }])
    },
    getStore: function(a) {
        if (!this.store) {
            this.store = new SYNO.API.JsonStore({
                idProperty: "device_id",
                fields: ["device_name", "status"]
            })
        }
        return this.store
    },
    startPolling: function() {
        this.getEl().mask(_T("common", "loading"), "x-mask-loading");
        if (this._polling_id) {
            return
        }
        this._polling_id = this.pollReg({
            webapi: {
                api: "SYNO.ActiveBackup.Task",
                version: 1,
                method: "list",
                autoLoad: false,
                appWindow: false,
                params: {
                    filter: {
                        task_id: this.task_id
                    },
                    load_status: true,
                    load_devices: true,
                    load_device_result: true
                }
            },
            interval: 1,
            immediate: true,
            scope: this,
            status_callback: this.onPollingDone
        })
    },
    stopPolling: function() {
        if (!this._polling_id) {
            return
        }
        this.pollUnreg(this._polling_id);
        this._polling_id = null;
        this.getEl().unmask()
    },
    onPollingDone: function(j, g, f, b) {
        this.getEl().unmask();
        if (!j) {
            return
        }
        var k = {};
        var e = g.tasks[0];
        var a = {
            action: SYNO.SDS.ActiveBackup.JobAction.BACKUP,
            status: SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK
        };
        var i = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(e.backup_type, a, false);
        Ext.each(e.devices, function(m) {
            var l = {
                device_name: m.host_name,
                device_id: m.device_id,
                status: i
            };
            k[m.device_id] = l
        });
        if (Ext.isEmpty(e.devices_result)) {
            this.getStore().loadData(Object.values(k));
            return
        }
        Object.keys(e.devices_result).each(function(n) {
            var l = e.devices_result[n];
            var m = k[n];
            if (m && l.status !== SYNO.SDS.ActiveBackup.ResultStatus.INCOMPLETE) {
                m.status = SYNO.SDS.ActiveBackup.Utils.renderResultStatus(l.status);
                m.completed = true
            }
        });
        var h = "";
        if (Ext.isEmpty(e.progress)) {
            h = _LABS("job_action", "backup") + _LABS("common", "status");
            Object.values(k).each(function(l) {
                if (l.status === i) {
                    l.status = ""
                }
            });
            this.stopPolling()
        } else {
            if (e.progress.action === SYNO.SDS.ActiveBackup.JobAction.BACKUP) {
                h = _LABS("common", "sub_progress_backingup");
                Ext.each(e.progress.sub_jobs, function(m) {
                    Ext.copyTo(m, e.progress, "action,status");
                    var l = k[m.device_id];
                    if (l && !l.completed) {
                        l.status = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(e.backup_type, m, true)
                    }
                })
            } else {
                if (e.progress.action === SYNO.SDS.ActiveBackup.JobAction.VERIFY) {
                    h = _LABS("common", "sub_progress_verifying");
                    var d = e.progress.sub_jobs[0];
                    d.percentage = d.sub_percentage;
                    Ext.copyTo(d, e.progress, "action,status");
                    var c = k[d.device_id];
                    if (c) {
                        c.status = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(e.backup_type, d, true)
                    }
                }
            }
        }
        this.setTitle(h);
        this.getStore().loadData(Object.values(k))
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    }
});
Ext.define("SYNO.ActiveBackup.TaskDetail.Status.InfoPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            itemId: "form_panel",
            cls: "form_panel",
            items: [{
                xtype: "displayfield",
                fieldLabel: _LABS("detail_info_window", "task_status"),
                itemId: "status",
                htmlEncode: false,
                update: function(d, e, c) {
                    var f = this.el.first("a");
                    if (!Ext.isEmpty(f)) {
                        this.mun(f, "click", this.createMoreInfo, this)
                    }
                    SYNO.ux.DisplayField.superclass.update.call(this, d, e, c);
                    f = this.el.first("a");
                    if (!Ext.isEmpty(f)) {
                        this.mon(f, "click", this.createMoreInfo, this)
                    }
                },
                createMoreInfo: function(d) {
                    d.preventDefault();
                    var c = new SYNO.ActiveBackup.TaskDetail.SubProgressWindow({
                        owner: this.findWindow(),
                        task_id: a.task_id
                    });
                    a.owner.onDeactivate();
                    c.on("close", a.owner.onActivate, a.owner);
                    c.open()
                },
                listeners: {
                    afterrender: function(c) {
                        var d = c.el.first("a");
                        if (!Ext.isEmpty(d)) {
                            this.mon(d, "click", this.createMoreInfo, this)
                        }
                    }
                }
            }, {
                xtype: "displayfield",
                fieldLabel: _LABS("component", "task_source"),
                itemId: "source"
            }, {
                xtype: "displayfield",
                fieldLabel: _LABS("component", "task_destination"),
                itemId: "destination"
            }, {
                xtype: "displayfield",
                fieldLabel: _LABS("detail_info_window", "execute_time"),
                itemId: "execute_time"
            }, {
                xtype: "displayfield",
                fieldLabel: _LABS("detail_info_window", "transfered_size"),
                itemId: "transfered_size"
            }, {
                xtype: "displayfield",
                fieldLabel: _LABS("tasklist", "duration"),
                itemId: "duration"
            }]
        }, a);
        return this.callParent([b])
    }
});
Ext.define("SYNO.ActiveBackup.TaskDetail.Status.HistogramPanel", {
    extend: "Ext.BoxComponent",
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin,owner,backupType");
        var b = Ext.apply({
            cls: "syno-activebackup-transfered-histogram",
            tpl: this.createTpl()
        }, a);
        this.callParent([b])
    },
    createTpl: function() {
        if (this.tpl) {
            return this.tpl
        }
        this.tpl = new Ext.XTemplate('<div id="{y_label_id}" class="axis-y-label">', "{y_label:htmlEncode}", "</div>", '<div id="{toolbar_id}" class="syno-activebackup-chart-toolbar">', "</div>", '<div class="chart">', '<div id="{trend_chart_id}" class="syno-activebackup-trend-histogram">', "</div>", "</div>");
        return this.tpl
    },
    onResize: function(d, b, a, c) {
        this.callParent(arguments);
        this.trend_chart.onResize(d, b, a, c)
    },
    onRender: function(b) {
        this.callParent(arguments);
        this.y_label_id = Ext.id();
        this.toolbar_id = Ext.id();
        this.trend_chart_id = Ext.id();
        this.tpl.append(this.getEl(), {
            y_label_id: this.y_label_id,
            y_label: _LABS("overview", "transfer_size") + " (GB)",
            toolbar_id: this.toolbar_id,
            trend_chart_id: this.trend_chart_id
        });
        var a = [this.backupType];
        this.trend_chart = new SYNO.SDS.ActiveBackup.Overview.TransferTrendChart({
            typeList: a,
            taskId: this.task_id,
            renderTo: this.trend_chart_id,
            owner: this,
            height: 240
        });
        this.mon(this.trend_chart, "draw", this.trendChartDataUpdate, this);
        this.trend_option = [
            [SYNO.ActiveBackup.TimePeriod.DAY, _LABS("overview", "chart_period_day")],
            [SYNO.ActiveBackup.TimePeriod.HOUR, _LABS("overview", "chart_period_hour")]
        ];
        this.tbar = new Ext.Toolbar({
            renderTo: this.toolbar_id,
            items: ["->", {
                xtype: "syno_combobox",
                displayField: "display",
                valueField: "value",
                itemId: "data_period",
                width: 180,
                value: SYNO.ActiveBackup.TimePeriod.DAY,
                store: new Ext.data.ArrayStore({
                    fields: ["value", "display"],
                    data: this.trend_option
                }),
                listeners: {
                    beforeSelect: {
                        scope: this,
                        fn: function(f, c, d) {
                            var e = c.get("value");
                            if (e == f.getValue()) {
                                return
                            }
                            this.trend_chart.switchPeriod(c.get("value"))
                        }
                    }
                }
            }, {
                xtype: "tbspacer",
                width: 30
            }]
        })
    },
    trendChartDataUpdate: function() {
        var a = this.trend_chart.getUnit();
        Ext.get(this.y_label_id).update(_LABS("overview", "transfer_size") + " (" + a + ")")
    },
    reload: function() {
        this.trend_chart.reload()
    }
});
Ext.define("SYNO.ActiveBackup.TaskDetail.StatusPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.previous_polling_result = null;
        this.previous_polling_msec = 0;
        this.form_panel = this.createInfoPanel(a);
        this.histogram_panel = this.createHistogramPanel(a);
        var b = Ext.apply({
            cls: "task_detail_information",
            items: [this.form_panel, this.histogram_panel]
        }, a);
        this._mask_owner = [];
        this._polling_id = null;
        return this.callParent([b])
    },
    createInfoPanel: function(a) {
        return new SYNO.ActiveBackup.TaskDetail.Status.InfoPanel({
            itemId: "information",
            region: "north",
            owner: this,
            task_id: a.task_id,
            backupType: a.backupType,
            height: 170
        })
    },
    createHistogramPanel: function(a) {
        return new SYNO.ActiveBackup.TaskDetail.Status.HistogramPanel({
            itemId: "histogram",
            region: "center",
            owner: this,
            task_id: a.task_id,
            backupType: a.backupType
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this);
        this.mon(this, "destroy", this.onDestroy, this)
    },
    onActivate: function() {
        this.startPolling(true, true)
    },
    onDeactivate: function() {
        this.stopPolling()
    },
    onDestroy: function() {
        this.stopPolling()
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    startPolling: function(a, b) {
        if (a) {
            this.maskWindow("polling")
        }
        if (this._polling_id) {
            return
        }
        this._polling_id = this.pollReg({
            webapi: {
                api: "SYNO.ActiveBackup.Task",
                method: "list",
                version: 1,
                params: {
                    filter: {
                        task_id: this.task_id
                    },
                    load_status: true,
                    load_result: true,
                    load_devices: true
                }
            },
            interval: 1,
            immediate: b,
            scope: this,
            status_callback: this.onPollingDone
        })
    },
    stopPolling: function() {
        if (!this._polling_id) {
            return
        }
        this.pollUnreg(this._polling_id);
        this._polling_id = null;
        this.unmaskWindow("polling")
    },
    onPollingDone: function(e, a, d, b) {
        this.unmaskWindow("polling");
        if (!e) {
            return
        }
        var c = this.prepareData(a.tasks[0]);
        this.displayData(c)
    },
    prepareData: function(b) {
        var d = {};

        function c(e) {
            if (e.progress) {
                var f = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(e.backup_type, e.progress, false);
                if (e.backup_type === SYNO.ActiveBackup.BackupType.VM && e.progress.status === SYNO.SDS.ActiveBackup.JobStatus.RUNNING && (e.progress.action === SYNO.SDS.ActiveBackup.JobAction.BACKUP || e.progress.action === SYNO.SDS.ActiveBackup.JobAction.VERIFY)) {
                    f += '<a style="padding-left:6px;" href="">' + _LABS("agentbk", "btn_more") + "</a>"
                }
                return f
            } else {
                if (e.last_result) {
                    return SYNO.SDS.ActiveBackup.Utils.renderResultStatus(e.last_result.status)
                } else {
                    return _LABS("component", "task_not_backup")
                }
            }
        }

        function a(e) {
            return e.devices.map(function(f) {
                return f.host_name
            }).join(", ")
        }
        if (this.previous_polling_result && this.previous_polling_result.progress && !b.progress) {
            this.histogram_panel.reload()
        }
        d.status = c(b);
        d.source = a(b);
        d.destination = SYNO.SDS.ActiveBackup.Utils.renderTargetPath(b);
        d.execute_time = SYNO.SDS.ActiveBackup.Utils.renderTime((b.progress || b.last_result || {}).time_start);
        d.duration = SYNO.SDS.ActiveBackup.Utils.renderDuration((b.progress || b.last_result || {}));
        d.transfered_size = this._renderSizeByTask(b);
        this.previous_polling_result = b;
        this.previous_polling_msec = Date.now();
        return d
    },
    _renderSizeByTask: function(b) {
        if (b.progress) {
            var a = SYNO.SDS.ActiveBackup.Utils.renderSize(b.progress.transfered_bytes);
            var d = 0;
            if (b.backup_type === SYNO.ActiveBackup.BackupType.VM) {
                d = b.progress.transfered_rate
            } else {
                if (this.previous_polling_result && this.previous_polling_result.progress) {
                    d = (b.progress.transfered_bytes - this.previous_polling_result.progress.transfered_bytes) / (Date.now() - this.previous_polling_msec) * 1000
                }
            }
            var c = a;
            if (b.progress.total_bytes) {
                c += "/" + SYNO.SDS.ActiveBackup.Utils.renderSize(b.progress.total_bytes)
            }
            if (d > 0) {
                c += " (" + SYNO.SDS.ActiveBackup.Utils.renderSize(d) + "/s)"
            }
            return c
        } else {
            return SYNO.SDS.ActiveBackup.Utils.renderSize((b.last_result || {}).transfered_bytes)
        }
    },
    displayData: function(a) {
        Ext.each(Object.keys(a), function(c) {
            var b = a[c];
            if (c !== "status") {
                b = String.format('<span ext:qtip="{0}">{1}</span>', SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(b), Ext.util.Format.htmlEncode(b))
            }
            this.form_panel.getComponent(c).update(b)
        }, this)
    }
});
Ext.define("SYNO.ActiveBackup.TaskDetailWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            title: _LABS("common", "detail") + ": " + a.record.get("task_name"),
            closable: true,
            resizable: false,
            useStatusBar: false,
            layout: "fit",
            width: 650,
            height: 500,
            items: [{
                xtype: "syno_tabpanel",
                itemId: "detail_info_window",
                activeTab: 0,
                cls: "tabpanel",
                deferredRender: false,
                items: this.getTabs(a)
            }]
        }, a);
        return this.callParent([b])
    },
    getTabs: function(a) {
        this.statusPanel = new SYNO.ActiveBackup.TaskDetail.StatusPanel({
            owner: this,
            title: _LABS("common", "status"),
            itemId: "task_status",
            task_id: a.record.id,
            backupType: a.backupType
        });
        this.logPanel = new SYNO.ActiveBackup.View.LogPanel({
            stateId: "SYNO.ActiveBackup.TaskDetailWindow.LogPanel",
            owner: this,
            title: _LABS("detail_info_window", "log_information"),
            itemId: "task_log",
            task_id: a.record.id,
            mode: "task_detail",
            showSettingBtn: false
        });
        return [this.statusPanel, this.logPanel]
    }
});
Ext.define("SYNO.ActiveBackup.VM.TreePanel", {
    extend: "SYNO.ux.TreePanel",
    constructor: function(a) {
        this.callParent([Ext.apply({
            useArrows: true,
            rootVisible: false,
            useGradient: false,
            draggable: false,
            loader: this.createRootLoader(),
            root: new Ext.tree.AsyncTreeNode({
                path: "ROOTPATH"
            })
        }, a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this._maskCnt = 0;
        this._mask = new Ext.LoadMask(this.getEl());
        this.mon(this, "beforeload", function() {
            this.maskWindow()
        }, this);
        this.mon(this, "load", function() {
            this.unmaskWindow()
        }, this)
    },
    maskWindow: function() {
        if (this._maskCnt === 0) {
            this.isLoading = true;
            this._mask.show()
        }
        this._maskCnt++
    },
    unmaskWindow: function() {
        if (this._maskCnt === 1) {
            this.isLoading = false;
            this._mask.hide()
        }
        this._maskCnt--
    },
    isTreeEmpty: function() {
        return this.inventoryIsEmpty
    },
    createRootLoader: function() {
        var a = this;
        return new SYNO.API.TreeLoader({
            api: "SYNO.ActiveBackup.Inventory",
            method: "list",
            version: 1,
            dataroot: "data",
            listeners: {
                loadexception: function(c, b, d) {
                    SYNO.ActiveBackup.Util.reportError.call(a, JSON.parse(d.responseText).error)
                },
                load: function(e, c, d) {
                    var b = JSON.parse(d.responseText).data;
                    a.inventoryIsEmpty = (b.size() === 0) ? true : false
                }
            },
            createNode: function(b) {
                if (b.status) {
                    return false
                }
                a.setIconLeaf(b);
                a.setChecked(b);
                b.path = b.inventory_id;
                b.text = b.host_name;
                b.uiProvider = SYNO.ActiveBackup.VM.TriTreeNodeUI;
                b.loader = a.createNodeLoader(b.inventory_id);
                return Ext.tree.TreeLoader.prototype.createNode.call(this, b)
            }
        })
    },
    createNodeLoader: function(b) {
        var a = this;
        return new SYNO.API.TreeLoader({
            api: "SYNO.ActiveBackup.Inventory",
            method: "list_node",
            version: 1,
            dataroot: "data",
            listeners: {
                beforeload: function(d, c) {
                    this.baseParams = {
                        inventory_id: b,
                        view_type: a.viewType,
                        parent_id: (c.attributes.path === b ? "" : c.attributes.path)
                    }
                },
                load: function(d, c) {
                    c.eachChild(function(e) {
                        if (e.attributes.tooltip !== "") {
                            SYNO.SDS.Utils.AddTip(e.getUI().getTextEl(), e.attributes.tooltip)
                        }
                    })
                },
                loadexception: function(d, c, e) {
                    SYNO.ActiveBackup.Util.reportError.call(a, JSON.parse(e.responseText).error)
                }
            },
            createNode: function(c) {
                a.setTooltip(c);
                a.setIconLeaf(c);
                a.setChecked(c);
                a.setNodeName(c);
                a.setNodeState(c);
                a.setCheckboxTip(c);
                c.path = c.id;
                c.id = Ext.id();
                c.uiProvider = SYNO.ActiveBackup.VM.TriTreeNodeUI;
                return Ext.tree.TreeLoader.prototype.createNode.call(this, c)
            }
        })
    },
    isSelectedValid: function() {
        var a = this.getSelectionModel().getSelectedNode();
        return a && a.attributes.type === this.viewType
    },
    getCheckedNodes: function() {
        var a = [];
        if (!this.isLoading) {
            this.getRootNode().eachChild(function(b) {
                b.cascade(function(c) {
                    if (c.getUI().getCheckValue() === true) {
                        a.push(this.getCheckedNodeData(c))
                    }
                }, this)
            }, this)
        }
        return a
    },
    setCheckedNodes: function(c, b, a) {
        var d = c.map(this.getCheckedNodeParam, this);
        this.getSelectionModel().clearSelections(true);
        this.getRootNode().reload(function() {
            var e = d.map(function(f) {
                return {
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "get_node_path",
                    version: 1,
                    params: Ext.apply({
                        view_type: this.viewType
                    }, f)
                }
            }, this);
            this.maskWindow();
            this.sendWebAPI({
                compound: {
                    mode: "parallel",
                    params: e
                },
                scope: this,
                callback: function(h, f) {
                    this.unmaskWindow();
                    var g = [];
                    Ext.each(f.result, function(j, i) {
                        var k = d[i];
                        if (j.error) {
                            j.error.errors.params.name = k.name ? "[" + k.name + "]" : ""
                        } else {
                            g[i] = "/ROOTPATH/" + k.inventory_id + j.data.path
                        }
                    });
                    if (!h || f.has_fail) {
                        SYNO.ActiveBackup.Util.reportError.call(this, f)
                    }
                    Ext.each(g, function(k, i) {
                        var j = d[i];
                        this.selectPath(k, "path", function(m, l) {
                            if (a) {
                                this.getRootNode().cascade(function(n) {
                                    if (n.attributes.path === j.parent_id || n.attributes.type === this.viewType) {
                                        return false
                                    }
                                    var o = g.find(function(p) {
                                        return (p + "/").startsWith(n.getPath("path") + "/")
                                    });
                                    if (o === undefined) {
                                        n.getUI().hide();
                                        return false
                                    }
                                }, this)
                            }
                            if (!b && m && l.getUI().getCheckValue() === false) {
                                l.getUI().setCheckValue(true)
                            }
                        }.createDelegate(this))
                    }, this)
                }
            })
        }, this)
    },
    setTooltip: function(a) {
        a.tooltip = ""
    },
    setChecked: function(a) {
        a.checked = undefined
    },
    getCheckedNodeData: function(a) {
        return a.attributes
    },
    getCheckedNodeParam: function(a) {
        return a
    },
    setNodeName: function(a) {
        a.text = a.name.replace(/\.+$/, "")
    },
    setNodeState: function(a) {
        a.disabled = false
    },
    setCheckboxTip: function(a) {
        a.checkboxTip = ""
    },
    checkNotMigratable: function(a) {
        if (this.blCheckMigratable !== true) {
            return false
        }
        if (Ext.isEmpty(a.migratable)) {
            return false
        }
        return !SYNO.SDS.ActiveBackup.Utils.isVmMigratable(a.migratable)
    },
    setIconLeaf: function(a) {
        switch (a.type) {
            case "vim.Datacenter":
                a.iconCls = "vmbk-datacenter";
                a.leaf = false;
                break;
            case "vim.HostSystem":
                a.iconCls = this.checkNotMigratable(a) ? "vmbk-no-migratable-host" : "vmbk-host";
                a.leaf = (["vim.Datastore", "vim.Network"].indexOf(this.viewType) === -1);
                break;
            case "vim.Network":
                a.iconCls = "vmbk-network";
                a.leaf = true;
                break;
            case "vim.Datastore":
                a.iconCls = "vmbk-datastore";
                a.leaf = true;
                break;
            case "vim.ResourcePool":
                a.iconCls = "vmbk-resourcepool";
                a.leaf = false;
                break;
            case "vim.VirtualMachine":
                a.iconCls = "vmbk-vm-" + (a.powered_on ? "online" : "offline");
                a.leaf = true;
                break;
            case "vim.ComputeResource":
                a.iconCls = this.checkNotMigratable(a) ? "vmbk-no-migratable-host" : "vmbk-host";
                a.leaf = false;
                break;
            case "vim.ClusterComputeResource":
                a.iconCls = "vmbk-cluster";
                a.leaf = false;
                break;
            case "vim.Folder":
                a.iconCls = "vmbk-folder";
                a.leaf = false;
                break;
            case "vim.VirtualApp":
                a.iconCls = "vmbk-vapp-" + (a.started ? "started" : "stopped");
                a.leaf = false;
                break;
            default:
                a.iconCls = "vmbk-vcenter";
                a.leaf = false;
                break
        }
    }
});
Ext.define("SYNO.ActiveBackup.VM.TriTreeNodeUI", {
    extend: "Ext.tree.TreeNodeUI",
    computeValueMaxWidth: function(a) {
        if (Ext.isEmpty(a)) {
            return ""
        }
        var d = a.ui.getEl();
        var c = d.getWidth();
        var b = d.querySelector(".x-tree-node-el");
        if (Ext.isEmpty(b)) {
            return ""
        }
        var e = 0;
        Ext.each(b.childElements(), function(f) {
            e += f.getWidth() + 3;
            if (f.hasClassName("x-tree-node-icon")) {
                e += (f.getWidth() + 3) * 4;
                return false
            }
        });
        return "max-width: " + (c - e) + "px;"
    },
    renderElements: function(g, m, l, o) {
        this.indentMarkup = g.parentNode ? g.parentNode.ui.getChildIndent() : "";
        var b = this.computeValueMaxWidth(g.parentNode);
        var q = m.checkboxTip ? ("ext:qtip='" + SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(m.checkboxTip) + "'") : "";
        var p = "ext:qtip='" + SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(g.text) + "'";
        var i = Ext.isBoolean(m.checked) || m.checked === "gray",
            h = Ext.util.Format.htmlEncode,
            f = m.input,
            d, c = this.getHref(m.href),
            e = ['<li class="x-tree-node vmbk-tri-tree-node"><div ext:tree-node-id="', h(g.id), '" class="x-tree-node-el x-tree-node-leaf x-unselectable ', m.cls, '" unselectable="on">', '<span class="x-tree-node-indent">', this.indentMarkup, "</span>", '<img alt="" src="', this.emptyIcon, '" class="x-tree-ec-icon x-tree-elbow" />', i ? ('<img alt="" src="' + this.emptyIcon + '" class="vmbk-tri-tree-node-cb syno-ux-checkbox-icon" ' + q + "/>") : "", '<img alt="" src="', m.icon || this.emptyIcon, '" class="x-tree-node-icon', (m.icon ? " x-tree-node-inline-icon" : ""), (m.iconCls ? " " + m.iconCls : ""), '" unselectable="on" ', ((m.icon || m.iconCls) ? "" : 'style="display: none;"') + "/>", '<a hidefocus="on" class="x-tree-node-anchor" href="', c, '" tabIndex="1" ', m.hrefTarget ? ' target="' + m.hrefTarget + '"' : "", '><span unselectable="on" class="x-tree-node-item-text" style="', b, '" ', p, " >", h(g.text), "</span></a>", "</div>", '<ul class="x-tree-node-ct" style="display:none;"></ul>', "</li>"].join("");
        if (o !== true && g.nextSibling && (d = g.nextSibling.ui.getEl())) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin", d, e)
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", l, e)
        }
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var k = this.elNode.childNodes;
        var j = 0;
        this.indentNode = k[j++];
        this.ecNode = k[j++];
        if (i) {
            this.checkbox = k[j++]
        }
        this.iconNode = k[j++];
        this.anchor = k[j++];
        this.textNode = this.anchor.firstChild;
        if (f) {
            this.createInputField(f, m, this.elNode);
            j++
        }
        if (i) {
            this.syncCheckCssClass()
        }
        g.on("disabledchange", this.onDisabled, this)
    },
    onIdChange: function(b) {
        var a = Ext.util.Format.htmlEncode;
        if (this.rendered) {
            this.elNode.setAttribute("ext:tree-node-id", a(b))
        }
    },
    createInputField: function(b, a, c) {
        var d = b;
        if (Ext.isObject(b)) {
            this.inputConfig = Ext.apply({}, b);
            d = b.xtype || "textfield";
            delete b.xtype
        } else {
            this.inputConfig = {}
        }
        if (Ext.isDefined(a.value)) {
            this.inputConfig.value = a.value
        }
        this.inputConfig.renderTo = c;
        switch (d) {
            case "textfield":
                this.input = new SYNO.ux.TextField(this.inputConfig);
                break;
            case "numberfield":
                this.input = new SYNO.ux.NumberField(this.inputConfig);
                break
        }
    },
    initEvent: function() {
        var a = this.callParent(arguments);
        if (this.checkbox) {
            this.initCheckEvent()
        }
        return a
    },
    isChecked: function() {
        return this.getCheckValue()
    },
    isDisabled: function() {
        var a = this.node;
        return (true === a.disabled)
    },
    toggleCheck: function() {
        var a = this.checkbox;
        var b = true;
        if (true === this.node.disabled) {
            return
        }
        if (a) {
            this.setCheckValue(!this.getCheckValue(), b)
        }
    },
    onClick: function(a) {
        if (a.getTarget(".x-form-field")) {
            return
        }
        if (a.getTarget(".vmbk-tri-tree-node-cb")) {
            this.toggleCheck()
        }
        return this.callParent(arguments)
    },
    onDblClick: function(a) {
        a.preventDefault();
        if (this.disabled) {
            return
        }
        if (this.fireEvent("beforedblclick", this.node, a) !== false) {
            if (!this.animating && this.node.isExpandable()) {
                this.node.toggle()
            }
            this.fireEvent("dblclick", this.node, a)
        }
    },
    onDisabled: function(b, a) {
        if (this.input) {
            if (a) {
                this.input.disable()
            } else {
                this.input.enable()
            }
        }
        if (this.checkbox) {
            if (a) {
                this.checkbox.addClassName("syno-ux-cb-disabled")
            } else {
                this.checkbox.removeClassName("syno-ux-cb-disabled")
            }
        }
    },
    onCheckChange: function(a) {
        this.syncCheckCssClass();
        this.fireEvent("checkchange", this.node, this.getCheckValue(), a)
    },
    isValid: function() {
        if (this.node.disabled) {
            return true
        }
        if (this.input && !this.input.isValid()) {
            return false
        }
        return true
    },
    getInputValue: function() {
        if (!this.input || this.disabled) {
            return undefined
        }
        return this.input.getValue()
    },
    setInputValue: function(a) {
        if (!this.input) {
            return
        }
        this.input.setValue(a)
    },
    getCheckValue: function() {
        return this.node.attributes.checked
    },
    setCheckValue: function(a, b) {
        if (a === this.getCheckValue()) {
            return
        }
        if (a === "false" || a === "off" || a === "0") {
            a = false
        } else {
            if (a === "gray") {
                a = "gray"
            } else {
                a = (a ? true : false)
            }
        }
        if (false === b && true === this.node.attributes.is_user_modify && true === this.node.attributes.checked && false === a) {} else {
            this.node.attributes.checked = a;
            this.node.attributes.is_user_modify = a && b
        }
        this.onCheckChange(b)
    },
    syncCheckCssClass: function() {
        var b = this.getCheckValue();
        var a = this.checkbox;
        if (!a) {
            return
        }
        Ext.each(["checked", "grayed", "disabled"], function(c) {
            this.checkbox.removeClassName("syno-ux-cb-" + c)
        }, this);
        if (b === true) {
            this.checkbox.addClassName("syno-ux-cb-checked")
        } else {
            if (b === "gray") {
                this.checkbox.addClassName("syno-ux-cb-grayed")
            }
        }
        if (this.node.disabled) {
            this.checkbox.addClassName("syno-ux-cb-disabled")
        }
    },
    initCheckEvent: function() {
        this.checkbox.addListener("mouseover", this.onCheckMouseover, this);
        this.checkbox.addListener("mouseout", this.onCheckMouseout, this);
        this.checkbox.addListener("focus", this.onCheckIconfocus, this);
        this.checkbox.addListener("blur", this.onCheckIconblur, this)
    },
    onCheckMouseover: function() {
        this.checkbox.addClassName("syno-ux-cb-hover")
    },
    onCheckMouseout: function() {
        this.checkbox.removeClassName("syno-ux-cb-hover")
    },
    onCheckIconfocus: function() {
        this.checkbox.addClassName("syno-ux-cb-focus")
    },
    onCheckIconblur: function() {
        this.checkbox.removeClassName("syno-ux-cb-focus")
    }
});
Ext.define("SYNO.ActiveBackup.Restore.ConfigStep", {
    extend: "SYNO.ux.Panel",
    fields: [],
    showCheckColumn: false,
    showCheckedOnly: false,
    constructor: function(a) {
        this.callParent([Ext.apply({
            layout: "fit"
        }, a)])
    },
    initComponent: function() {
        this.callParent(arguments);
        if (this.owner.singleMode) {
            this.add(this.singleModeItem = this.createItem())
        } else {
            var c = [],
                a = [],
                b = this;
            if (this.showCheckColumn) {
                var d = new SYNO.ux.EnableColumn(this.owner.columns.checked);
                c.push(d);
                a.push(d)
            }
            Ext.each(this.fields, function(h, e) {
                var f = this.owner.columns[h];
                var g = Ext.apply({}, f);
                if (e === 0) {
                    g.renderer = function(j, k, i) {
                        if (SYNO.SDS.ActiveBackup.Utils.isEmpty(i.get("version"))) {
                            return f.renderer(j, k)
                        }
                        return f.renderer(j, k) + '<i class="config-browse"></i>'
                    }
                } else {
                    if (e === (this.fields.length - 1)) {
                        g.renderer = function(i, j) {
                            if (j) {
                                j.attr = 'style="width:calc(100% - 50px);"'
                            }
                            return f.renderer(i, j)
                        }
                    }
                }
                c.push(g)
            }, this);
            this.add(this.grid = new SYNO.ux.GridPanel({
                store: this.owner.store,
                plugins: a,
                colModel: new Ext.grid.ColumnModel(c),
                selModel: new Ext.grid.RowSelectionModel({
                    singleSelect: true
                }),
                viewConfig: {
                    markDirty: false
                },
                listeners: {
                    rowclick: function(e, h, g) {
                        var f = Ext.fly(g.target);
                        if (f.hasClass("config-browse")) {
                            this.openModal()
                        }
                    },
                    rowdblclick: function(e, h, g) {
                        var f = Ext.fly(e.getView().getRow(h));
                        if (f.child(".config-browse")) {
                            this.openModal()
                        }
                    }
                },
                openModal: function() {
                    b.owner.currDeviceId = this.getSelectionModel().getSelected().get("device_id");
                    new SYNO.ActiveBackup.Restore.ConfigModal({
                        owner: b.owner,
                        title: b.headline,
                        getItem: b.getItem,
                        isValid: b.isValid,
                        loadData: b.loadData,
                        saveData: b.saveData,
                        createItem: b.createItem,
                        checkCanSave: b.checkCanSave,
                        onClose: function() {
                            b.owner.currDeviceId = undefined;
                            b.fireEvent("checkvalid", b)
                        }
                    }).open()
                }
            }));
            this.getGrid = function() {
                return this.grid
            };
            this.validate = function() {
                return this.owner.validateFields(this.fields)
            };
            this.addListener("show", function() {
                if (this.showCheckedOnly) {
                    this.owner.store.filter("checked", true)
                } else {
                    this.owner.store.clearFilter()
                }
                this.grid.getColumnModel().setHidden(0, this.isHideCheckColumn())
            })
        }
    },
    preload: function() {
        this.owner.getButton("next").disable();
        if (this.owner.singleMode) {
            this.initData(this.loadData)
        } else {
            var a = this.getGrid().getView();
            this.owner.isLoading = true;
            a.refresh();
            this.initData(function() {
                this.fireEvent("checkvalid", this);
                this.owner.isLoading = false;
                a.refresh()
            })
        }
    },
    getNext: function() {
        if (this.owner.singleMode) {
            this.saveData()
        }
        this.checkData(function() {
            this.owner.goNext(this.nextId);
            this.owner.getStep(this.nextId).preload()
        });
        return false
    },
    checkCanSave: function() {
        var a = this.owner.singleMode ? this.owner.getButton("next") : this.fbar.getComponent("apply");
        if (this.isValid()) {
            a.enable()
        } else {
            a.disable()
        }
    },
    getItem: function() {
        return this.singleModeItem
    },
    createItem: function() {
        return new SYNO.ux.Panel()
    },
    isValid: function() {
        return true
    },
    isHideCheckColumn: function() {
        return false
    },
    initData: function(a) {
        a.call(this)
    },
    checkData: function(a) {
        a.call(this)
    },
    loadData: Ext.emptyFn,
    saveData: Ext.emptyFn
});
Ext.define("SYNO.ActiveBackup.Restore.ConfigModal", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.callParent([Ext.apply(a, {
            layout: "fit",
            padding: "0 20px",
            width: 550,
            height: 480,
            resizable: false
        })])
    },
    initComponent: function() {
        this.callParent(arguments);
        this.addButton({
            xtype: "syno_button",
            itemId: "apply",
            btnStyle: "blue",
            disabled: true,
            text: _LABS("common", "apply"),
            scope: this,
            handler: this.onApply
        });
        this.addButton({
            xtype: "syno_button",
            itemId: "cancel",
            btnStyle: "grey",
            text: _LABS("btn", "cancel"),
            scope: this,
            handler: this.close
        });
        this.add(this.singleModeItem = this.createItem())
    },
    onShow: function() {
        this.loadData()
    },
    onApply: function() {
        this.saveData();
        this.close()
    }
});
Ext.define("SYNO.ActiveBackup.Restore.ModeStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            cls: "mode-step",
            items: [{
                xtype: "syno_radio",
                name: "restore_mode",
                height: 28,
                inputValue: SYNO.SDS.ActiveBackup.RestoreMode.ORIGINAL,
                boxLabel: _LABS("restore_wizard", "restore_to_original_location")
            }, {
                xtype: "syno_displayfield",
                itemId: "restore_to_original",
                cls: "item-field item-field-restore-org",
                indent: 1
            }, {
                xtype: "syno_radio",
                name: "restore_mode",
                height: 28,
                inputValue: SYNO.SDS.ActiveBackup.RestoreMode.NEW,
                boxLabel: _LABS("restore_wizard", "restore_to_new_location")
            }, {
                xtype: "syno_displayfield",
                itemId: "restore_to_new",
                cls: "item-field",
                indent: 1
            }],
            bbar: [this.genNewUuidCheck = new SYNO.ux.Checkbox({
                boxLabel: _LABS("restore_wizard", "regenerate_mac_address")
            })]
        }, a)])
    },
    preload: function() {
        this.owner.store.filter("checked", true)
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.getForm().findField("restore_mode"), "check", function() {
            this.genNewUuidCheck.setValue(+this.getForm().getValues().restore_mode === SYNO.SDS.ActiveBackup.RestoreMode.NEW)
        }, this);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.genNewUuidCheck.getEl(), _LABS("tool_tip", "regenerate_mac_address"))
        }, this, {
            single: true
        })
    },
    activate: function() {
        this.getForm().findField("restore_mode").setValue(this.owner.restoreMode);
        this.description = this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT ? _LABS("restore_wizard", "mode_step_desc_instant") : _LABS("restore_wizard", "mode_step_desc_full");
        this.getComponent("restore_to_original").update(this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT ? _LABS("restore_wizard", "restore_to_original_location_desc_instant") : _LABS("restore_wizard", "restore_to_original_location_desc_full"));
        this.getComponent("restore_to_new").update(this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT ? _LABS("restore_wizard", "restore_to_new_location_desc_instant") : _LABS("restore_wizard", "restore_to_new_location_desc_full"))
    },
    goNextHook: function() {
        this.owner.goNext(this.nextId[this.owner.restoreMode]);
        this.owner.getStep(this.nextId[this.owner.restoreMode]).preload()
    },
    getNext: function() {
        var a = this.getForm().getValues();
        if (this.owner.restoreMode !== +a.restore_mode) {
            this.owner.restoreMode = +a.restore_mode;
            this.owner.store.clearFilter();
            this.owner.store.each(function(b) {
                this.owner.setDefaultValue(b, "restore_name");
                this.owner.setDefaultValue(b, "inventory_id");
                this.owner.setDefaultValue(b, "hypervisor");
                this.owner.setDefaultValue(b, "resourcepool");
                this.owner.setDefaultValue(b, "network");
                this.owner.setDefaultValue(b, "datastore");
                this.owner.setDefaultValue(b, "folder");
                this.owner.setDefaultValue(b, "migratable")
            }, this);
            this.owner.store.filter("checked", true)
        }
        this.owner.genNewUuid = this.genNewUuidCheck.getValue();
        if (this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT && this.owner.restoreMode === SYNO.SDS.ActiveBackup.RestoreMode.ORIGINAL) {
            this.owner.listSpecAPI(null, ["inventory_id", "folder", "hypervisor"], this, function() {
                this.owner.checkNFS(this.goNextHook, this)
            })
        } else {
            this.goNextHook()
        }
        return false
    }
});
Ext.define("SYNO.ActiveBackup.Restore.TypeStep", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b;
        if (a.owner.backupType === SYNO.ActiveBackup.BackupType.SERVER) {
            b = '<div class="type-step note"><div class="content">' + _LABS("retention", "gfs_note") + _LABS("restore_wizard", "pc_file_restore_desc") + _LABS("restore_wizard", "pc_bare_metal_restore_desc") + "</div></div>"
        } else {
            b = '<div class="type-step note"><div class="content">' + _LABS("restore_wizard", "file_restore_desc") + "</div></div>"
        }
        this.callParent([Ext.apply({
            layout: {
                type: "vbox",
                align: "stretch",
                defaultMargins: "0 0 8 0"
            },
            autoFlexcroll: false,
            items: [this.instantRestore = new SYNO.ux.Radio({
                name: "restore_type",
                inputValue: SYNO.SDS.ActiveBackup.RestoreType.INSTANT,
                boxLabel: _LABS("restore_wizard", "instant_restore"),
                disabled: true
            }), this.instantDisabledMsg = new SYNO.ux.DisplayField({
                indent: 1,
                hidden: true,
                style: "color:red;"
            }), this.fullRestore = new SYNO.ux.Radio({
                name: "restore_type",
                inputValue: SYNO.SDS.ActiveBackup.RestoreType.FULL,
                boxLabel: _LABS("restore_wizard", "full_restore")
            }), this.vmmRestore = new SYNO.ux.Radio({
                name: "restore_type",
                inputValue: SYNO.SDS.ActiveBackup.RestoreType.VMM,
                boxLabel: _LABS("restore_wizard", "vmm_restore"),
                disabled: true
            }), this.vmmDisabledMsg = new SYNO.ux.DisplayField({
                indent: 1,
                hidden: true,
                style: "color:red;"
            }), {
                xtype: "syno_panel",
                flex: 1
            }, {
                cls: "type-step",
                xtype: "box",
                width: 600,
                html: b,
                listeners: {
                    render: function(f) {
                        var e = Ext.get("active_backup_portal_hyperlink");
                        this.mon(e, "click", function(g) {
                            g.preventDefault();
                            SYNO.SDS.WindowLaunch("SYNO.SDS.ActiveBackupPortal.Application")
                        }, this);
                        var d = this.getEl().query(".link-font");
                        if (d.length > 1) {
                            var c = Ext.fly(d[1]);
                            c.setStyle("cursor", "pointer");
                            this.mon(c, "click", function(h) {
                                var g = SYNO.SDS.ActiveBackup.Utils.getRecoverMediaGuideLink();
                                h.preventDefault();
                                window.open(g)
                            }, this)
                        }
                    },
                    buffer: 80
                }
            }]
        }, a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            SYNO.SDS.Utils.AddTip(this.instantRestore.getEl(), _LABS("restore_wizard", "instant_restore_desc"));
            SYNO.SDS.Utils.AddTip(this.fullRestore.getEl(), _LABS("restore_wizard", "full_restore_desc"));
            SYNO.SDS.Utils.AddTip(this.vmmRestore.getEl(), _LABS("restore_wizard", "vmm_restore_desc"))
        }, this, {
            single: true
        })
    },
    preload: function() {
        var b = {
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "check_vmm",
            version: 1
        };
        var a = {
            api: "SYNO.Core.System",
            method: "info",
            version: 1,
            params: {
                type: "firmware"
            }
        };
        this.owner.setStatusBusy();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: [b, a]
            },
            scope: this,
            callback: function(f, c) {
                this.owner.clearStatusBusy();
                if (!f || c.has_fail) {
                    this.owner.reportError(c);
                    return
                }
                var g = c.result[0].data;
                var e = c.result[1].data;
                this.vmmDisabledMsg.show();
                this.instantDisabledMsg.show();
                if (!g[SYNO.SDS.ActiveBackup.VmmEnv.DSM_SUPPORTED]) {
                    this.vmmDisabledMsg.setValue(_LABS("restore_wizard", "vmm_need_upgrade_dsm"))
                } else {
                    if (!g[SYNO.SDS.ActiveBackup.VmmEnv.INSTALLED]) {
                        this.vmmDisabledMsg.setValue(_LABS("restore_wizard", "vmm_not_installed"))
                    } else {
                        if (!g[SYNO.SDS.ActiveBackup.VmmEnv.VMM_SUPPORTED]) {
                            this.vmmDisabledMsg.setValue(_LABS("restore_wizard", "vmm_not_supported"))
                        } else {
                            if (!g[SYNO.SDS.ActiveBackup.VmmEnv.INCLUSTER]) {
                                this.vmmDisabledMsg.setValue(_LABS("restore_wizard", "vmm_no_cluster"))
                            } else {
                                this.vmmDisabledMsg.hide();
                                this.vmmRestore.setDisabled(false)
                            }
                        }
                    }
                }
                if (e.model === "DDSM") {
                    this.instantDisabledMsg.setValue(_LABS("restore_wizard", "instant_not_support_ddsm"))
                } else {
                    this.instantDisabledMsg.hide();
                    this.instantRestore.setDisabled(false)
                }
                this.doLayout();
                var d = this.getForm().findField("restore_type");
                if (!this.instantRestore.disabled) {
                    d.setValue(SYNO.SDS.ActiveBackup.RestoreType.INSTANT)
                } else {
                    if (!this.fullRestore.disabled) {
                        d.setValue(SYNO.SDS.ActiveBackup.RestoreType.FULL)
                    } else {
                        if (!this.vmmRestore.disabled) {
                            d.setValue(SYNO.SDS.ActiveBackup.RestoreType.VMM)
                        } else {
                            this.owner.getButton("next").setDisabled(true)
                        }
                    }
                }
            }
        })
    },
    getNext: function() {
        var a = this.getForm().getValues();
        this.owner.restoreType = +a.restore_type;
        if (this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT) {
            this.owner.getStep("hypervisor").nextId = "network"
        } else {
            this.owner.getStep("hypervisor").nextId = "datastore"
        }
        this.owner.goNext(this.nextId);
        this.owner.getStep(this.nextId).preload();
        return false
    }
});
Ext.define("SYNO.ActiveBackup.Restore.VersionStep", {
    extend: "SYNO.ActiveBackup.Restore.ConfigStep",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            fields: ["host_name", "version"],
            showCheckColumn: true,
            showCheckedOnly: false
        }, a)])
    },
    createItem: function() {
        var a = this;
        return new SYNO.ux.GridPanel({
            owner: this,
            stateId: "SYNO.ActiveBackup.Restore.VersionStep.GridPanel",
            plugins: [new SYNO.SDS.ActiveBackup.GridStatePlugin()],
            store: new Ext.data.JsonStore({
                idProperty: "id",
                fields: ["id", "version_id", "time_start", "task_id", "task_name", "device_status"]
            }),
            colModel: new Ext.grid.ColumnModel([{
                header: _LABS("component", "version_time"),
                tooltip: _LABS("component", "version_time"),
                dataIndex: "time_start",
                renderer: function(b, c) {
                    b = SYNO.SDS.ActiveBackup.Utils.renderTime(b);
                    c.attr = 'ext:qtip="' + b + '"';
                    return b
                }
            }, {
                header: _LABS("task_info", "task_name"),
                tooltip: _LABS("task_info", "task_name"),
                dataIndex: "task_name",
                renderer: function(b, c) {
                    c.attr = 'ext:qtip="' + b + '"';
                    return b
                }
            }, {
                header: _LABS("common", "status"),
                tooltip: _LABS("common", "status"),
                dataIndex: "device_status",
                renderer: SYNO.SDS.ActiveBackup.Utils.renderDeviceStatus
            }]),
            selModel: new Ext.grid.RowSelectionModel({
                listeners: {
                    selectionchange: this.checkCanSave,
                    scope: this
                },
                singleSelect: true
            }),
            viewConfig: {
                listeners: {
                    refresh: function() {
                        var e = a.owner.getDevice(a.owner.currDeviceId);
                        var d = e.get("version").task_id;
                        var c = e.get("version").version_id;
                        var f = d + "_" + c;
                        var b = this.grid.getStore().indexOfId(f);
                        this.grid.getSelectionModel().selectRow(b)
                    }
                }
            }
        })
    },
    isValid: function() {
        return this.getItem().getSelectionModel().getSelected()
    },
    isHideCheckColumn: function() {
        return this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.VMM
    },
    loadData: function() {
        var a, d, c;
        if (this.owner.singleMode) {
            a = "Device";
            d = "list_version";
            c = {
                load_available: true,
                device_id: this.owner.currDeviceId,
                device_status: SYNO.SDS.ActiveBackup.DeviceStatus.COMPLETED
            }
        } else {
            a = "Version";
            d = "list";
            c = {
                task_id: this.owner.currTaskId,
                device_id: this.owner.currDeviceId,
                device_status: SYNO.SDS.ActiveBackup.DeviceStatus.COMPLETED
            }
        }
        var b = this.findWindow();
        b.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup." + a,
            method: d,
            params: c,
            version: 1,
            callback: function(f, e) {
                b.clearStatusBusy();
                if (!f) {
                    this.owner.reportError(e);
                    return
                }
                if (e.versions.length === 0) {
                    this.owner.getMsgBox().alert("", _LABS("restore_wizard", "no_version_to_restore"), b.close, b);
                    return
                }
                Ext.each(e.versions, function(g) {
                    g.id = g.task_id + "_" + g.version_id
                });
                this.getItem().getStore().loadData(e.versions)
            },
            scope: this
        })
    },
    saveData: function() {
        var c = this.owner.getDevice(this.owner.currDeviceId);
        var b = this.getItem().getSelectionModel().getSelected();
        if (c.get("version").task_id !== b.get("task_id") || c.get("version").version_id !== b.get("version_id")) {
            var a = b.json;
            delete a.id;
            c.set("version", a);
            this.owner.setDefaultValue(c, "restore_name");
            this.owner.setDefaultValue(c, "inventory_id");
            this.owner.setDefaultValue(c, "hypervisor");
            this.owner.setDefaultValue(c, "resourcepool");
            this.owner.setDefaultValue(c, "network");
            this.owner.setDefaultValue(c, "network_num");
            this.owner.setDefaultValue(c, "datastore");
            this.owner.setDefaultValue(c, "datastore_num");
            this.owner.setDefaultValue(c, "folder");
            this.owner.setDefaultValue(c, "migratable")
        }
        this.owner.currTaskId = b.get("task_id")
    },
    initData: function(a) {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "list_latest_version",
            version: 1,
            params: {
                single_mode: this.owner.singleMode,
                device_id: this.owner.currDeviceId,
                task_id: this.owner.currTaskId
            },
            callback: function(d, b) {
                this.owner.clearStatusBusy();
                if (!d) {
                    this.owner.reportError(b);
                    return
                }
                var c = -1;
                Ext.each(b.device_list, function(g, e) {
                    var f = this.owner.getDevice(g.device_id);
                    if (!f) {
                        this.owner.store.loadData([g], true);
                        f = this.owner.getDevice(g.device_id)
                    } else {
                        this.owner.setValueIfEmpty(f, "version", g.version)
                    }
                    if (SYNO.SDS.ActiveBackup.Utils.isEmpty(g.version)) {
                        f.set("checked", false)
                    } else {
                        if (c === -1) {
                            c = e
                        }
                    }
                }, this);
                if (c === -1) {
                    this.owner.getMsgBox().alert("", _LABS("restore_wizard", "no_version_to_restore"), this.owner.close, this.owner);
                    return
                }
                if (!this.owner.singleMode && !this.getGrid().getSelectionModel().getSelected()) {
                    this.getGrid().getSelectionModel().selectRow(c)
                }
                a.call(this)
            },
            scope: this
        })
    },
    checkData: function(b) {
        if (this.isHideCheckColumn()) {
            var a = this.owner.singleMode ? this.owner.store.getAt(0) : this.getGrid().getSelectionModel().getSelected();
            if (a && !SYNO.SDS.ActiveBackup.Utils.isEmpty(a.get("version"))) {
                this.openVMM(a);
                return
            }
        } else {
            if (this.owner.store.find("checked", true) >= 0) {
                b.call(this);
                return
            }
        }
        this.owner.getMsgBox().alert("", _LABS("restore_wizard", "version_step_error"))
    },
    getNext: function() {
        if (this.owner.singleMode) {
            this.saveData()
        }
        this.checkData(function() {
            var a = (this.owner.backupType === SYNO.ActiveBackup.BackupType.SERVER) ? 1 : 0;
            this.owner.goNext(this.nextId[a]);
            this.owner.getStep(this.nextId[a]).preload()
        });
        return false
    },
    openVMM: function(a) {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "list_spec",
            version: 1,
            params: {
                list_fields: ["vm_spec"],
                device_list: [{
                    device_id: a.get("device_id"),
                    version: a.get("version")
                }],
                task_id: this.owner.currTaskId
            },
            callback: function(d, c) {
                this.clearStatusBusy();
                if (!d) {
                    this.reportError(c);
                    return
                }
                var b = c.device_list[0];
                SYNO.SDS.JSLoader.JSLoadFn("SYNO.SDS.Virtualization.Application");
                if (Ext.isFunction(SYNO.SDS.Virtualization.ExportFn.LaunchOpenInVmmWizard_v2)) {
                    this.setStatusBusy();
                    SYNO.SDS.Virtualization.ExportFn.LaunchOpenInVmmWizard_v2(this.appWin, b, this.close, this)
                } else {
                    SYNO.SDS.Virtualization.ExportFn.LaunchOpenInVmmWizard(this.appWin, b);
                    this.close()
                }
            },
            scope: this.owner
        })
    }
});
Ext.define("SYNO.ActiveBackup.Restore.HypervisorStep", {
    extend: "SYNO.ActiveBackup.Restore.ConfigStep",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            fields: ["restore_name", "hypervisor", "resourcepool", "migratable"],
            showCheckColumn: false,
            showCheckedOnly: true
        }, a)])
    },
    createItem: function() {
        return new SYNO.ux.FormPanel({
            items: [{
                xtype: "syno_displayfield",
                value: _LABS("restore_wizard", "select_hypervisor_action")
            }, new SYNO.ActiveBackup.VM.TreePanel({
                height: this.owner.singleMode ? 325 : 350,
                itemId: "tree_panel",
                viewType: "vim.ResourcePool",
                blCheckMigratable: true,
                selModel: new Ext.tree.DefaultSelectionModel({
                    listeners: {
                        selectionchange: this.checkCanSave,
                        scope: this
                    }
                }),
                getCheckedNodeParam: function(a) {
                    return {
                        inventory_id: a.get("inventory_id"),
                        parent_id: a.get("folder").datacenter_id,
                        entity_id: a.get("hypervisor").standalone ? a.get("resourcepool").resourcepool_id : a.get("hypervisor").host_id,
                        name: a.get("hypervisor").standalone ? a.get("resourcepool").name : a.get("hypervisor").name
                    }
                },
                isSelectedValid: function() {
                    var a = this.getSelectionModel().getSelectedNode();
                    if (a === null) {
                        return false
                    }
                    return ["vim.ComputeResource", "vim.ResourcePool", "vim.VirtualApp", "vim.HostSystem"].indexOf(a.attributes.type) >= 0
                },
                setTooltip: function(a) {
                    a.tooltip = this.checkNotMigratable(a) ? _LABS("restore", "no_migrate_capability") : ""
                }
            })]
        })
    },
    activate: function() {
        if (!this.owner.singleMode) {
            var a = (this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT);
            this.grid.getColumnModel().setHidden(3, !a)
        }
    },
    isValid: function() {
        var a = this.getItem().getComponent("tree_panel");
        return a.isSelectedValid()
    },
    loadData: function() {
        var b = this.owner.getDevice(this.owner.currDeviceId);
        var a = this.getItem().getComponent("tree_panel");
        a.setCheckedNodes([b], true, true)
    },
    saveData: function() {
        var e = this.owner.getDevice(this.owner.currDeviceId);
        var d = this.getItem().getComponent("tree_panel");
        var b = d.getSelectionModel().getSelectedNode();
        var f = e.get("inventory_id");
        var h = e.get("hypervisor").host_id;
        var a = b;
        while (a.parentNode.isRoot !== true) {
            a = a.parentNode
        }
        var c = (SYNO.ActiveBackup.HostType.vCenter === a.attributes.host_type);
        if (b.attributes.type === "vim.HostSystem") {
            e.set("hypervisor", {
                host_id: b.attributes.path,
                name: b.text,
                full_addr: c ? a.text + "/" + b.text : b.text,
                standalone: false
            });
            e.set("resourcepool", {
                resourcepool_id: b.parentNode.attributes.resourcepool_id,
                name: b.parentNode.text
            });
            e.set("migratable", b.attributes.migratable)
        } else {
            if (["vim.ResourcePool", "vim.VirtualApp"].indexOf(b.attributes.type) >= 0) {
                var g = b;
                while (g.attributes.type !== "vim.ComputeResource") {
                    g = g.parentNode
                }
                e.set("hypervisor", {
                    host_id: g.attributes.host_id,
                    name: g.text,
                    full_addr: c ? a.text + "/" + g.text : g.text,
                    standalone: true
                });
                e.set("resourcepool", {
                    resourcepool_id: b.attributes.path,
                    name: b.text
                });
                e.set("migratable", g.attributes.migratable)
            } else {
                if (b.attributes.type === "vim.ComputeResource") {
                    e.set("hypervisor", {
                        host_id: b.attributes.host_id,
                        name: b.text,
                        full_addr: c ? a.text + "/" + b.text : b.text,
                        standalone: true
                    });
                    e.set("resourcepool", {
                        resourcepool_id: b.attributes.resourcepool_id,
                        name: b.text
                    });
                    e.set("migratable", b.attributes.migratable)
                }
            }
        }
        if (f !== e.get("inventory_id") || h !== e.get("hypervisor").host_id) {
            this.owner.setDefaultValue(e, "datastore");
            this.owner.setDefaultValue(e, "network")
        }
    },
    initData: function(a) {
        this.owner.listSpecAPI(["inventory_id", "folder"], ["hypervisor", "resourcepool", "migratable"], this, a)
    },
    checkData: function(a) {
        this.owner.checkSpecAPI(["folder", "hypervisor", "resourcepool"], ["hypervisor", "resourcepool"], this, function() {
            if (this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT) {
                this.owner.checkNFS(a, this)
            } else {
                a.call(this)
            }
        }, function(b) {
            if (this.owner.singleMode) {
                this.owner.reportError(b[0].get("hypervisor").error || b[0].get("resourcepool").error)
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.Restore.DatastoreStep", {
    extend: "SYNO.ActiveBackup.Restore.ConfigStep",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            fields: ["restore_name", "datastore"],
            showCheckColumn: false,
            showCheckedOnly: true
        }, a)])
    },
    createItem: function() {
        var a = this;
        var b = new SYNO.ux.TabPanel({
            deferredRender: false,
            enableTabScroll: true
        });
        b.loadTabs = function(e) {
            this.removeAll();
            var c = function(f) {
                return {
                    inventory_id: f.get("inventory_id"),
                    parent_id: f.get("hypervisor").host_id,
                    entity_id: f.get("datastore").datastore_id,
                    name: f.get("datastore").name
                }
            };
            for (var d = 1; d <= e.get("datastore_num"); d++) {
                this.add(new SYNO.ux.FormPanel({
                    title: _LABS("component", "hard_disk") + " " + d,
                    items: [{
                        xtype: "syno_displayfield",
                        value: _LABS("restore_wizard", "select_datastore_action")
                    }, new SYNO.ActiveBackup.VM.TreePanel({
                        height: a.owner.singleMode ? 290 : 320,
                        itemId: "tree_panel",
                        viewType: "vim.Datastore",
                        selModel: new Ext.tree.DefaultSelectionModel({
                            listeners: {
                                selectionchange: a.checkCanSave,
                                scope: a
                            }
                        }),
                        getCheckedNodeParam: c
                    })]
                }))
            }
            this.doLayout(false, true);
            this.setActiveTab(0)
        }.createDelegate(b);
        return b
    },
    isValid: function() {
        return this.getItem().items.items.reduce(function(c, b) {
            var a = b.getComponent("tree_panel");
            return c && a.isSelectedValid()
        }, true)
    },
    loadData: function() {
        var a = this.owner.getDevice(this.owner.currDeviceId);
        this.getItem().loadTabs(a);
        this.getItem().items.each(function(e, b) {
            var c = new Ext.data.Record({
                inventory_id: a.get("inventory_id"),
                hypervisor: a.get("hypervisor"),
                datastore: a.get("datastore")[b] || {}
            });
            var d = e.getComponent("tree_panel");
            d.setCheckedNodes([c], true, true)
        })
    },
    saveData: function() {
        var a = this.owner.getDevice(this.owner.currDeviceId);
        a.set("datastore", this.getItem().items.items.map(function(d) {
            var c = d.getComponent("tree_panel");
            var b = c.getSelectionModel().getSelectedNode();
            return {
                datastore_id: b.attributes.path,
                name: b.text
            }
        }))
    },
    initData: function(a) {
        this.owner.listSpecAPI(["inventory_id", "hypervisor"], ["datastore", "datastore_num"], this, a)
    },
    checkData: function(a) {
        this.owner.checkSpecAPI(["hypervisor", "datastore"], ["datastore"], this, a, function(b) {
            if (this.owner.singleMode) {
                this.owner.reportError(b[0].get("datastore").reduce(function(c, d) {
                    return c || d.error
                }, null))
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.Restore.NetworkStep", {
    extend: "SYNO.ActiveBackup.Restore.ConfigStep",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            fields: ["restore_name", "network"],
            showCheckColumn: false,
            showCheckedOnly: true
        }, a)])
    },
    createItem: function() {
        var a = this;
        var b = new SYNO.ux.TabPanel({
            deferredRender: false,
            enableTabScroll: true
        });
        b.loadTabs = function(e) {
            this.removeAll();
            var c = function(f) {
                return {
                    inventory_id: f.get("inventory_id"),
                    parent_id: f.get("hypervisor").host_id,
                    entity_id: f.get("network").network_id,
                    name: f.get("network").name
                }
            };
            for (var d = 1; d <= e.get("network_num"); d++) {
                this.add(new SYNO.ux.FormPanel({
                    title: _LABS("component", "network_adapter") + " " + d,
                    items: [{
                        xtype: "syno_displayfield",
                        value: _LABS("restore_wizard", "select_network_action")
                    }, new SYNO.ActiveBackup.VM.TreePanel({
                        height: a.owner.singleMode ? 290 : 320,
                        itemId: "tree_panel",
                        viewType: "vim.Network",
                        selModel: new Ext.tree.DefaultSelectionModel({
                            listeners: {
                                selectionchange: a.checkCanSave,
                                scope: a
                            }
                        }),
                        getCheckedNodeParam: c
                    })]
                }))
            }
            this.doLayout(false, true);
            this.setActiveTab(0)
        }.createDelegate(b);
        return b
    },
    isValid: function() {
        return this.getItem().items.items.reduce(function(c, b) {
            var a = b.getComponent("tree_panel");
            return c && a.isSelectedValid()
        }, true)
    },
    loadData: function() {
        var a = this.owner.getDevice(this.owner.currDeviceId);
        this.getItem().loadTabs(a);
        this.getItem().items.each(function(e, b) {
            var c = new Ext.data.Record({
                inventory_id: a.get("inventory_id"),
                hypervisor: a.get("hypervisor"),
                network: a.get("network")[b] || {}
            });
            var d = e.getComponent("tree_panel");
            d.setCheckedNodes([c], true, true)
        })
    },
    saveData: function() {
        var a = this.owner.getDevice(this.owner.currDeviceId);
        a.set("network", this.getItem().items.items.map(function(d) {
            var c = d.getComponent("tree_panel");
            var b = c.getSelectionModel().getSelectedNode();
            return {
                network_id: b.attributes.path,
                name: b.text
            }
        }))
    },
    initData: function(a) {
        this.owner.listSpecAPI(["inventory_id", "hypervisor"], ["network", "network_num"], this, a)
    },
    checkData: function(a) {
        this.owner.checkSpecAPI(["hypervisor", "network"], ["network"], this, a, function(b) {
            if (this.owner.singleMode) {
                this.owner.reportError(b[0].get("network").reduce(function(c, d) {
                    return c || d.error
                }, null))
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.Restore.FolderStep", {
    extend: "SYNO.ActiveBackup.Restore.ConfigStep",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            fields: ["host_name", "restore_name", "folder"],
            showCheckColumn: false,
            showCheckedOnly: true
        }, a)])
    },
    createItem: function() {
        return new SYNO.ux.FormPanel({
            items: [{
                xtype: "syno_textfield",
                itemId: "restore_name",
                anchor: "0",
                maxLength: 80,
                allowBlank: false,
                vtype: "taskname",
                fieldLabel: _LABS("restore_wizard", "new_vm_name"),
                listeners: {
                    blur: this.checkCanSave,
                    scope: this
                }
            }, {
                xtype: "syno_displayfield",
                value: _LABS("restore_wizard", "select_folder_action")
            }, new SYNO.ActiveBackup.VM.TreePanel({
                height: this.owner.singleMode ? 295 : 320,
                itemId: "tree_panel",
                viewType: "vim.Folder",
                selModel: new Ext.tree.DefaultSelectionModel({
                    listeners: {
                        selectionchange: this.checkCanSave,
                        scope: this
                    }
                }),
                getCheckedNodeParam: function(a) {
                    return {
                        inventory_id: a.get("inventory_id"),
                        parent_id: a.get("folder").datacenter_id,
                        entity_id: a.get("folder").folder_id,
                        name: a.get("folder").name
                    }
                },
                isSelectedValid: function() {
                    var a = this.getSelectionModel().getSelectedNode();
                    if (a === null) {
                        return false
                    }
                    if (a.attributes.type === "vim.Datacenter") {
                        return true
                    }
                    if (a.attributes.type !== "vim.Folder") {
                        return false
                    }
                    while (a && a.attributes.type !== "vim.Datacenter") {
                        a = a.parentNode
                    }
                    return a ? true : false
                }
            })]
        })
    },
    isValid: function() {
        var b = this.getItem().getComponent("tree_panel");
        var a = this.getItem().getComponent("restore_name");
        return b.isSelectedValid() && a.validate()
    },
    loadData: function() {
        var c = this.owner.getDevice(this.owner.currDeviceId);
        var b = this.getItem().getComponent("tree_panel");
        var a = this.getItem().getComponent("restore_name");
        a.setValue(c.get("restore_name"));
        if (this.owner.backupType === SYNO.ActiveBackup.BackupType.VM && !SYNO.SDS.ActiveBackup.Utils.isEmpty(c.get("folder"))) {
            b.setCheckedNodes([c], true, false)
        }
    },
    saveData: function() {
        var e = this.owner.getDevice(this.owner.currDeviceId);
        var d = this.getItem().getComponent("tree_panel");
        var b = this.getItem().getComponent("restore_name");
        var c = d.getSelectionModel().getSelectedNode();
        var h = c.getPath("path").split("/");
        var f = e.get("inventory_id");
        var g = e.get("folder").datacenter_id;
        e.set("restore_name", b.getValue());
        e.set("inventory_id", +h[2]);
        if (c.attributes.type === "vim.Datacenter") {
            e.set("folder", {
                name: c.text,
                folder_id: c.attributes.folder_id,
                datacenter_id: c.attributes.path
            })
        } else {
            var a = c;
            while (a.attributes.type !== "vim.Datacenter") {
                a = a.parentNode
            }
            e.set("folder", {
                name: c.text,
                folder_id: c.attributes.path,
                datacenter_id: a.attributes.path
            })
        }
        if (f !== e.get("inventory_id") || g !== e.get("folder").datacenter_id) {
            this.owner.setDefaultValue(e, "hypervisor");
            this.owner.setDefaultValue(e, "migratable");
            this.owner.setDefaultValue(e, "resourcepool");
            this.owner.setDefaultValue(e, "datastore");
            this.owner.setDefaultValue(e, "network")
        }
    },
    initData: function(a) {
        this.owner.store.each(function(b) {
            this.owner.setValueIfEmpty(b, "restore_name", b.get("host_name").substr(0, 72) + "_restore")
        }, this);
        this.owner.listSpecAPI(null, ["inventory_id", "folder"], this, a);
        if (this.owner.backupType === SYNO.ActiveBackup.BackupType.SERVER && this.getItem().getComponent("tree_panel").isTreeEmpty()) {
            this.owner.getMsgBox().show({
                msg: _LABS("restore_wizard", "no_available_host"),
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.OK,
                fn: this.owner.close,
                scope: this.owner
            })
        }
    },
    checkData: function(a) {
        this.owner.checkSpecAPI(["folder", "restore_name"], ["folder", "restore_name"], this, a, function(b) {
            if (this.owner.singleMode) {
                this.owner.reportError(b[0].get("folder").error)
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.Restore.SummaryStep", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            cls: "summary-step synoabk-appwin",
            layout: "fit",
            items: this.listView = new SYNO.ActiveBackup.Restore.SummaryListView(a),
            bbar: [this.poweronCheck = new SYNO.ux.Checkbox({
                boxLabel: _LABS("restore_wizard", "power_on_vm_desc")
            })],
            tbar: ["->", this.expandBtn = new Ext.Component({
                html: _LABS("restore_wizard", "summary_expand_all"),
                cls: "toggle-button"
            }), this.collapseBtn = new Ext.Component({
                html: _LABS("restore_wizard", "summary_collapse_all"),
                cls: "toggle-button",
                hidden: true
            })]
        }, a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.listView, "toggle", this.onUpdateToggleDevices, this);
        this.mon(this.expandBtn.getEl(), "click", this.listView.expandAll, this.listView);
        this.mon(this.collapseBtn.getEl(), "click", this.listView.collapseAll, this.listView)
    },
    onUpdateToggleDevices: function(a) {
        if (this.owner.store.data.length === a.length) {
            this.expandBtn.hide();
            this.collapseBtn.show()
        } else {
            this.expandBtn.show();
            this.collapseBtn.hide()
        }
    },
    preload: function() {
        if (this.owner.singleMode) {
            this.listView.expandAll()
        } else {
            this.owner.store.filter("checked", true)
        }
        if (this.owner.restoreMode === SYNO.SDS.ActiveBackup.RestoreMode.ORIGINAL) {
            this.owner.store.each(function(a) {
                this.owner.setValueIfEmpty(a, "restore_name", a.get("host_name"))
            }, this);
            this.fields = ["hypervisor", "resourcepool", "network", "folder", "inventory_id"];
            if (this.owner.restoreType === SYNO.SDS.ActiveBackup.RestoreType.INSTANT) {
                this.fields.push("migratable")
            } else {
                this.fields.push("datastore")
            }
            this.owner.listSpecAPI(null, this.fields, this, function() {
                this.fireEvent("checkvalid", this);
                this.expandDevices()
            })
        } else {
            this.expandDevices()
        }
    },
    validate: function() {
        return this.owner.validateFields(this.fields)
    },
    getNext: function() {
        var a = ["hypervisor", "resourcepool", "network", "folder", "restore_name"];
        if (this.owner.restoreType !== SYNO.SDS.ActiveBackup.RestoreType.INSTANT) {
            a.push("datastore")
        }
        this.owner.checkSpecAPI(a, a, this, this.onValid, this.onError);
        return false
    },
    onValid: function() {
        var a = ["device_id", "inventory_id", "host_name", "restore_name", "version", "hypervisor", "resourcepool", "network", "folder"];
        if (this.owner.restoreType !== SYNO.SDS.ActiveBackup.RestoreType.INSTANT) {
            a.push("datastore")
        }
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "restore",
            version: 1,
            params: {
                task_id: this.owner.currTaskId,
                device_list: this.owner.getDevices(a),
                restore_mode: this.owner.restoreMode,
                restore_type: this.owner.restoreType,
                gen_new_uuid: this.owner.genNewUuid,
                power_on: this.poweronCheck.getValue()
            },
            callback: function(c, b) {
                this.owner.clearStatusBusy();
                if (!c) {
                    this.owner.reportError(b);
                    return
                }
                this.owner.close();
                this.owner.appWin.selectPage("SYNO.ActiveBackup.PageRestore")
            },
            scope: this
        })
    },
    onError: function(a) {
        this.listView.expandDevices(a);
        if (this.owner.restoreMode === SYNO.SDS.ActiveBackup.RestoreMode.ORIGINAL) {
            this.owner.getMsgBox().alert("", _LABS("restore_wizard", "summary_step_error"))
        }
    },
    expandDevices: function() {
        var a = this.owner.getDevices(["device_id"]);
        if (a.length === 1) {
            this.listView.expandAll()
        } else {
            this.expandWarning()
        }
    },
    expandWarning: function() {
        if (this.owner.restoreType !== SYNO.SDS.ActiveBackup.RestoreType.INSTANT) {
            return
        }
        var b = [];
        var a = this.owner.getDevices(["device_id", "migratable"]);
        Ext.each(a, function(d) {
            if (!SYNO.SDS.ActiveBackup.Utils.isVmMigratable(d.migratable)) {
                var c = this.owner.getDevice(d.device_id);
                b.push(c)
            }
        }, this);
        if (b.length > 0) {
            this.listView.expandDevices(b)
        }
    }
});
Ext.define("SYNO.ActiveBackup.Restore.SummaryListView", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            store: a.owner.store
        }, a)])
    },
    createTpl: function(a) {
        return new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap {cls}" role="option" aria-expanded="false" id={[Ext.id()]} aria-label="{ariaInfo}">', '<div class="item-summary">', '<div class="item-toggle"><div class="item-toggle-img"></div></div>', '<div class="item-title" ext:qtip="{host_name:htmlEncode}">{host_name:htmlEncode}</div>', "</div>", '<div class="item-detail" style="display:none">', '<dl class="item-property">', "<dt>{[ this.columns.restore_name.header ]}</dt>", "<dd>{[ this.columns.restore_name.renderer(values.restore_name) ]}</dd>", "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', "<dt>{[ this.columns.version.header ]}</dt>", "<dd>{[ this.columns.version.renderer(values.version) ]}</dd>", "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', "<dt>{[ this.columns.hypervisor.header ]}</dt>", "<dd>{[ this.getFullAddress(values.hypervisor) ]}</dd>", "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', "<dt>{[ this.columns.resourcepool.header ]}</dt>", "<dd>{[ this.columns.resourcepool.renderer(values.resourcepool) ]}</dd>", "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', "<dt>{[ this.columns.network.header ]}</dt>", "<dd>{[ this.columns.network.renderer(values.network) ]}</dd>", "</dl>", '<div class="x-clear"></div>', '<tpl if="this.getRestoreType() !== SYNO.SDS.ActiveBackup.RestoreType.INSTANT">', '<dl class="item-property">', "<dt>{[ this.columns.datastore.header ]}</dt>", "<dd>{[ this.columns.datastore.renderer(values.datastore) ]}</dd>", "</dl>", '<div class="x-clear"></div>', "</tpl>", '<dl class="item-property">', "<dt>{[ this.columns.folder.header ]}</dt>", "<dd>{[ this.columns.folder.renderer(values.folder) ]}</dd>", "</dl>", '<tpl if="this.getRestoreType() === SYNO.SDS.ActiveBackup.RestoreType.INSTANT">', '<dl class="item-property">', "<dt>{[ this.columns.migratable.header ]}</dt>", "<dd>{[ this.columns.migratable.renderer(values.migratable) ]}</dd>", "</dl>", "</tpl>", '<div class="x-clear"></div>', "</div>", "</div>", "</tpl>", '<div class="x-clear"></div>', {
            getRestoreType: function() {
                return a.owner.restoreType
            },
            getFullAddress: function(d) {
                if (SYNO.SDS.ActiveBackup.Utils.isEmpty(d)) {
                    d = {
                        full_addr: _LABS("restore_wizard", "please_select_hypervisor"),
                        style: "color:red"
                    }
                }
                var b = new Ext.XTemplate('<span ext:qtip="{full_addr}" style="{style}">{full_addr_display}</span><tpl if="error"><i><i class="config-error" ext:qtip="{error}"></i></i></tpl>');
                var c = Ext.apply({
                    error: 0,
                    full_addr_display: ""
                }, d);
                if (c.error) {
                    c.error = SYNO.ActiveBackup.Util.parseError(c.error)
                }
                if (c.full_addr) {
                    c.full_addr_display = c.full_addr.replace(/\//g, '<i class="path-arrow"></i>')
                }
                return b.apply(c)
            },
            columns: a.owner.columns
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.addEvents("toggle")
    },
    onClick: function(d, c, b) {
        this.callParent(arguments);
        var a = Ext.fly(c);
        if (a && (a.hasClass("item-summary") || a.hasClass("item-title"))) {
            this.toggleDetail(a.parent(".item-wrap"), true)
        }
    },
    toggleDetail: function(a, b) {
        this.callParent(arguments);
        this.fireEvent("toggle", this.getValidToggledItemIds())
    },
    getValidToggledItemIds: function() {
        var a = [];
        Ext.each(this.getToggledItemIds(), function(b) {
            if (this.store.data.key(b)) {
                a.push(b)
            }
        }, this);
        return a
    },
    expandDevice: function(b) {
        var a = Ext.fly(this.getNode(b));
        if (a && !a.child(".item-toggle-expanded")) {
            this.toggleDetail(a, false)
        }
    },
    collapseDevice: function(b) {
        var a = Ext.fly(this.getNode(b));
        if (a && a.child(".item-toggle-expanded")) {
            this.toggleDetail(a, false)
        }
    },
    expandAll: function() {
        this.store.each(function(a) {
            this.expandDevice(a)
        }, this)
    },
    collapseAll: function() {
        this.store.each(function(a) {
            this.collapseDevice(a)
        }, this)
    },
    expandDevices: function(a) {
        Ext.each(a, function(b) {
            this.expandDevice(b)
        }, this)
    }
});
Ext.define("SYNO.ActiveBackup.Restore.RestoreWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    constructor: function(a) {
        this.owner = a.owner;

        function b(c, d) {
            return function(f, h) {
                if (SYNO.SDS.ActiveBackup.Utils.isEmpty(f)) {
                    if (this.isLoading) {
                        f = {
                            name: _T("common", "loading")
                        }
                    } else {
                        f = {
                            name: c,
                            style: "color:red"
                        }
                    }
                } else {
                    if (Ext.isArray(f)) {
                        f = {
                            name: f.map(function(i) {
                                return i.name
                            }).join(", "),
                            error: f.reduce(function(i, j) {
                                return i || j.error
                            }, null)
                        }
                    }
                }
                var e = new Ext.XTemplate('<span ext:qtip="{name}" style="{style}">{name}</span><tpl if="error"><i><i class="config-error" ext:qtip="{error}"></i></i></tpl>');
                var g = Ext.apply({
                    error: 0
                }, f);
                if (g.error) {
                    g.error = SYNO.ActiveBackup.Util.parseError(g.error)
                }
                g.name = Ext.util.Format.htmlEncode(g.name);
                if (d) {
                    g.name = g.name.replace(/\.+$/, "")
                }
                return e.apply(g)
            }
        }
        this.store = new Ext.data.JsonStore({
            idProperty: "device_id",
            fields: [{
                name: "device_id"
            }, {
                name: "inventory_id",
                defaultValue: 0
            }, {
                name: "host_name",
                defaultValue: ""
            }, {
                name: "restore_name",
                defaultValue: ""
            }, {
                name: "version",
                defaultValue: {}
            }, {
                name: "hypervisor",
                defaultValue: {}
            }, {
                name: "resourcepool",
                defaultValue: {}
            }, {
                name: "network",
                defaultValue: []
            }, {
                name: "network_num",
                defaultValue: 0
            }, {
                name: "datastore",
                defaultValue: []
            }, {
                name: "datastore_num",
                defaultValue: 0
            }, {
                name: "folder",
                defaultValue: {}
            }, {
                name: "migratable",
                defaultValue: {}
            }, {
                name: "checked",
                defaultValue: true
            }]
        });
        this.columns = {
            host_name: {
                header: _LABS("restore_wizard", "vm_name"),
                tooltip: _LABS("restore_wizard", "vm_name"),
                dataIndex: "host_name",
                renderer: function(c) {
                    return String.format('<span ext:qtip="{0}">{1}</span>', SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(c), Ext.util.Format.htmlEncode(c))
                }
            },
            restore_name: {
                header: _LABS("restore_wizard", "new_vm_name"),
                tooltip: _LABS("restore_wizard", "new_vm_name"),
                dataIndex: "restore_name",
                renderer: function(c) {
                    return String.format('<span ext:qtip="{0}">{1}</span>', SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(c), Ext.util.Format.htmlEncode(c))
                }
            },
            version: {
                header: _LABS("restore_wizard", "restore_point"),
                tooltip: _LABS("restore_wizard", "restore_point"),
                dataIndex: "version",
                renderer: function(c) {
                    c = SYNO.SDS.ActiveBackup.Utils.renderTime(c.time_start);
                    return String.format('<span ext:qtip="{0}">{1}</span>', c, c)
                }
            },
            hypervisor: {
                header: _LABS("restore_wizard", "hypervisor"),
                tooltip: _LABS("restore_wizard", "hypervisor"),
                dataIndex: "hypervisor",
                renderer: b(_LABS("restore_wizard", "please_select_hypervisor")).createDelegate(this)
            },
            resourcepool: {
                header: _LABS("restore_wizard", "resourcepool"),
                tooltip: _LABS("restore_wizard", "resourcepool"),
                dataIndex: "resourcepool",
                renderer: b(_LABS("restore_wizard", "please_select_resourcepool"), true).createDelegate(this)
            },
            network: {
                header: _LABS("restore_wizard", "network"),
                tooltip: _LABS("restore_wizard", "network"),
                dataIndex: "network",
                renderer: b(_LABS("restore_wizard", "please_select_network")).createDelegate(this)
            },
            datastore: {
                header: _LABS("restore_wizard", "datastore"),
                tooltip: _LABS("restore_wizard", "datastore"),
                dataIndex: "datastore",
                renderer: b(_LABS("restore_wizard", "please_select_datastore")).createDelegate(this)
            },
            folder: {
                header: _LABS("restore_wizard", "folder"),
                tooltip: _LABS("restore_wizard", "folder"),
                dataIndex: "folder",
                renderer: b(_LABS("restore_wizard", "please_select_folder")).createDelegate(this)
            },
            migratable: {
                header: _LABS("restore_wizard", "migrate_capability"),
                tooltip: _LABS("restore_wizard", "migrate_capability"),
                dataIndex: "migratable",
                renderer: function(f) {
                    var d, e;
                    if (!f.vcenter) {
                        e = _LABS("restore_wizard", "is_not_vcenter_to_migrate");
                        d = _T("common", "no")
                    } else {
                        if (!f.vmotion) {
                            e = _LABS("restore_wizard", "no_license_to_migrate");
                            d = _T("common", "no")
                        } else {
                            e = "";
                            d = _T("common", "yes")
                        }
                    }
                    var c = new Ext.XTemplate('<span ext:qtip="{name}">{name}</span><tpl if="warning"><i><i class="config-warning" ext:qtip="{warning}"></i></i></tpl>');
                    return c.apply({
                        warning: e,
                        name: d
                    })
                }
            },
            checked: {
                width: 40,
                fixed: true,
                hideable: false,
                align: "center",
                dataIndex: "checked",
                isIgnore: function(d, c) {
                    return SYNO.SDS.ActiveBackup.Utils.isEmpty(c.get("version"))
                },
                renderer: function(e, d, c) {
                    if (this.isIgnore("", c)) {
                        e = this.disableRenderer(e, d, c);
                        d.cellAttr += 'ext:qtip="' + _LABS("restore_wizard", "no_version_to_restore") + '"';
                        return e
                    }
                    return SYNO.ux.EnableColumn.prototype.renderer.call(this, e, d, c)
                }
            }
        };
        this.currTaskId = a.task_id;
        this.currDeviceId = a.device_id;
        this.backupType = a.backup_type;
        this.genNewUuid = false;
        this.restoreType = SYNO.SDS.ActiveBackup.RestoreType.INSTANT;
        this.restoreMode = (a.backup_type === SYNO.ActiveBackup.BackupType.SERVER) ? SYNO.SDS.ActiveBackup.RestoreMode.NEW : SYNO.SDS.ActiveBackup.RestoreMode.ORIGINAL;
        if (this.currDeviceId) {
            this.singleMode = true
        } else {
            if (this.currTaskId) {
                this.singleMode = false
            } else {}
        }
        this.callParent([Ext.apply({
            title: _LABS("restore_wizard", "restore_wizard_title"),
            width: 700,
            height: 580,
            banner: true,
            steps: this.createSteps(),
            cls: "synoabk-restore"
        }, a)])
    },
    createSteps: function() {
        return [new SYNO.ActiveBackup.Restore.TypeStep({
            headline: _LABS("restore_wizard", "type_step_head"),
            description: _LABS("restore_wizard", "type_step_desc"),
            owner: this,
            itemId: "type",
            nextId: "version"
        }), new SYNO.ActiveBackup.Restore.VersionStep({
            headline: _LABS("restore_wizard", (this.backupType === SYNO.ActiveBackup.BackupType.SERVER ? "version_step_physical_server_head_" : "version_step_head_") + (this.singleMode ? "single" : "multi")),
            description: _LABS("restore_wizard", (this.backupType === SYNO.ActiveBackup.BackupType.SERVER ? "version_step_physical_server_desc_" : "version_step_desc_") + (this.singleMode ? "single" : "multi")),
            owner: this,
            itemId: "version",
            nextId: ["mode", "folder"]
        }), new SYNO.ActiveBackup.Restore.ModeStep({
            headline: _LABS("restore_wizard", "mode_step_head"),
            owner: this,
            itemId: "mode",
            nextId: ["summary", "folder"]
        }), new SYNO.ActiveBackup.Restore.FolderStep({
            headline: _LABS("restore_wizard", "folder_step_head"),
            description: _LABS("restore_wizard", "folder_step_desc"),
            owner: this,
            itemId: "folder",
            nextId: "hypervisor"
        }), new SYNO.ActiveBackup.Restore.HypervisorStep({
            headline: _LABS("restore_wizard", "hypervisor_step_head"),
            description: _LABS("restore_wizard", "hypervisor_step_desc"),
            owner: this,
            itemId: "hypervisor",
            nextId: "datastore"
        }), new SYNO.ActiveBackup.Restore.DatastoreStep({
            headline: _LABS("restore_wizard", "datastore_step_head"),
            description: _LABS("restore_wizard", "datastore_step_desc"),
            owner: this,
            itemId: "datastore",
            nextId: "network"
        }), new SYNO.ActiveBackup.Restore.NetworkStep({
            headline: _LABS("restore_wizard", "network_step_head"),
            description: _LABS("restore_wizard", "network_step_desc"),
            owner: this,
            itemId: "network",
            nextId: "summary"
        }), new SYNO.ActiveBackup.Restore.SummaryStep({
            headline: _LABS("restore_wizard", "summary_step_head"),
            description: _LABS("restore_wizard", "summary_step_desc"),
            owner: this,
            itemId: "summary",
            nextId: null
        })]
    },
    onOpen: function() {
        this.callParent(arguments);
        this.getActiveStep().preload()
    },
    getDevice: function(a) {
        return this.store.getById(a)
    },
    getDevices: function(a) {
        a = a.join(",");
        var b = [];
        this.store.each(function(c) {
            b.push(Ext.copyTo({}, c.data, a))
        });
        return b
    },
    setDefaultValue: function(a, b) {
        a.set(b, this.store.fields.get(b).defaultValue)
    },
    setValueIfEmpty: function(a, c, b) {
        if (SYNO.SDS.ActiveBackup.Utils.isEmpty(a.get(c))) {
            if (SYNO.SDS.ActiveBackup.Utils.isEmpty(b)) {
                this.setDefaultValue(a, c)
            } else {
                a.set(c, b)
            }
        }
    },
    validateFields: function(a) {
        var b = false;
        this.store.each(function(c) {
            if (!c.get("checked")) {
                return
            }
            Ext.each(a, function(d) {
                if (SYNO.SDS.ActiveBackup.Utils.isEmpty(c.get(d))) {
                    b = true
                }
            })
        });
        return !b
    },
    listSpecAPI: function(c, a, b, d) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "list_spec",
            version: 1,
            params: {
                task_id: this.currTaskId,
                list_fields: a,
                device_list: this.getDevices(["device_id", "version"].concat(c))
            },
            callback: function(f, e) {
                this.clearStatusBusy();
                if (!f) {
                    this.reportError(e);
                    return
                }
                Ext.each(e.device_list, function(h) {
                    var g = this.getDevice(h.device_id);
                    Ext.each(a, function(i) {
                        this.setValueIfEmpty(g, i, h[i])
                    }, this)
                }, this);
                d.call(b)
            },
            scope: this
        })
    },
    enableNFS: function(e, a, g, d, f, c) {
        var b = [];
        if (!e) {
            b.push({
                api: "SYNO.Core.FileServ.NFS",
                method: "set",
                version: 2,
                params: {
                    enable_nfs: true
                }
            })
        }
        if (0 < g.length) {
            Ext.each(g, function(h) {
                d.push({
                    client: h,
                    privilege: "rw",
                    root_squash: "root",
                    async: true,
                    insecure: false,
                    crossmnt: true,
                    security_flavor: {
                        sys: true,
                        kerberos: false,
                        kerberos_privacy: false,
                        kerberos_integrity: false
                    }
                })
            });
            b.push({
                api: "SYNO.Core.FileServ.NFS.SharePrivilege",
                method: "save",
                version: 1,
                params: {
                    share_name: a,
                    rule: d
                }
            })
        }
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            callback: function(i, h) {
                this.clearStatusBusy();
                if (!i || h.has_fail) {
                    this.reportError(h);
                    return
                }
                f.call(c)
            }
        })
    },
    handleNFSRule: function(h, g, f, e, i, j) {
        var a = false;
        var d = {};
        var c = [];
        Ext.each(g, function(k) {
            if ("rw" === k.privilege && k.crossmnt && 0 <= ["admin", "root", "all_admin"].indexOf(k.root_squash)) {
                if ("*" === k.client) {
                    a = true;
                    return false
                }
                d[k.client] = true
            }
        });
        if (!a) {
            Ext.each(e, function(k) {
                if (!d[k]) {
                    d[k] = true;
                    c.push(k)
                }
            })
        }
        if (h && 0 === c.length) {
            i.call(j);
            return
        }
        var b = new Ext.XTemplate(_LABS("warning", "confirm_enable_nfs_rule")).apply({
            share: f
        });
        if (0 < c.length) {
            b += "<br/><br/><ul><li>" + c.join("</li><li>") + "</li></ul>"
        }
        this.getMsgBox().show({
            fn: function(k) {
                if (k === "ok") {
                    this.enableNFS(h, f, c, g, i, j)
                }
            },
            msg: b,
            scope: this,
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.OKCANCEL,
            cls: "synoabk-restore conflict-msgbox"
        })
    },
    checkNFS: function(d, c) {
        var a = this.getDevices(["inventory_id", "hypervisor"]);
        var b = {};
        Ext.each(a, function(f) {
            if (f.inventory_id === SYNO.SDS.ActiveBackup.EmptyInventoryId) {
                return
            }
            var e = f.inventory_id + f.hypervisor.host_id;
            b[e] = {
                api: "SYNO.ActiveBackup.Inventory",
                method: "get_host_interface",
                version: 1,
                params: {
                    inventory_id: f.inventory_id,
                    host_id: f.hypervisor.host_id
                }
            }
        });
        this.setStatusBusy();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: [{
                    api: "SYNO.ActiveBackup.Task",
                    method: "list",
                    version: 1,
                    params: {
                        filter: {
                            task_id: this.currTaskId
                        }
                    }
                }].concat(Object.values(b))
            },
            scope: this,
            callback: function(h, f) {
                if (!h || f.has_fail) {
                    this.clearStatusBusy();
                    this.reportError(f);
                    return
                }
                var e = f.result[0].data.tasks[0].share_name;
                var g = f.result.slice(1).reduce(function(i, j) {
                    return i.concat(j.data)
                }, []);
                this.sendWebAPI({
                    compound: {
                        mode: "parallel",
                        params: [{
                            api: "SYNO.Core.FileServ.NFS",
                            method: "get",
                            version: 2
                        }, {
                            api: "SYNO.Core.FileServ.NFS.SharePrivilege",
                            method: "load",
                            version: 1,
                            params: {
                                share_name: e
                            }
                        }]
                    },
                    scope: this,
                    callback: function(j, i) {
                        this.clearStatusBusy();
                        if (!j || i.has_fail) {
                            this.reportError(i);
                            return
                        }
                        this.handleNFSRule(i.result[0].data.enable_nfs, i.result[1].data.rule, e, g, d, c)
                    }
                })
            }
        })
    },
    checkSpecAPI: function(d, a, b, e, c) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "check_spec",
            version: 1,
            params: {
                check_fields: a,
                device_list: this.getDevices(["device_id", "inventory_id"].concat(d))
            },
            callback: function(h, g) {
                this.clearStatusBusy();
                if (!h) {
                    this.reportError(g);
                    return
                }
                var i = [],
                    f = [];
                Ext.each(g.device_list, function(l) {
                    var k = this.getDevice(l.device_id);
                    var j = false;
                    Ext.each(a, function(n) {
                        var m = null;
                        if (Ext.isArray(l[n])) {
                            m = l[n].reduce(function(o, p) {
                                return o || p.error
                            }, null)
                        } else {
                            m = l[n].error
                        }
                        j = m ? true : j;
                        k.set(n, null);
                        k.set(n, l[n])
                    });
                    if (j) {
                        i.push(k)
                    }
                    if (l.restore_name_conflict) {
                        f.push(k.get("restore_name"))
                    }
                }, this);
                if (i.length > 0) {
                    c.call(b, i)
                } else {
                    if (f.length > 0) {
                        this.getMsgBox().show({
                            msg: _LABS("restore_wizard", "restore_name_conflict_desc") + "<br/><br/><ul><li>" + f.join("</li><li>") + "</li></ul>",
                            fn: function(j) {
                                if (j === "ok") {
                                    e.call(b)
                                }
                            },
                            icon: Ext.MessageBox.WARNING,
                            buttons: Ext.MessageBox.OKCANCEL,
                            cls: "synoabk-restore conflict-msgbox"
                        })
                    } else {
                        e.call(b)
                    }
                }
            },
            scope: this
        })
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.ScheduleSetterPaenl", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var d = (a.batch_edit === undefined) ? false : a.batch_edit;
        this.batch_edit_box = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: d,
            batch_type: a.batch_type
        });
        this.schedule_form = new SYNO.ux.FormPanel({
            border: false,
            height: 190,
            itemid: "schedule_panel",
            items: [{
                xtype: "syno_radiogroup",
                id: "enable_schedule_radio",
                items: [{
                    name: "enable_schedule",
                    boxLabel: _LABS("schedule", "disable"),
                    inputValue: "disable",
                    checked: true
                }, {
                    name: "enable_schedule",
                    boxLabel: _LABS("schedule", "enable"),
                    inputValue: "enable"
                }]
            }, {
                xtype: "syno_compositefield",
                name: "repeat_weekday",
                fieldLabel: _LABS("schedule", "run_weekday"),
                indent: 1,
                items: [{
                    xtype: "syno_schedulefield",
                    width: 200,
                    name: "run_weekday",
                    value: [0, 1, 2, 3, 4, 5, 6],
                    editable: false
                }]
            }, {
                xtype: "syno_combobox",
                fieldLabel: _LABS("schedule", "repeat_type"),
                indent: 1,
                name: "repeat_type",
                width: 200,
                displayField: "display",
                valueField: "value",
                value: "Hourly",
                store: this.createRepeatTypeStore()
            }, {
                xtype: "syno_compositefield",
                name: "running_time",
                fieldLabel: _LABS("schedule", "run_time"),
                indent: 1,
                items: [{
                    xtype: "syno_combobox",
                    name: "run_hour",
                    width: 60,
                    displayField: "display",
                    valueField: "value",
                    value: 3,
                    store: SYNO.SDS.Utils.createTimeItemStore("hour")
                }, {
                    xtype: "syno_displayfield",
                    value: ":",
                    width: 6
                }, {
                    xtype: "syno_combobox",
                    name: "run_min",
                    width: 60,
                    value: 0,
                    displayField: "display",
                    valueField: "value",
                    store: SYNO.SDS.Utils.createTimeItemStore("min")
                }]
            }],
            listeners: {
                scope: this,
                afterlayout: function() {
                    new SYNO.ux.Utils.EnableCheckGroup(this.schedule_form.getForm(), "enable_schedule", [], ["repeat_type", "repeat_weekday", "running_time"])
                }
            }
        });
        var c = true;
        if (a.hide_instant_backup_checkbox !== undefined && a.hide_instant_backup_checkbox !== null) {
            c = a.hide_instant_backup_checkbox
        }
        var b = Ext.apply({
            title: _LABS("common", "settings_schedule"),
            border: false,
            items: [this.batch_edit_box, this.schedule_form, {
                id: "chx_template_instant_backup",
                xtype: "syno_checkbox",
                boxLabel: _LABS("template", "instant_backup"),
                hidden: c
            }]
        }, a);
        this.callParent([b])
    },
    createRepeatTypeStore: function() {
        return new Ext.data.ArrayStore({
            fields: ["value", "display"],
            data: SYNO.SDS.ActiveBackup.ScheduleTypeData
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.schedule_form.getForm().items.each(function(a) {
            this.mon(a, "change", this.fireCheckValid, this)
        }, this);
        this.mon(this, "setting", this.setConfig, this);
        this.mon(this, "activate", this.initBatchEdit, this);
        this.mon(this.batch_edit_box.getComponent("batch_edit_checkbox"), "check", this.checkBatchEdit, this)
    },
    initBatchEdit: function() {
        if (this.batch_edit_box.hidden === false) {
            this.checkBatchEdit()
        }
        this.mun(this, "activate", this.initBatchEdit, this)
    },
    checkBatchEdit: function() {
        var a = this.batch_edit_box.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.schedule_form.enable();
            this.getComponent("chx_template_instant_backup").enable()
        } else {
            this.schedule_form.disable();
            this.getComponent("chx_template_instant_backup").disable()
        }
    },
    fireCheckValid: function() {
        this.fireEvent("checkvalid", this)
    },
    setConfig: function(c) {
        var b = this.schedule_form.getForm();
        if (c.sched_content !== undefined && c.sched_content !== null) {
            if (c.next_trigger_time === "") {
                Ext.apply(c.sched_content, {
                    enable_schedule: "disable"
                })
            }
            var a = SYNO.SDS.ActiveBackup.ScheduleTypeData.map(function(e) {
                return e[0]
            });
            if (a.indexOf(c.sched_content.repeat_type) === -1) {
                c.sched_content.repeat_type = "Hourly"
            }
            if (c.sched_content.hasOwnProperty("repeat_hour")) {
                c.sched_content.repeat_type = (c.sched_content.repeat_hour === 1) ? "Hourly" : c.sched_content.repeat_type
            }
            b.setValues(c.sched_content);
            var d = c.sched_content.run_weekday.map(function(e) {
                return e.toString(10)
            }).join(",");
            b.findField("run_weekday").setValue(d)
        }
        if (c.instant_backup !== undefined && c.instant_backup !== null) {
            Ext.getCmp("chx_template_instant_backup").setValue(c.instant_backup)
        }
    },
    validate: function() {
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
            return true
        }
        return this.schedule_form.getForm().isValid()
    },
    getParams: function() {
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
            return {}
        }
        var c;
        var b = this.schedule_form.getForm();
        c = b.getValues();
        if (c.enable_schedule === "enable") {
            c.run_weekday = b.findField("run_weekday").getValue().split(",").map(function(d) {
                return parseInt(d, 10)
            })
        }
        if (c.repeat_type === "Hourly") {
            c.repeat_hour = 1;
            c.repeat_type = "Weekly"
        }
        var a = {
            sched_content: c
        };
        if (!Ext.getCmp("chx_template_instant_backup").hidden) {
            a.instant_backup = Ext.getCmp("chx_template_instant_backup").checked
        }
        return a
    }
});
Ext.define("SYNO.ActiveBackup.RetentionCompositefield", {
    extend: "SYNO.ux.Panel",
    constructor: function(b) {
        this.checkbox = new SYNO.ux.Checkbox({
            boxLabel: b.checkbox_description,
            handler: this.onCheckBoxCheck,
            width: 430,
            disabled: true,
            checked: true
        });
        this.numberfield = new SYNO.ux.NumberField({
            hideLabel: true,
            regex: /^\d+$/,
            width: 84,
            allowBlank: false,
            allowNegative: false,
            disabled: true,
            maxlength: b.maxLength,
            value: b.initValue,
            minValue: 1,
            maxValue: b.maxValue,
            enableKeyEvents: true
        });
        this.label = new SYNO.ux.DisplayField({
            hideLabel: true,
            disabled: true,
            value: b.label_description
        });
        var a = new SYNO.ux.CompositeField({
            hideLabel: true,
            indent: 1,
            name: b.name,
            items: [this.checkbox, {
                xtype: "syno_panel",
                width: 10
            }, this.numberfield, this.label]
        });
        var c = Ext.apply({
            itemId: b.name,
            autoWidth: true,
            items: [a, {
                xtype: "syno_panel",
                height: 5
            }]
        }, b);
        this.callParent([c])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.checkbox, "check", function() {
            if (this.checkbox.checked && this.checkbox.disabled === false) {
                this.numberfield.enable()
            } else {
                this.numberfield.disable()
            }
            this.onUpdate()
        }, this);
        this.mon(this.numberfield, "enable", function() {
            if (this.checkbox.checked === false) {
                this.numberfield.disable()
            }
        }, this);
        this.mon(this.numberfield, "change", this.onUpdate, this)
    },
    onUpdate: function() {
        this.fireEvent("update", this)
    },
    setValue: function(a, b) {
        if (a === true) {
            this.checkbox.setValue(true);
            this.numberfield.setValue(b)
        } else {
            this.checkbox.setValue(false);
            this.numberfield.setValue("")
        }
    },
    validate: function() {
        if (!this.numberfield.isValid()) {
            if (this.numberfield.value !== "0") {
                this.numberfield.setValue("")
            }
        }
        return (this.checkbox.checked && !this.numberfield.isValid()) ? false : true
    },
    isChecked: function() {
        return this.checkbox.checked
    },
    getParams: function() {
        return this.numberfield.value
    }
});
Ext.define("SYNO.ActiveBackup.RetentionEditPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillconfig(a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "show", function() {
            this.doLayout()
        });
        this.mon(this, "setting", function(a) {
            this.initValue(a.retention_policy)
        }, this);
        if (this.mode !== "edit") {
            this.mon(this.radio_enable_retention, "change", this.onChanged, this);
            this.retention_compositefield_config.forEach(function(a) {
                this.mon(this.retention_form.getComponent(a.name), "update", this.onChanged, this)
            }, this)
        }
        this.mon(this, "afterlayout", function() {
            new SYNO.ux.Utils.EnableRadioGroup(this.retention_form.getForm(), "radio_enable_retention", {
                2: ["keep_days", "gfs_days", "gfs_weeks", "gfs_months", "gfs_years"]
            })
        }, this, {
            single: true
        });
        this.mon(this, "activate", this.initBatchEdit, this);
        this.mon(this.batch_edit_box.getComponent("batch_edit_checkbox"), "check", this.checkBatchEdit, this)
    },
    initValue: function(a) {
        this.origin_retention_policy = a;
        var c, b;
        for (c = 0; c < this.retention_compositefield_config.length; c++) {
            b = this.retention_compositefield_config[c].name;
            if (a.hasOwnProperty(b)) {
                this.retention_form.getComponent(b).setValue(true, a[b])
            } else {
                this.retention_form.getComponent(b).setValue(false, "")
            }
        }
        var d = (a.hasOwnProperty("keep_all") && a.keep_all) ? SYNO.ActiveBackup.RetentionType.KEEP_ALL : SYNO.ActiveBackup.RetentionType.APPLY_POLICY;
        this.radio_enable_retention.setValue(d)
    },
    resetValue: function() {
        Ext.each(this.retention_compositefield_config, function(a) {
            this.retention_form.getComponent(a.name).setValue(false)
        }, this);
        this.fireEvent("setting", {
            retention_policy: {
                keep_all: true
            }
        })
    },
    fillconfig: function(a) {
        var b = [];
        var e = (a.batch_edit === undefined) ? false : a.batch_edit;
        this.batch_edit_box = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: e,
            batch_type: a.batch_type
        });
        this.radio_enable_retention = new SYNO.ux.RadioGroup({
            id: "radio_enable_retention",
            items: [{
                name: "radio_enable_retention",
                boxLabel: _LABS("retention", "radio_button_keep_all"),
                inputValue: SYNO.ActiveBackup.RetentionType.KEEP_ALL,
                checked: true
            }, {
                name: "radio_enable_retention",
                boxLabel: _LABS("retention", "radio_button_apply_policy"),
                inputValue: SYNO.ActiveBackup.RetentionType.APPLY_POLICY
            }]
        });
        b.push(this.radio_enable_retention);
        this.retention_compositefield_config = [{
            name: "keep_days",
            checkbox_description: _LABS("retention", "keep_days_description"),
            label_description: _LABS("retention", "keep_days"),
            initValue: 1,
            maxValue: 9999,
            maxLength: 4
        }, {
            name: "gfs_days",
            checkbox_description: _LABS("retention", "gfs_days_description"),
            label_description: _LABS("retention", "gfs_days"),
            initValue: 7,
            maxValue: 9999,
            maxLength: 4
        }, {
            name: "gfs_weeks",
            checkbox_description: _LABS("retention", "gfs_weeks_description"),
            label_description: _LABS("retention", "gfs_weeks"),
            initValue: 4,
            maxValue: 999,
            maxLength: 3
        }, {
            name: "gfs_months",
            checkbox_description: _LABS("retention", "gfs_months_description"),
            label_description: _LABS("retention", "gfs_months"),
            initValue: 12,
            maxValue: 999,
            maxLength: 3
        }, {
            name: "gfs_years",
            checkbox_description: _LABS("retention", "gfs_years_description"),
            label_description: _LABS("retention", "gfs_years"),
            initValue: 3,
            maxValue: 99,
            maxLength: 2
        }];
        this.retention_compositefield_config.forEach(function(g) {
            var h = new SYNO.ActiveBackup.RetentionCompositefield(g);
            this.push(h)
        }, b);
        var f = new SYNO.ux.Panel({
            border: false,
            height: a.mode === "edit" ? 40 : 10
        });
        var d = new SYNO.ux.Panel({
            border: false,
            id: "gfs_note",
            html: '<span style="color:#18a570;">' + _LABS("retention", "gfs_note") + "</span>" + _LABS("retention", "gfs_description")
        });
        b.push(f);
        b.push(d);
        var c = {
            cls: "retention",
            title: _LABS("component", "Retention_tab_title"),
            autoFlexcroll: false,
            border: false,
            items: [this.batch_edit_box, this.retention_form = new SYNO.ux.FormPanel({
                useGradient: false,
                items: b,
                autoHeight: true
            })]
        };
        return Ext.apply(c, a)
    },
    initBatchEdit: function() {
        if (this.batch_edit_box.hidden === false) {
            this.checkBatchEdit()
        }
        this.mun(this, "activate", this.initBatchEdit, this)
    },
    checkBatchEdit: function() {
        var a = this.batch_edit_box.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.retention_form.getComponent("radio_enable_retention").enable();
            this.retention_form.getComponent("gfs_note").enable()
        } else {
            this.retention_form.getComponent("radio_enable_retention").disable();
            this.retention_form.getComponent("gfs_note").disable()
        }
    },
    validate: function() {
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
            return true
        }
        var d, c, b;
        if (this.radio_enable_retention.getValue().getInputValue() === SYNO.ActiveBackup.RetentionType.APPLY_POLICY) {
            var a = true;
            for (d = 0; d < this.retention_compositefield_config.length; d++) {
                c = this.retention_compositefield_config[d].name;
                if (this.retention_form.getComponent(c).validate() === false) {
                    a = false;
                    if (this.mode === "edit") {
                        this.owner.getMsgBox().alert("", _LABS("warning", "no_input_value"))
                    }
                }
            }
            if (!a) {
                return a
            }
            b = false;
            for (d = 0; d < this.retention_compositefield_config.length; d++) {
                c = this.retention_compositefield_config[d].name;
                if (this.retention_form.getComponent(c).isChecked() === true) {
                    b = true;
                    break
                }
            }
            if (!b) {
                if (this.mode === "edit") {
                    this.owner.getMsgBox().alert("", _LABS("warning", "no_select_policy"))
                }
                return false
            }
        }
        return true
    },
    isDirty: function() {
        var a = this.getParams().retention_policy;
        if (Object.keys(a).length !== Object.keys(this.origin_retention_policy).length) {
            return true
        }
        for (var b in this.origin_retention_policy) {
            if (!a.hasOwnProperty(b) || (this.origin_retention_policy[b] !== a[b])) {
                return true
            }
        }
        return false
    },
    getParams: function() {
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
            return {}
        }
        var c, b;
        var a = {};
        a.keep_all = (this.radio_enable_retention.getValue().getInputValue() === SYNO.ActiveBackup.RetentionType.KEEP_ALL) ? true : false;
        for (c = 0; c < this.retention_compositefield_config.length; c++) {
            b = this.retention_compositefield_config[c].name;
            if (this.retention_form.getComponent(b).isChecked()) {
                a[b] = this.retention_form.getComponent(b).getParams()
            }
        }
        return {
            retention_policy: a
        }
    },
    onChanged: function() {
        this.fireEvent("checkvalid", this)
    }
});
Ext.define("SYNO.ActiveBackup.PrivilegePanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this._mask_owner = [];
        this.batch_edit = (a.batch_edit === undefined) ? false : a.batch_edit;
        this.has_pc = false;
        this.has_server = false;
        this.owner = a.owner;
        this.batch_edit_box = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: this.batch_edit,
            batch_type: a.batch_type
        });
        var b = Ext.apply({
            title: _LABS("component", "privilege_tab_title"),
            height: 380,
            layout: {
                type: "vbox",
                pack: "start",
                align: "stretch"
            },
            items: [this.batch_edit_box, {
                xtype: "panel",
                border: false,
                height: 8
            }, this.userPanel = new SYNO.ActiveBackup.UserGroupGridPanel({
                id: "user_group_grid",
                appWin: a.appWin,
                flex: 1,
                border: false,
                records: a.records,
                disabled: this.batch_edit,
                first_load: true,
                owner: this
            }), {
                id: "user_group_label",
                cls: "privilege-usergroup",
                xtype: "panel",
                height: 28,
                border: false,
                html: this.getUserGroupText("---", "---"),
                bodyStyle: "width: 100%; font-size: 12px; text-align:right;"
            }]
        }, a);
        return this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.onActivate, this);
        if (this.mode === "edit") {
            this.mon(this, "setting", this.onInitialValue, this)
        }
        this.onInitialValue({
            users: [],
            groups: [],
            unavailable_users_count: 0,
            unavailable_groups_count: 0
        });
        this.mon(this.batch_edit_box.getComponent("batch_edit_checkbox"), "check", this.checkEditPrivilege, this)
    },
    onInitialValue: function(a) {
        var b = function(c) {
            return c.map(function(d) {
                return {
                    uid: d
                }
            })
        };
        this.total_params = {
            users: b(a.users),
            groups: b(a.groups)
        };
        this.admin_users = [];
        this.admin_groups = [];
        this.unavailable_users_count = a.unavailable_users_count;
        this.unavailable_groups_count = a.unavailable_groups_count
    },
    onActivate: function() {
        this.checkEditPrivilege()
    },
    checkEditPrivilege: function() {
        if (this.has_pc) {
            if (this.has_server) {
                this.setMask(_LABS("template", "batch_template_privilege"))
            } else {
                this.setMask(_LABS("template", "pc_template_privilege"))
            }
        } else {
            if (this.userPanel.first_load) {
                this.mon(this.getComponent("user_group_grid"), "maskWindow", function() {
                    this.maskWindow("initial_permission")
                }, this);
                this.mon(this.getComponent("user_group_grid"), "unmaskWindow", function() {
                    this.unmaskWindow("initial_permission")
                }, this);
                this.mon(this.getComponent("user_group_grid"), "loadPermissions_done", function() {
                    this.onUpdateAdminUsersGroups(this.total_params)
                }, this, {
                    single: true
                });
                this.mon(this.getComponent("user_group_grid"), "load_finish", this.checkEditPrivilege, this, {
                    single: true
                });
                this.userPanel.loadPermissionData()
            } else {
                if (this.batch_edit && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
                    this.getComponent("user_group_grid").disable();
                    this.getComponent("user_group_label").disable()
                } else {
                    this.getComponent("user_group_grid").enable();
                    this.getComponent("user_group_label").enable()
                }
            }
        }
    },
    setTargetType: function(b, a) {
        this.has_pc = b;
        this.has_server = a
    },
    setMask: function(b) {
        var a = this.getComponent("user_group_grid");
        var c = this.getComponent("user_group_label");
        a.disable();
        c.disable();
        a.mask(b);
        c.update(this.getUserGroupText("---", "---"))
    },
    getUserGroupText: function(c, f) {
        var d = '<span style="font-size:12px; font-weight:bold; color:#505A64;">' + _LABS("agentbk", "selected") + "</span>";
        var g = '<span style="display:inline-block; vertical-align: middle;" class="icon user"></span>';
        var b = '<span style="font-size:12px; font-weight:bold; color:#0068E6; padding-right:6px">' + c + "</span>";
        var a = '<span style="display:inline-block; vertical-align: middle;" class="icon group"></span>';
        var e = '<span style="font-size:12px; font-weight:bold; color:#0068E6">' + f + "</span>";
        return (d + g + b + a + e)
    },
    existsByKey: function(c, a, b) {
        return c.some(function(d) {
            return d[a] === b
        })
    },
    uniqueMergeList: function(c, a, b) {
        var d = a.map(function(e) {
            return e[c]
        });
        return a.concat(b.filter(function(e) {
            return d.indexOf(e[c]) === -1
        }, this))
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    onUpdateAdminUsersGroups: function(b) {
        this.maskWindow("initial_admin_usergroup");
        var c = this.getComponent("user_group_grid").needListDomainLdapAdmin();
        var a = [{
            api: "SYNO.ActiveBackup.UserGroup",
            method: "list_admin",
            version: 1,
            params: {
                type: "local"
            }
        }];
        if (c === true) {
            a.push({
                api: "SYNO.ActiveBackup.UserGroup",
                method: "list_admin",
                version: 1,
                params: {
                    type: "domain_ldap"
                }
            })
        }
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(j, e, h) {
                this.unmaskWindow("initial_admin_usergroup");
                if (!j || e.has_fail) {
                    var g = SYNO.API.Util.GetFirstError(e);
                    this.reportError(g)
                }
                var i = [];
                var f = [];
                var k = (b === undefined) ? [] : b.users;
                var d = (b === undefined) ? [] : b.groups;
                e.result.forEach(function(l) {
                    if (l.success) {
                        i = i.concat(l.data.users);
                        f = f.concat(l.data.groups)
                    }
                });
                this.admin_users = i;
                this.admin_groups = f;
                k = this.uniqueMergeList("uid", k, i);
                d = this.uniqueMergeList("uid", d, f);
                this.total_params = {
                    users: k,
                    groups: d
                };
                this.initialUserPanel()
            }
        })
    },
    initialUserPanel: function() {
        this.mon(this.userPanel.getStore(), "load", this.setDefaultValue, this);
        this.userPanel.getStore().load();
        this.mon(this.userPanel.getStore(), "beforeload", this.onBeforeLoadStore, this);
        if (this.mode !== "edit") {
            this.fireEvent("checkvalid", this)
        }
    },
    setDefaultValue: function() {
        this.userPanel.setDefaultValue(this.total_params);
        this.onSelectChanged();
        this.mon(this.userPanel.getStore(), "update", this.onSelectChanged, this)
    },
    onSelectChanged: function() {
        var a = this.userPanel.getDiffCount();
        this.updateUserGroupLabel(a)
    },
    updateUserGroupLabel: function(c) {
        var a = this.total_params.users.length + c.users_change - this.unavailable_users_count;
        var b = this.total_params.groups.length + c.groups_change - this.unavailable_groups_count;
        Ext.getCmp("user_group_label").update(this.getUserGroupText(a, b))
    },
    onBeforeLoadStore: function() {
        this.onUpdateTotalParams();
        this.mun(this.userPanel.getStore(), "update", this.onSelectChanged, this)
    },
    onUpdateTotalParams: function() {
        var b = this.userPanel.getDiffParams();
        var a = this.total_params;
        if (!b || !a) {
            return
        }
        a.users = a.users.filter(function(c) {
            return !this.existsByKey(b.del_users, "uid", c.uid)
        }, this);
        a.groups = a.groups.filter(function(c) {
            return !this.existsByKey(b.del_groups, "uid", c.uid)
        }, this);
        a.users = this.uniqueMergeList("uid", a.users, b.add_users);
        a.groups = this.uniqueMergeList("uid", a.groups, b.add_groups);
        this.userPanel.setDefaultValue(a);
        this.total_params = a
    },
    validate: function() {
        if (this.userPanel.disabled) {
            return true
        }
        this.onUpdateTotalParams();
        var a = this.total_params;
        if (a.users.size() === 0 && a.groups.size() === 0) {
            if (this.mode === "edit") {
                this.appWin.getMsgBox().alert("", _LABS("warning", "no_select_usergroup"))
            }
            return false
        }
        return true
    },
    getPrivilege: function() {
        return this.total_params
    },
    getParams: function() {
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
            return {}
        }
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === true && this.getComponent("user_group_grid").disabled === true) {
            return {}
        }
        return {
            users: this.total_params.users.map(function(a) {
                return a.uid
            }),
            groups: this.total_params.groups.map(function(a) {
                return a.uid
            })
        }
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.UserGroupGridPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    DEFAULT_ROLES: [
        ["local_user", _T("share", "share_local_user")],
        ["local_group", _T("share", "share_local_group")]
    ],
    DOMAIN_ROLES: [
        ["domain_user", _T("share", "share_domain_user")],
        ["domain_group", _T("share", "share_domain_group")]
    ],
    LDAP_ROLES: [
        ["ldap_user", _T("share", "ldap_user")],
        ["ldap_group", _T("share", "ldap_group")]
    ],
    _createStore: function(a) {
        return new SYNO.API.JsonStore({
            autoDestroy: true,
            remoteSort: true,
            api: "SYNO.ActiveBackup.UserGroup",
            method: "list",
            version: 1,
            appWindow: a.appWin,
            autoLoad: false,
            baseParams: {
                offset: 0,
                limit: this.pageSize,
                user_group_type: "local_user"
            },
            root: "users_groups",
            idProperty: "uid",
            id: "uid",
            totalProperty: "total",
            fields: ["name", "uid", "is_group", "is_admin"],
            scope: this
        })
    },
    constructor: function(b) {
        this._mask_owner = [];
        this.pageSize = 20;

        function a(i) {
            return new Ext.grid.ColumnModel({
                defaults: {
                    sortable: true
                },
                columns: [i, {
                    header: _LABS("agentbk", "name"),
                    dataIndex: "name",
                    renderer: function(l, m, j) {
                        var k;
                        if (j.get("is_group") === true) {
                            k = "group"
                        } else {
                            k = "user"
                        }
                        return '<span style="display:inline-block; vertical-align:middle;" class="icon ' + k + '"></span>' + l
                    }
                }]
            })
        }
        var f = this._createStore(b);
        this.roleFilter = new SYNO.ux.ComboBox({
            iconStyle: "filter",
            itemId: "roleFilter",
            valueField: "role",
            displayField: "display",
            store: {
                xtype: "arraystore",
                autoDestroy: true,
                fields: ["role", "display"]
            },
            mode: "local",
            triggerAction: "all",
            editable: false,
            forceSelection: true,
            width: 202,
            listeners: {
                beforeselect: {
                    scope: this,
                    fn: this.onRoleFilterSelect
                }
            }
        });
        this.domainFilter = new SYNO.ux.ComboBox({
            iconStyle: "filter",
            itemId: "domainFilter",
            valueField: "value",
            displayField: "domain",
            store: {
                xtype: "arraystore",
                autoDestroy: true,
                fields: ["domain", "value", "comment"]
            },
            hidden: true,
            resizable: true,
            mode: "local",
            triggerAction: "all",
            editable: false,
            value: "",
            forceSelection: true,
            width: 100,
            tpl: '<tpl for="."><div ext:qtip="{comment}" class="x-combo-list-item">{domain}</div></tpl>',
            listeners: {
                beforeselect: {
                    scope: this,
                    fn: this.onDomainFilterSelect
                }
            }
        });

        function h(i) {
            return new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                resizable: true,
                width: 240,
                emptyText: _LABS("agentbk", "search_by_name"),
                store: f,
                queryParam: "substr",
                pageSize: i
            })
        }
        var g = new SYNO.ux.Toolbar({
            items: [this.roleFilter, "->", this.domainFilter, h(this.pageSize)]
        });

        function e(i) {
            return new SYNO.ux.PagingToolbar({
                id: "privilege_pagingtoolbar",
                store: f,
                pageSize: i,
                buttonAlign: "left",
                displayInfo: true
            })
        }
        var d = new SYNO.ux.EnableColumn({
            header: _LABS("agentbk", "enable"),
            dataIndex: "enabled",
            align: "center",
            width: 144,
            fixed: true,
            isIgnore: function(j, i) {
                return true === i.get("is_admin")
            },
            renderer: function(k, j, i) {
                if (true === i.get("is_admin")) {
                    return this.disableRenderer(k, j, i)
                }
                return SYNO.ux.EnableColumn.prototype.renderer.call(this, k, j, i)
            }
        });
        var c = Ext.apply({
            store: f,
            cls: "privilege-usergroup",
            colModel: a(d),
            enableColumnHide: false,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            plugins: [d],
            tbar: g,
            bbar: e(this.pageSize),
            viewConfig: {
                markDirty: false
            }
        }, b);
        return this.callParent([c])
    },
    maskUserGroupPanel: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskUserGroupPanel: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    initEvents: function() {
        this.mon(this.getStore(), "beforeload", function() {
            this.maskUserGroupPanel("store_load")
        }, this);
        this.mon(this.getStore(), "load", this.onDataLoad, this);
        this.mon(this.getStore(), "exception", this.onStoreException, this)
    },
    onDataLoad: function() {
        this.getStore().each(function(a) {
            a.set("enabled", false);
            if (a.data.is_admin === true) {
                a.set("enabled", true)
            }
        });
        this.unmaskUserGroupPanel("store_load");
        this.fireEvent("load_finish", this)
    },
    setDataDisable: function() {
        this.getStore().each(function(a) {
            if (!a.data.is_admin) {
                a.set("enabled", false)
            }
        })
    },
    onStoreException: function(d, e, f, c, b, a) {
        SYNO.Debug("Store exception: options:", d, e, f, c, b, a);
        this.unmaskUserGroupPanel("store_load");
        this.getStore().removeAll();
        this.reportError(b);
        return
    },
    setDefaultValue: function(b) {
        var c = [];
        var a = [];
        this.getStore().each(function(f) {
            var e = (f.data.is_group === true) ? b.groups : b.users;
            for (var d = 0; d < e.length; ++d) {
                if (f.data.uid === e[d].uid) {
                    f.set("enabled", true);
                    if (f.data.is_group === true) {
                        a.push(f.data)
                    } else {
                        c.push(f.data)
                    }
                    break
                }
            }
        });
        this.ori_page_params = {
            users: c,
            groups: a
        }
    },
    onRoleFilterSelect: function(b, a) {
        var c = a.data.role;
        this.store.baseParams.user_group_type = c;
        if (c === "domain_user" || c === "domain_group") {
            this.showDomainFilter(true)
        } else {
            this.showDomainFilter(false)
        }
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    onDomainFilterSelect: function(b, a) {
        this.store.baseParams.domain = a.data.value;
        this.store.load({
            params: {
                offset: 0
            }
        })
    },
    showDomainFilter: function(a) {
        this.domainFilter.setVisible(a)
    },
    loadPermissionData: function() {
        this.first_load = false;
        this.fireEvent("maskWindow");
        var a = [{
            api: "SYNO.Core.Directory.LDAP",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "get",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "test_dc",
            version: 1
        }, {
            api: "SYNO.Core.Directory.Domain",
            method: "get_domain_list",
            version: 2
        }];
        this.sendWebAPI({
            params: {},
            compound: {
                stopwhenerror: false,
                params: a
            },
            scope: this,
            callback: function(e, b, d) {
                if (!e || b.has_fail) {
                    var c = SYNO.API.Util.GetFirstError(b);
                    this.appWin.getMsgBox().alert("share", SYNO.API.Errors.core[c.code] || _T("common", "commfail"));
                    this.fireEvent("unmaskWindow");
                    return
                }
                this.loadPermissions(b);
                this.fireEvent("unmaskWindow")
            }
        });
        this.show()
    },
    needListDomainLdapAdmin: function() {
        return (this.roleFilter.getStore().getTotalCount() === 2) ? false : true
    },
    loadPermissions: function(f) {
        var g = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Directory.LDAP", "get", "enable_client");
        var b = (2702 === SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Directory.LDAP", "get", "error"));
        var h = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Directory.Domain", "get", "enable_domain");
        var e = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Directory.Domain", "test_dc", "test_join_success");
        var d = SYNO.API.Util.GetValByAPI(f, "SYNO.Core.Directory.Domain", "get_domain_list", "domain_list");
        var a = this.roleFilter.getStore();
        var j = this.domainFilter.getStore();
        var i = [];
        a.loadData(this.DEFAULT_ROLES);
        if (g && b) {
            a.loadData(this.LDAP_ROLES, true)
        }
        if (h && e && 0 !== d.length) {
            a.loadData(this.DOMAIN_ROLES, true);
            Ext.each(d, function(k) {
                if (typeof k === "object") {
                    i.push(k)
                } else {
                    i.push([k, k, k])
                }
            }, this);
            j.loadData(i);
            if (!this.domainFilter.getValue()) {
                this.domainFilter.setValue(i[0][1] || "")
            }
            this.store.baseParams.domain = this.domainFilter.getValue()
        }
        this.showDomainFilter(false);
        this.roleFilter.setValue("local_user");
        this.store.baseParams.user_group_type = this.roleFilter.getValue();
        var c;
        if (g && !b) {
            c = {
                code: 1005
            };
            this.reportError(c)
        }
        if (h && !e) {
            c = {
                code: 1004
            };
            this.reportError(c)
        }
        this.fireEvent("loadPermissions_done", this)
    },
    getDiffCount: function() {
        var a = this.getParams();
        return {
            users_change: a.users.length - this.ori_page_params.users.length,
            groups_change: a.groups.length - this.ori_page_params.groups.length
        }
    },
    getDiffParams: function() {
        var g = this.getParams();
        var a = this.ori_page_params;
        if (!g || !a) {
            return
        }
        var f = [];
        var k = [];
        var h = [];
        var b = [];
        var d, e, j;
        for (var c = 0; c < this.getStore().data.items.length; ++c) {
            d = this.getStore().data.items[c].data;
            if (this.getStore().data.items[c].data.is_group) {
                e = this.owner.existsByKey(g.groups, "uid", d.uid);
                j = this.owner.existsByKey(a.groups, "uid", d.uid);
                if (e && !j) {
                    h.push(d)
                } else {
                    if (!e && j) {
                        b.push(d)
                    }
                }
            } else {
                e = this.owner.existsByKey(g.users, "uid", d.uid);
                j = this.owner.existsByKey(a.users, "uid", d.uid);
                if (e && !j) {
                    f.push(d)
                } else {
                    if (!e && j) {
                        k.push(d)
                    }
                }
            }
        }
        return {
            add_users: f,
            add_groups: h,
            del_users: k,
            del_groups: b
        }
    },
    getParams: function() {
        var d = [];
        var a = [];
        for (var b = 0; b < this.getStore().data.items.length; ++b) {
            if (this.getStore().data.items[b].data.enabled) {
                var c = this.getStore().data.items[b].data;
                if (this.getStore().data.items[b].data.is_group) {
                    a.push(c)
                } else {
                    d.push(c)
                }
            }
        }
        return {
            users: d,
            groups: a
        }
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agent.SourceTypeWizardPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.backup_type = a.backup_type;
        var b = Ext.apply({
            items: [this.sourceTypePanel = new SYNO.ActiveBackup.Agent.SourceTypePanel({
                backup_type: this.backup_type,
                source_type: SYNO.ActiveBackup.SourceType.BARE_METAL,
                mode: a.mode,
                appWin: a.appWin,
                owner: a.owner,
                device_id: a.device_id
            }), this.taskSettingPanel = new SYNO.ActiveBackup.Agent.TaskSettingPanel({
                appWin: a.appWin,
                backup_type: this.backup_type
            })]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.sourceTypePanel, "radioChange", this.fireCheckValid, this);
        this.mon(this.sourceTypePanel, "cusVolChanged", this.fireCheckValid, this);
        this.mon(this.taskSettingPanel, "mask", this.maskWindow, this);
        this.mon(this.taskSettingPanel, "unmask", this.unmaskWindow, this);
        if (this.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
            this.mon(this, "checkvalid", function() {
                this.taskSettingPanel.checkVerificationEnable({
                    value: this.sourceTypePanel.getValue(),
                    cusVol: this.sourceTypePanel.getCusVol()
                })
            }, this)
        }
        this.taskSettingPanel.setOwner(this.owner)
    },
    activate: function() {
        this.taskSettingPanel.activate()
    },
    fireCheckValid: function() {
        this.fireEvent("checkvalid", this)
    },
    validate: function() {
        var a = this.getParams();
        if (a.source_type === SYNO.ActiveBackup.SourceType.CUSVOL && a.cus_vols.size() === 0) {
            return false
        }
        if (this.taskSettingPanel.getEnableVerification() && !this.taskSettingPanel.isVerificationPolicyValid()) {
            return false
        }
        return true
    },
    getParams: function() {
        return {
            source_type: this.sourceTypePanel.getValue(),
            cus_vols: this.sourceTypePanel.getCusVol(),
            enable_compress_transfer: this.taskSettingPanel.getCompress(),
            enable_encrypt_transfer: this.taskSettingPanel.getEncrypt(),
            enable_verification: this.taskSettingPanel.getEnableVerification(),
            verification_policy: this.taskSettingPanel.getVerificationPolicy(),
            enable_app_aware_bkp: this.taskSettingPanel.getAppAware()
        }
    },
    maskWindow: function(a) {
        this.getEl().mask(_T("common", "loading"), "x-mask-loading")
    },
    unmaskWindow: function(a) {
        this.getEl().unmask()
    },
    setDeviceId: function(a) {
        this.sourceTypePanel.setDeviceId(a)
    },
    changeMode: function(a) {
        this.sourceTypePanel.changeMode(a)
    }
});
Ext.define("SYNO.ActiveBackup.Agent.SourceTypePanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.mode = a.mode;
        this.source_type = a.source_type;
        this.device_id = a.device_id;
        this.select_btn = new SYNO.ux.Button({
            id: "select_btn_id",
            itemId: "select_btn",
            xtype: "syno_button",
            style: "margin-left: 10px;",
            text: _LABS("common", "select"),
            disabled: true,
            handler: this.onSelectClick,
            scope: this,
            hidden: this.mode === SYNO.SDS.ActiveBackup.CreateMode.BATCH
        });
        var b = Ext.apply({
            border: false,
            labelStyle: "line-height: 28px; padding: 0px 0px 0px 10px",
            style: "margin-left: 10px",
            fieldLabel: _LABS("common", "settings_sourceType"),
            items: [{
                xtype: "syno_radiogroup",
                id: "radio_source_type",
                items: [{
                    name: "radio_source_type",
                    boxLabel: _LABS("agentbk", "source_bare_metal"),
                    inputValue: SYNO.ActiveBackup.SourceType.BARE_METAL,
                    checked: true
                }, {
                    name: "radio_source_type",
                    boxLabel: _LABS("agentbk", "source_sysvol"),
                    inputValue: SYNO.ActiveBackup.SourceType.SYSVOL
                }, {
                    xtype: "panel",
                    layout: "column",
                    border: false,
                    boxMaxWidth: 490,
                    items: [{
                        xtype: "syno_radio",
                        name: "radio_source_type",
                        boxLabel: _LABS("agentbk", "source_cusvol") + ": ---",
                        hidden: this.mode === SYNO.SDS.ActiveBackup.CreateMode.BATCH,
                        inputValue: SYNO.ActiveBackup.SourceType.CUSVOL
                    }, this.select_btn]
                }]
            }, {
                xtype: "spacer",
                itemId: "source_type_spacer",
                height: 44
            }]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(Ext.getCmp("radio_source_type"), "change", this.onRadioChange, this)
    },
    setDefaultValue: function(a) {
        if (this.mode === SYNO.SDS.ActiveBackup.CreateMode.BATCH && a.source_type === SYNO.ActiveBackup.SourceType.CUSVOL) {
            this.setDefaultRadio(SYNO.ActiveBackup.SourceType.BARE_METAL);
            return
        }
        this.setDefaultRadio(a.source_type);
        if (a.source_type === SYNO.ActiveBackup.SourceType.CUSVOL) {
            this.setDefaultClientVol(a.custom_volume)
        }
    },
    changeMode: function(a) {
        this.mode = a;
        if (a === SYNO.SDS.ActiveBackup.CreateMode.BATCH) {
            this.getComponent("radio_source_type").items.items[2].hide();
            this.select_btn.hide();
            if (this.getValue() === SYNO.ActiveBackup.SourceType.CUSVOL) {
                this.setDefaultRadio(SYNO.ActiveBackup.SourceType.BARE_METAL)
            }
        } else {
            this.getComponent("radio_source_type").items.items[2].show();
            this.select_btn.show()
        }
    },
    setDefaultRadio: function(a) {
        this.getComponent("radio_source_type").setValue(a)
    },
    setDefaultClientVol: function(a) {
        this.onClientVolumeChange(a)
    },
    onSelectClick: function(a) {
        var b = new SYNO.ActiveBackup.Agent.ClientVolumeWindow({
            device_id: this.device_id,
            owner: this.owner,
            appWin: this.appWin,
            title: _LABS("agentbk", "choose_custom_volume"),
            width: 600,
            height: 348,
            defaultVols: this.getCusVol()
        });
        this.mon(b, "saveCusVol", this.onClientVolumeChange, this);
        b.open()
    },
    onRadioChange: function(a) {
        this.source_type = a.getValue().inputValue;
        this.enableOrDisableSelectBtn();
        this.fireEvent("radioChange")
    },
    enableOrDisableSelectBtn: function() {
        if (this.source_type === SYNO.ActiveBackup.SourceType.CUSVOL) {
            this.select_btn.enable()
        } else {
            this.select_btn.disable()
        }
    },
    getValue: function() {
        return this.getComponent("radio_source_type").getValue().inputValue
    },
    getCusVol: function() {
        return this.enable_vols || []
    },
    onClientVolumeChange: function(b) {
        this.enable_vols = b;
        var c = "---";
        if (b.length > 0) {
            c = b.join(", ")
        }
        var a = _LABS("agentbk", "source_cusvol") + ": " + c;
        this.getComponent("radio_source_type").items.items[2].boxlabelEl.update(a);
        this.fireEvent("cusVolChanged")
    },
    setDeviceId: function(a) {
        this.device_id = a
    }
});
Ext.define("SYNO.ActiveBackup.Agent.ClientVolumeWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.volPanel = new SYNO.ActiveBackup.Agent.ClientVolumePanel({
            owner: this,
            appWin: a.appWin,
            device_id: a.device_id,
            layout: "fit",
            flex: 1,
            defaultVols: a.defaultVols
        });
        var b = Ext.apply({
            border: false,
            layout: "vbox",
            items: [this.volPanel],
            fbar: {
                xtype: "statusbar",
                hideMode: "visibility",
                defaultText: "&nbsp;",
                statusAlign: "left",
                buttonAlign: "left",
                items: [{
                    xtype: "syno_button",
                    btnStyle: "blue",
                    hidden: false,
                    disabled: true,
                    text: _T("common", "commit"),
                    itemId: "apply",
                    id: this.BtnApplyId = Ext.id(),
                    scope: this,
                    handler: this.onSave
                }, {
                    xtype: "syno_button",
                    btnStyle: "grey",
                    hidden: false,
                    text: _LABS("btn", "cancel"),
                    itemId: "cancel",
                    id: this.BtnCancelId = Ext.id(),
                    scope: this,
                    handler: this.onCancel
                }]
            },
            bbar: new SYNO.ux.PagingToolbar({
                cls: "source-type-paging-bar",
                store: this.volPanel.datastore,
                displayInfo: true,
                pageSize: 10,
                showRefreshBtn: false
            })
        }, a);
        this.callParent([b])
    },
    onShow: function() {
        this.volPanel.onActivate()
    },
    getSaveBtn: function() {
        return Ext.getCmp(this.BtnApplyId)
    },
    onSave: function() {
        this.fireEvent("saveCusVol", this.volPanel.getEnableVolumes());
        this.close()
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.ActiveBackup.Agent.ClientVolumePanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    datastore: null,
    constructor: function(c) {
        this.device_id = c.device_id;
        this.defaultVols = c.defaultVols;
        var b = function(g) {
            return parseInt(g, 10)
        };

        function f() {
            return new SYNO.API.JsonStore({
                autoDestroy: true,
                idProperty: "name",
                fields: ["enabled", "name", {
                    name: "used_size",
                    sortType: b
                }, {
                    name: "free_size",
                    sortType: b
                }, {
                    name: "total_size",
                    sortType: b
                }],
                sortInfo: {
                    field: "name",
                    direction: "ASC"
                }
            })
        }

        function a(g) {
            return new Ext.grid.ColumnModel({
                defaults: {
                    sortable: false
                },
                columns: [g, {
                    header: _LABS("agentbk", "vol_name"),
                    tooltip: _LABS("agentbk", "vol_name"),
                    dataIndex: "name",
                    sortable: true
                }, {
                    header: _LABS("agentbk", "vol_used"),
                    tooltip: _LABS("agentbk", "vol_used"),
                    dataIndex: "used_size",
                    sortable: true,
                    renderer: function(j, i, h) {
                        return SYNO.SDS.ActiveBackup.Utils.renderSize(parseInt(h.json.used_size, 10))
                    }
                }, {
                    header: _LABS("agentbk", "vol_available"),
                    tooltip: _LABS("agentbk", "vol_available"),
                    dataIndex: "free_size",
                    sortable: true,
                    renderer: function(j, i, h) {
                        return SYNO.SDS.ActiveBackup.Utils.renderSize(parseInt(h.json.free_size, 10))
                    }
                }, {
                    header: _LABS("agentbk", "vol_capacity"),
                    tooltip: _LABS("agentbk", "vol_capacity"),
                    dataIndex: "total_size",
                    sortable: true,
                    renderer: function(j, i, h) {
                        return SYNO.SDS.ActiveBackup.Utils.renderSize(parseInt(h.json.total_size, 10))
                    }
                }]
            })
        }
        var e = new SYNO.ux.EnableColumn({
            dataIndex: "enabled",
            align: "center",
            width: 30,
            isIgnore: function(h, g) {
                return g.json.file_system !== "NTFS" || g.json.is_dynamic_volume === true
            },
            renderer: function(k, i, g) {
                if (g.json.file_system !== "NTFS" || g.json.is_dynamic_volume === true) {
                    var j = "";
                    if (g.json.file_system !== "NTFS") {
                        j = _LABS("agentbk", "not_ntfs")
                    }
                    if (g.json.is_dynamic_volume === true) {
                        j = _LABS("agentbk", "is_dynamic_volume")
                    }
                    i.attr = 'ext:qtip="' + j + '"';
                    var h = document.createElement("div");
                    h.innerHTML = this.disableRenderer(k, i, g);
                    h.firstChild.setAttribute("ext:qtip", j);
                    return h.innerHTML
                }
                return SYNO.ux.EnableColumn.prototype.renderer.call(this, k, i, g)
            }
        });
        this.datastore = f();
        var d = Ext.apply({
            store: this.datastore,
            colModel: a(e),
            enableHdMenu: false,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            loadMask: true,
            plugins: [e],
            viewConfig: {
                markDirty: false
            }
        }, c);
        return this.callParent([d])
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.mon(this.datastore, "load", this.checkState, this);
        this.mon(this.datastore, "update", this.checkState, this);
        return a
    },
    onActivate: function() {
        this.mask = new Ext.LoadMask(this.getEl(), {
            msg: _LABS("common", "waiting_device")
        });
        this.mask.show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agent.Device",
            method: "list_nodes",
            version: 1,
            params: {
                device_id: this.device_id
            },
            scope: this,
            callback: function(b, a) {
                this.mask.hide();
                if (this.isDestroyed) {
                    return
                }
                if (b) {
                    this.getStore().loadData(a.node_list);
                    this.datastore.each(function(c) {
                        if (this.defaultVols.indexOf(c.data.name) !== -1) {
                            c.set("enabled", true)
                        }
                    }, this)
                } else {
                    this.getEl().mask(SYNO.ActiveBackup.Util.parseError(a))
                }
            }
        })
    },
    checkState: function() {
        var a = this.getEnableVolumes();
        if (a.length === 0) {
            this.owner.getSaveBtn().disable()
        } else {
            this.owner.getSaveBtn().enable()
        }
    },
    getEnableVolumes: function() {
        var a = [];
        this.datastore.each(function(b) {
            if (b.data.enabled) {
                a.push(b.data.name)
            }
        });
        return a
    }
});
Ext.define("SYNO.ActiveBackup.Agent.TaskSettingPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var b = Ext.apply({
            border: false,
            closable: true,
            resizable: false,
            labelStyle: "line-height: 28px; padding: 0px 0px 0px 10px",
            style: "margin-left: 10px",
            fieldLabel: _LABS("create_wizard", "task_settings_header"),
            xtype: "vbox",
            items: [{
                xtype: "syno_checkbox",
                itemId: "compress",
                checked: true,
                boxLabel: _LABS("component", "task_data_compression")
            }, {
                xtype: "syno_checkbox",
                itemId: "encrypt",
                checked: true,
                boxLabel: _LABS("component", "task_data_encryption")
            }, {
                xtype: "syno_checkbox",
                itemId: "appaware",
                checked: a.backup_type === SYNO.ActiveBackup.BackupType.SERVER ? true : false,
                hidden: a.backup_type === SYNO.ActiveBackup.BackupType.SERVER ? false : true,
                boxLabel: _LABS("component", "task_app_aware_backup_enable")
            }, {
                xtype: "syno_checkbox",
                itemId: "enable_verification",
                boxLabel: _LABS("common", "enable_verification"),
                disabled: false,
                listeners: {
                    disable: function() {
                        this.getComponent("screenshot_setting_form").setDisabled(true)
                    },
                    enable: function(c) {
                        this.getComponent("screenshot_setting_form").setDisabled(!c.getValue())
                    },
                    check: function(d, c) {
                        this.getComponent("screenshot_setting_form").setDisabled(d.disabled || !c)
                    },
                    scope: this
                }
            }, {
                xtype: "syno_compositefield",
                itemId: "screenshot_setting_form",
                indent: 1,
                disabled: true,
                hideLabel: true,
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("common", "screenshot_setting_form")
                }, {
                    xtype: "syno_numberfield",
                    itemId: "verification_policy",
                    width: 50,
                    value: 120,
                    minValue: 10,
                    maxValue: 600
                }, {
                    xtype: "syno_displayfield",
                    itemId: "screenshot_setting_sec",
                    value: _LABS("common", "screenshot_setting_sec")
                }]
            }, {
                xtype: "syno_displayfield",
                itemId: "vmm_disabled_msg",
                style: "color:orange;",
                value: "",
                indent: 1
            }, {
                xtype: "spacer",
                itemId: "task_setting_spacer",
                height: 20
            }]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        var b = this.getComponent("screenshot_setting_form").items.items;
        var a = Ext.each(b, function(c) {
            if (c.getItemId() === "verification_policy") {
                return false
            }
        });
        this.verification_policy_item = b[a];
        a = Ext.each(b, function(c) {
            if (c.getItemId() === "screenshot_setting_sec") {
                return false
            }
        });
        this.screenshot_setting_sec_item = b[a];
        if (this.backup_type === SYNO.ActiveBackup.BackupType.PC) {
            this.setVerificationVisiable(false)
        }
        this.mon(this, "afterlayout", this.onAfterLayout, this, {
            single: true
        })
    },
    enableVerificationItems: function(b) {
        var a = this.getComponent("enable_verification");
        a.setDisabled(!b);
        if (!b) {
            a.setValue(false)
        }
    },
    setVerificationVisiable: function(a) {
        this.getComponent("screenshot_setting_form").setVisible(a);
        this.getComponent("enable_verification").setVisible(a);
        this.getComponent("vmm_disabled_msg").setVisible(a);
        if (a) {
            this.getComponent("screenshot_setting_form").doLayout()
        }
    },
    isVerificationVisible: function() {
        return this.getComponent("screenshot_setting_form").isVisible()
    },
    setAppAwareVisible: function(a) {
        this.getComponent("appaware").setVisible(a)
    },
    setAppAware: function(b, a) {
        this.setAppAwareVisible(!b);
        this.getComponent("appaware").setValue(a)
    },
    getCompress: function() {
        return this.getComponent("compress").checked
    },
    getEncrypt: function() {
        return this.getComponent("encrypt").checked
    },
    getEnableVerification: function() {
        return this.getComponent("enable_verification").checked
    },
    getVerificationPolicy: function() {
        return this.verification_policy_item.getValue()
    },
    isVerificationPolicyValid: function() {
        return this.verification_policy_item.isValid()
    },
    getAppAware: function() {
        return this.getComponent("appaware").checked
    },
    setDefaultOption: function(a) {
        this.getComponent("compress").setValue(a.enable_compress_transfer);
        this.getComponent("encrypt").setValue(a.enable_encrypt_transfer);
        this.getComponent("appaware").setValue(a.enable_app_aware_bkp);
        if (this.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
            this.getComponent("enable_verification").setValue(a.enable_verification);
            if (a.verification_policy !== null) {
                this.verification_policy_item.setValue(a.verification_policy)
            }
            this.checkVmmEnvironment(a.share_name)
        }
    },
    checkVmmEnvironment: function(a) {
        this.fireMask();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "check_vmm",
            version: 1,
            scope: this,
            params: {
                share_name: a
            },
            callback: function(e, b) {
                this.fireunMask();
                if (!e) {
                    SYNO.ActiveBackup.Util.reportError.call(this, b);
                    return
                }
                var c = this.getComponent("vmm_disabled_msg");
                this.vmm_is_ready = false;
                var d = this.getComponent("enable_verification").getValue();
                if (!b[SYNO.SDS.ActiveBackup.VmmEnv.DSM_SUPPORTED]) {
                    c.setValue(_LABS("restore_wizard", "vmm_need_upgrade_dsm"));
                    this.enableVerificationItems(false)
                } else {
                    if (!b[SYNO.SDS.ActiveBackup.VmmEnv.INSTALLED]) {
                        c.setValue(_LABS("restore_wizard", "vmm_not_installed"));
                        this.enableVerificationItems(false)
                    } else {
                        if (!b[SYNO.SDS.ActiveBackup.VmmEnv.VMM_SUPPORTED]) {
                            c.setValue(_LABS("restore_wizard", "vmm_not_supported"));
                            this.enableVerificationItems(false)
                        } else {
                            if (!b[SYNO.SDS.ActiveBackup.VmmEnv.INCLUSTER]) {
                                c.setValue(_LABS("restore_wizard", "vmm_no_cluster"));
                                this.enableVerificationItems(false)
                            } else {
                                if (!b[SYNO.SDS.ActiveBackup.VmmEnv.SAME_VOLUME]) {
                                    c.setValue(_LABS("restore_wizard", "vmm_no_same_volume"));
                                    this.enableVerificationItems(false)
                                } else {
                                    this.vmm_is_ready = true;
                                    this.fireEvent("vmmEnvironmentChecked")
                                }
                            }
                        }
                    }
                }
                if (d !== this.getComponent("enable_verification").getValue()) {
                    this.owner.getMsgBox().alert("", _LABS("warning", "auto_disable_verification"))
                }
            }
        })
    },
    isContainSysvol: function(a) {
        return (-1 === a.indexOf("C:\\")) ? false : true
    },
    checkVerificationEnable: function(a) {
        if (!this.vmm_is_ready) {
            return
        }
        var b = this.getComponent("vmm_disabled_msg");
        if (a.value === SYNO.ActiveBackup.SourceType.CUSVOL && !this.isContainSysvol(a.cusVol)) {
            this.enableVerificationItems(false);
            b.setValue(_LABS("agentbk", "system_volume_required"))
        } else {
            this.enableVerificationItems(true);
            b.setValue("")
        }
    },
    fireMask: function() {
        this.fireEvent("mask")
    },
    fireunMask: function() {
        this.fireEvent("unmask")
    },
    onAfterLayout: function() {
        SYNO.SDS.Utils.AddTip(this.getComponent("enable_verification").getEl(), _LABS("agentbk", "tooltip_livevideo"));
        SYNO.SDS.Utils.AddTip(this.screenshot_setting_sec_item.getEl(), _LABS("vmbk", "tooltip_videotime"))
    },
    setOwner: function(a) {
        this.owner = a
    },
    activate: function() {
        if (this.last_anchor === this.owner.getWizardAnchor() || this.backup_type !== SYNO.ActiveBackup.BackupType.SERVER) {
            return
        }
        this.last_anchor = this.owner.getWizardAnchor();
        var a = {};
        if (this.owner && Ext.isFunction(this.owner.getParams)) {
            a = this.owner.getParams()
        }
        this.resetVerificationItems();
        this.checkVmmEnvironment(a.share_name)
    },
    resetVerificationItems: function() {
        this.enableVerificationItems(true);
        this.getComponent("vmm_disabled_msg").setValue("")
    },
    templateShareNameChanged: function(a) {
        this.resetVerificationItems();
        this.checkVmmEnvironment(a)
    }
});
Ext.define("SYNO.ActiveBackup.TargetSelector", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    isAnchor: true,
    constructor: function(g) {
        var c = function(l) {
            return Ext.util.Format.uppercase(l)
        };
        var a = function(l) {
            return (e(l) ? "0" : "1") + Ext.util.Format.uppercase(l)
        };

        function i() {
            return new SYNO.API.JsonStore({
                api: "SYNO.ActiveBackup.Share",
                method: "list",
                version: 1,
                appWindow: g.appWin,
                autoLoad: false,
                root: "shares",
                idProperty: "path",
                baseParams: {
                    backupable: true,
                    relinkable: g.relinkable
                },
                fields: ["path", {
                    name: "name",
                    sortType: c
                }, {
                    name: "type",
                    sortType: a
                }, "free_space", "available", "cow", "relinkable"],
                sortInfo: {
                    field: "type",
                    direction: "ASC"
                }
            })
        }

        function e(l) {
            return Ext.util.Format.uppercase(l) === SYNO.ActiveBackup.ShareType.BTRFS
        }

        function f(m, l) {
            if (l.get("relinkable")) {
                m.attr = 'ext:qtip="' + _LABS("vmbk", "tooltip_relink_first") + '"; style="color:gray"'
            } else {
                if (!l.get("available")) {
                    if (!e(l.get("type"))) {
                        m.attr = 'ext:qtip="' + _LABS("tool_tip", "only_support_btrfs_share") + '"; style="color:gray"'
                    } else {
                        m.attr = 'ext:qtip="' + _LABS("tool_tip", "not_support_encryption_share") + '"; style="color:gray"'
                    }
                }
            }
        }
        var k = this;

        function d() {
            return new Ext.grid.ColumnModel({
                defaults: {
                    sortable: true
                },
                columns: [{
                    header: _LABS("vmbk", "repo_name"),
                    dataIndex: "name",
                    renderer: function(n, m, l) {
                        if (m) {
                            m.attr = 'ext:qtip="' + n + '"';
                            f(m, l)
                        }
                        return n
                    }
                }, {
                    header: _LABS("vmbk", "repo_type"),
                    dataIndex: "type",
                    scope: k,
                    renderer: function(n, m, l) {
                        if (m) {
                            f(m, l)
                        }
                        var o = n;
                        if (l.get("cow") && (this.backup_type === SYNO.ActiveBackup.BackupType.VM || this.backup_type === SYNO.ActiveBackup.BackupType.SERVER)) {
                            o += '<i class="synoabk-tip-icon" ext:qtip="' + _LABS("warning", "cow_open_in_VMM") + '"></i>'
                        }
                        return o
                    }
                }, {
                    header: _LABS("vmbk", "repo_free_space"),
                    renderer: function(n, m, l) {
                        if (m) {
                            f(m, l)
                        }
                        return SYNO.SDS.ActiveBackup.Utils.renderSize(n)
                    },
                    dataIndex: "free_space"
                }]
            })
        }
        var h = i();

        function j() {
            return new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                width: 300,
                localFilter: true,
                localFilterField: ["name"],
                blOr: true,
                emptyText: _LABS("action", "filter"),
                store: h
            })
        }
        var b = Ext.apply({
            cls: "syno-vmbk-repo-list",
            store: h,
            colModel: d(),
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            viewConfig: {
                getRowClass: function(l, o, m, n) {
                    if (l.get("relinkable") || !l.get("available")) {
                        return "syno-activebackup-grid-disabled-row"
                    }
                }
            },
            listeners: {
                rowmousedown: function(m, o, n) {
                    var l = m.getStore().getAt(o);
                    if (l.get("relinkable") || !l.get("available")) {
                        return false
                    }
                }
            },
            tbar: [j()]
        }, g);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.getSelectionModel(), "selectionchange", function() {
            this.fireEvent("checkvalid", this)
        }, this);
        this.mon(this, "activate", function() {
            this.getStore().load()
        }, this);
        this.mon(this.getStore(), "beforeload", function() {
            this.getMask().show()
        }, this);
        this.mon(this.getStore(), "load", function(b, a) {
            this.getMask().hide()
        }, this);
        this.mon(this.getStore(), "load", function(d, b) {
            var a = this.getStore().reader.jsonData.default_share;
            var c = -1;
            Ext.each(b, function(f, e) {
                if (f.get("available") && !f.get("relinkable")) {
                    if (f.get("name") === a) {
                        c = e;
                        return false
                    } else {
                        if (c === -1) {
                            c = e
                        }
                    }
                }
            });
            if (c > -1) {
                this.getSelectionModel().selectRecords([b[c]])
            } else {
                this.getEl().mask(_LABS("create_wizard", "no_available_btrfs_share"), "syno-ux-mask-info")
            }
        }, this, {
            single: true
        })
    },
    validate: function() {
        var b = this.getSelectionModel();
        var a = b.getSelected();
        return a ? true : false
    },
    getParams: function() {
        var b = this.getSelectionModel();
        var a = b.getSelected();
        return {
            share_name: a.get("name")
        }
    },
    getMask: function() {
        if (!this._mask) {
            this._mask = new Ext.LoadMask(this.getEl())
        }
        return this._mask
    }
});
Ext.define("SYNO.ActiveBackup.Agent.TaskEditWizard", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.records = a.records;
        this.batch_edit = (a.records.length > 1) ? true : false;
        this.panels = {
            general: this.createGeneralPanel(a),
            schedule: this.createSchedulePanel(a),
            retention: this.creatRetentionPanel(a)
        };
        if (a.backup_type === SYNO.ActiveBackup.BackupType.SERVER || a.backup_type === SYNO.ActiveBackup.BackupType.AGENTLESS) {
            this.panels.permission = this.creatPermissionPanel(a)
        }
        var b = Ext.apply({
            title: _LABS("vmbk", "task_edit_wizard"),
            cls: "syno-vmbk-task-create-wizard",
            banner: true,
            resizable: false,
            layout: "fit",
            width: 700,
            height: 580,
            items: this.createTabPanel(),
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _LABS("btn", "ok"),
                scope: this,
                handler: this.onOKClick
            }, {
                xtype: "syno_button",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.onCancelClick
            }]
        }, a);
        this.callParent([b])
    },
    createGeneralPanel: function(a) {
        return new SYNO.ActiveBackup.Agent.GeneralEditPanel({
            title: _LABS("common", "settings_general"),
            itemId: "settings_general",
            records: a.records,
            appWin: a.appWin,
            owner: a.owner,
            batch_edit: this.batch_edit,
            batch_type: "task",
            backup_type: a.backup_type
        })
    },
    createSchedulePanel: function(a) {
        return new SYNO.ActiveBackup.ScheduleSetterPaenl({
            itemId: "settings_schedule",
            appWin: a.appWin,
            batch_edit: this.batch_edit,
            batch_type: "task"
        })
    },
    creatRetentionPanel: function(a) {
        return new SYNO.ActiveBackup.RetentionEditPanel({
            title: _LABS("component", "Retention_tab_title"),
            itemId: "settings_retention",
            records: a.records,
            appWin: a.appWin,
            owner: a.owner,
            batch_edit: this.batch_edit,
            batch_type: "task",
            mode: "edit"
        })
    },
    creatAdvancePanel: function(a) {
        return new SYNO.ux.Panel({
            title: _LABS("common", "settings_advanced"),
            itemId: "settings_advanced",
            html: "FIXME",
            records: a.records,
            appWin: a.appWin
        })
    },
    creatPermissionPanel: function(a) {
        return new SYNO.ActiveBackup.PrivilegePanel({
            itemId: "settings_permission",
            records: a.records,
            appWin: a.appWin,
            owner: a.owner,
            batch_edit: this.batch_edit,
            batch_type: "task",
            mode: "edit"
        })
    },
    validatePanels: function() {
        var a = true;
        Object.values(this.panels).each(function(c) {
            var b = c.validate();
            if (b !== true) {
                a = false;
                if (b) {
                    this.setStatusError({
                        text: b,
                        clear: true
                    })
                }
                return false
            }
        }, this);
        return a
    },
    createTabPanel: function() {
        return new SYNO.ux.TabPanel({
            activeTab: "settings_general",
            items: Object.values(this.panels),
            deferredRender: false
        })
    },
    onOpen: function() {
        this.setStatusBusy();
        var a = this.records[0].id;
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "list",
            params: {
                filter: {
                    task_id: a
                },
                load_devices: true,
                load_user_group: true
            },
            version: 1,
            callback: function(e, c, d, b) {
                this.clearStatusBusy();
                if (!e) {
                    this.reportError(c);
                    return
                }
                Object.values(this.panels).each(function(f) {
                    f.fireEvent("setting", c.tasks[0])
                })
            },
            scope: this
        });
        this.callParent(arguments)
    },
    onOKClick: function() {
        if (this.validatePanels() === false) {
            return
        }
        var a = Object.values(this.panels).reduce(function(c, b) {
            return Ext.apply(c, b.getParams())
        }, {});
        a.task_ids = [];
        Ext.each(this.records, function(b) {
            a.task_ids.push(b.id)
        }, this);
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "set",
            params: a,
            version: 1,
            callback: function(e, c, d, b) {
                if (!e) {
                    return
                }
            },
            scope: this
        });
        this.close()
    },
    onCancelClick: function() {
        this.close()
    }
});
Ext.define("SYNO.ActiveBackup.Agent.GeneralEditPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var c = (a.records.length > 1) ? SYNO.SDS.ActiveBackup.CreateMode.BATCH : SYNO.SDS.ActiveBackup.CreateMode.SINGLE;
        this.batch_edit = (a.batch_edit === undefined) ? false : a.batch_edit;
        this.batch_edit_source_type = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: this.batch_edit,
            batch_type: a.batch_type
        });
        this.batch_edit_task_setting = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: this.batch_edit,
            batch_type: a.batch_type
        });
        this.task_name_edit_filed = new SYNO.ux.TextField({
            bodyStyle: "margin-left: 32px; padding-left: 8px;",
            name: "task_name",
            vtype: "taskname",
            vtypeText: _LABS("warning", "bad_taskname"),
            fieldLabel: _LABS("task_info", "task_name"),
            labelStyle: "line-height: 28px; padding: 0px 0px 0px 10px",
            style: "margin-left: 10px",
            width: 388,
            allowBlank: false,
            listeners: {
                change: function(d) {
                    if (d.getEl().hasClass("x-form-invalid") === true) {
                        d.getEl().dom.removeAttribute("ext:qtip")
                    } else {
                        d.getEl().set({
                            "ext:qtip": Ext.util.Format.htmlEncode(d.getValue())
                        })
                    }
                }
            }
        });
        this.source_type_panel = new SYNO.ActiveBackup.Agent.SourceTypePanel({
            source_type: a.records[0].json.source_type,
            device_id: a.records[0].json.devices[0].device_id,
            mode: c,
            appWin: a.appWin,
            owner: a.owner,
            width: 500
        });
        this.task_setting_panel = new SYNO.ActiveBackup.Agent.TaskSettingPanel({
            appWin: a.appWin,
            backup_type: a.backup_type,
            owner: a.owner
        });
        var b = Ext.apply({
            border: false,
            layout: "form",
            labelWidth: 180,
            items: [this.task_name_edit_filed, {
                xtype: "spacer",
                hidden: this.batch_edit,
                height: 44
            }, this.batch_edit_source_type, this.source_type_panel, this.batch_edit_task_setting, this.task_setting_panel]
        }, a);
        this._mask_owner = [];
        return this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "setting", this.setDefaultValue, this);
        this.mon(this, "activate", this.initBatchEdit, this);
        this.mon(this.batch_edit_source_type.getComponent("batch_edit_checkbox"), "check", this.checkBatchEditSource, this);
        this.mon(this.batch_edit_task_setting.getComponent("batch_edit_checkbox"), "check", this.checkBatchEditSetting, this);
        this.mon(this.task_setting_panel, "mask", this.maskWindow, this);
        this.mon(this.task_setting_panel, "unmask", this.unmaskWindow, this);
        if (this.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
            this.mon(this.source_type_panel, "radioChange", this.checkVerification, this);
            this.mon(this.source_type_panel, "cusVolChanged", this.checkVerification, this);
            this.mon(this.task_setting_panel, "vmmEnvironmentChecked", this.checkVerification, this)
        }
    },
    checkVerification: function() {
        this.task_setting_panel.checkVerificationEnable({
            value: this.source_type_panel.getValue(),
            cusVol: this.source_type_panel.getCusVol()
        })
    },
    setDefaultValue: function(a) {
        this.task_name_edit_filed.setValue(a.task_name);
        this.task_name_edit_filed.fireEvent("change", this.task_name_edit_filed);
        this.source_type_panel.setDefaultValue(a);
        this.task_setting_panel.setDefaultOption(a)
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    isBatchMode: function() {
        return (this.batch_edit === true)
    },
    validate: function() {
        if (this.isBatchMode() === false) {
            if (this.task_name_edit_filed.getValue() === "" || this.task_name_edit_filed.getValue() === undefined) {
                return _LABS("warning", "no_input_value")
            }
            if (this.task_name_edit_filed.getEl().hasClass("x-form-invalid")) {
                return _LABS("warning", "bad_taskname")
            }
        }
        if (this.source_type_panel.getValue() === SYNO.ActiveBackup.SourceType.CUSVOL && this.source_type_panel.getCusVol().length === 0) {
            return _LABS("warning", "no_select_custom_volume")
        }
        if (this.task_setting_panel.getEnableVerification() && !this.task_setting_panel.isVerificationPolicyValid()) {
            return _LABS("warning", "verification_policy_invalid")
        }
        return true
    },
    isAllTaskContainSysVol: function() {
        var a = this.records.every(function(b) {
            if (b.data.source_type === SYNO.ActiveBackup.SourceType.CUSVOL && !this.task_setting_panel.isContainSysvol(b.data.custom_volume)) {
                return false
            }
            return true
        }, this);
        return a
    },
    initBatchEdit: function() {
        if (this.isBatchMode()) {
            this.task_name_edit_filed.hide();
            this.checkBatchEditSource();
            this.checkBatchEditSetting();
            if (this.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
                this.task_setting_panel.setVerificationVisiable(this.isAllTaskContainSysVol())
            }
        }
        this.mun(this, "activate", this.initBatchEdit, this)
    },
    checkBatchEditSource: function() {
        var a = this.batch_edit_source_type.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.source_type_panel.enable();
            this.source_type_panel.label.removeClass("x-item-disabled");
            if (this.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
                this.task_setting_panel.setVerificationVisiable(true)
            }
        } else {
            this.source_type_panel.disable();
            this.source_type_panel.label.addClass("x-item-disabled");
            if (!this.isAllTaskContainSysVol() && this.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
                this.task_setting_panel.setVerificationVisiable(false)
            }
        }
    },
    checkBatchEditSetting: function() {
        var a = this.batch_edit_task_setting.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.task_setting_panel.enable();
            this.task_setting_panel.label.removeClass("x-item-disabled")
        } else {
            this.task_setting_panel.disable();
            this.task_setting_panel.label.addClass("x-item-disabled")
        }
    },
    getParams: function() {
        if (this.isBatchMode() === false) {
            return {
                source_type: this.source_type_panel.getValue(),
                cus_vols: this.source_type_panel.getCusVol(),
                enable_compress_transfer: this.task_setting_panel.getCompress(),
                enable_encrypt_transfer: this.task_setting_panel.getEncrypt(),
                enable_verification: this.task_setting_panel.getEnableVerification(),
                verification_policy: this.task_setting_panel.getVerificationPolicy(),
                enable_app_aware_bkp: this.task_setting_panel.getAppAware(),
                task_name: this.task_name_edit_filed.getValue()
            }
        }
        var a = {};
        if (this.batch_edit_source_type.getComponent("batch_edit_checkbox").checked) {
            a.source_type = this.source_type_panel.getValue()
        }
        if (this.batch_edit_task_setting.getComponent("batch_edit_checkbox").checked) {
            a.enable_compress_transfer = this.task_setting_panel.getCompress();
            a.enable_encrypt_transfer = this.task_setting_panel.getEncrypt();
            if (this.task_setting_panel.isVerificationVisible()) {
                a.enable_verification = this.task_setting_panel.getEnableVerification();
                a.verification_policy = this.task_setting_panel.getVerificationPolicy()
            }
            a.enable_app_aware_bkp = this.task_setting_panel.getAppAware()
        }
        return a
    }
});
Ext.define("SYNO.ActiveBackup.Agent.BatchEditBox", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var c = this.getBoxLabel(a.batch_type);
        var b = Ext.apply({
            border: false,
            height: 42,
            hidden: (a.batch_edit === false) ? true : false,
            items: [{
                xtype: "syno_checkbox",
                itemId: "batch_edit_checkbox",
                boxLabel: c,
                checked: false
            }, {
                xtype: "panel",
                border: false,
                style: "border-top: 1px solid #EBF0F5; margin: 6px 0px;",
                height: 1
            }]
        }, a);
        return this.callParent([b])
    },
    getBoxLabel: function(a) {
        if (a === "task") {
            return _LABS("advansetting", "enable_batch_pc_desc")
        } else {
            return _LABS("advansetting", "enable_batch_template_desc")
        }
    }
});
Ext.define("SYNO.ActiveBackup.TaskView", function(a) {
    var b = 4096;
    return {
        extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
        backup_type: SYNO.ActiveBackup.BackupType.NONE,
        constructor: function(c) {
            Ext.copyTo(this, c, "appWin,owner");
            this.initActions();
            var e = this.configColumnModel();
            Ext.each(e.columns, function(f) {
                f.tooltip = f.header
            });
            e.defaults = Ext.apply({
                width: 120,
                sortable: true
            }, e.defaults);
            var d = Ext.apply({
                title: _LABS("component", "task_view_title"),
                itemId: "synoabk-task-view",
                cls: "synoabk-task-view",
                store: this.createStore(),
                colModel: new Ext.grid.ColumnModel(e),
                sm: new Ext.grid.RowSelectionModel({
                    singleSelect: false
                }),
                tbar: new Ext.Toolbar({
                    defaultType: "syno_button",
                    items: this.configButtons()
                }),
                viewConfig: {
                    emptyText: '<div class="empty-msg"><div class="empty-grid-icon"></div><div class="empty-grid-text">' + _LABS("empty", "empty_task") + "</div></div>",
                    trackResetOnLoad: false
                }
            }, c);
            this._mask_owner = [];
            this._polling_id = null;
            return this.callParent([d])
        },
        createStore: function() {
            return new Ext.data.JsonStore({
                idProperty: "task_id",
                fields: ["task_id", "task_name", "device_count", "devices", "source_type", "custom_volume", "share_name", "repo_dir", "target_dir", "last_result", "progress", "block_reason", "block_tasks", "waiting_jobs", "sched_id", "sched_content", "agentless_backup_policy", "next_trigger_time", {
                    name: "first_device_name",
                    convert: function(d, c) {
                        if (c.devices) {
                            return c.devices[0].host_name
                        } else {
                            return ""
                        }
                    }
                }]
            })
        },
        configColumnModel: function() {
            return {
                columns: [{
                    header: _LABS("task_info", "task_name"),
                    width: 100,
                    renderer: function(e, f, c) {
                        var d = Ext.util.Format.htmlEncode(e);
                        f.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d) + '"';
                        return d
                    },
                    dataIndex: "task_name"
                }, {
                    header: _LABS("component", "task_destination"),
                    renderer: function(d, e, c) {
                        var f = Ext.util.Format.htmlEncode(SYNO.SDS.ActiveBackup.Utils.renderTargetPath(c.json));
                        e.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                        e.css = "x-grid3-col-destination";
                        return f
                    },
                    dataIndex: "target_path"
                }, {
                    header: _LABS("component", "task_last_status"),
                    renderer: function(f, h, d) {
                        var e;
                        if (f) {
                            var c = SYNO.SDS.ActiveBackup.Utils.renderResultStatus(f.status);
                            var g = SYNO.SDS.ActiveBackup.Utils.renderTime(f.time_end);
                            e = String.format("{0} {1}", c, g)
                        } else {
                            e = _LABS("component", "task_not_backup")
                        }
                        h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e) + '"';
                        return e
                    },
                    dataIndex: "last_result"
                }, {
                    header: _LABS("component", "task_status"),
                    renderer: function(g, k, d, f, i, h) {
                        var j;
                        if (d.get("progress")) {
                            j = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(d.json.backup_type, d.get("progress"), false)
                        } else {
                            if (d.get("waiting_jobs")) {
                                j = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(d.json.backup_type, d.get("waiting_jobs")[0], false)
                            } else {
                                j = (d.json.next_trigger_time === "") ? _LABS("task_info", "task_no_schedule") : _LABS("schedule", "wait_next_backup_time") + d.json.next_trigger_time
                            }
                        }
                        var c = j;
                        if (d.get("block_reason") && d.get("block_tasks")) {
                            var e = d.get("block_reason");
                            if (e == SYNO.SDS.ActiveBackup.JobStatus.WAITING_TASK) {
                                c = _LABS("tool_tip", "wait_resource_release")
                            } else {
                                if (e == SYNO.SDS.ActiveBackup.JobStatus.WAITING_STORAGE) {
                                    d.get("block_tasks").forEach(function(l) {
                                        var n = l[0];
                                        var m = l[1];
                                        if (m == SYNO.SDS.ActiveBackup.JobAction.BACKUP) {
                                            c = _LABS("tool_tip", "wait_backup_task")
                                        } else {
                                            if (m == SYNO.SDS.ActiveBackup.JobAction.VERIFY) {
                                                c = _LABS("tool_tip", "wait_verify_task")
                                            } else {
                                                if (m == SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET) {
                                                    c = _LABS("tool_tip", "wait_delete_task")
                                                } else {
                                                    if (m == SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION) {
                                                        c = _LABS("tool_tip", "wait_delete_version_task")
                                                    } else {
                                                        return
                                                    }
                                                }
                                            }
                                        }
                                        c += "<br/>" + n
                                    })
                                }
                            }
                        }
                        k.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                        return j
                    }
                }]
            }
        },
        initActions: function() {
            this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
                create: {
                    text: _LABS("component", "btn_create"),
                    scope: this,
                    handler: this.onTaskCreate,
                    select_type_enable: [true, true, true]
                },
                edit: {
                    text: _LABS("component", "btn_edit"),
                    scope: this,
                    handler: this.onTaskEdit,
                    select_type_enable: [false, true, true]
                },
                backup: {
                    text: _LABS("component", "btn_backup"),
                    scope: this,
                    handler: this.onBackup,
                    select_type_enable: [false, false, false]
                },
                cancel: {
                    text: _LABS("btn", "cancel"),
                    scope: this,
                    disabled: true,
                    handler: this.onTaskCancel,
                    select_type_enable: [false, false, false]
                },
                remove: {
                    text: _LABS("component", "btn_delete"),
                    scope: this,
                    handler: this.onTaskRemove,
                    select_type_enable: [false, false, false]
                },
                detail: {
                    text: _LABS("component", "btn_detail"),
                    scope: this,
                    handler: this.onTaskDetail,
                    select_type_enable: [false, true, false]
                },
                version: {
                    text: _LABS("component", "btn_version"),
                    scope: this,
                    handler: this.onTaskVersion,
                    select_type_enable: [false, true, false]
                }
            })
        },
        onSelectionChange: function(h) {
            var c = h.getSelections();
            this.actions.onSelectionChange(c.length);
            if (c.length > 0) {
                var g = 0;
                var f = 0;
                var d = 0;
                var e = 0;
                Ext.each(c, function(k) {
                    var i = k.get("progress");
                    var j = k.get("waiting_jobs");
                    if (i) {
                        f++;
                        if (i.action === SYNO.SDS.ActiveBackup.JobAction.BACKUP || i.action === SYNO.SDS.ActiveBackup.JobAction.VERIFY) {
                            d++
                        }
                    } else {
                        if (j) {
                            g++;
                            if (j[0].action === SYNO.SDS.ActiveBackup.JobAction.BACKUP || j[0].action === SYNO.SDS.ActiveBackup.JobAction.VERIFY) {
                                e++
                            }
                        }
                    }
                });
                if (d + e === c.length) {
                    this.actions.get("cancel").enable()
                }
                if (f === 0 && g === 0) {
                    this.actions.get("backup").enable();
                    this.actions.get("remove").enable()
                }
            }
            this.checkMaxCount()
        },
        checkMaxCount: function() {
            if (this.getStore().getTotalCount() >= b) {
                this.actions.get("create").disable()
            }
        },
        configButtons: function() {
            return [this.actions.get("create"), this.actions.get("edit"), this.actions.get("backup"), this.actions.get("cancel"), this.actions.get("remove"), this.actions.get("detail"), this.actions.get("version")]
        },
        initEvents: function() {
            var c = this.callParent(arguments);
            var d = this.getSelectionModel();
            this.onSelectionChange(d);
            this.mon(this, "activate", this.onActivate, this);
            this.mon(this, "deactivate", this.onDeactivate, this);
            this.mon(this, "cellclick", this.onCellClick, this);
            this.mon(this, "rowdblclick", this.onRowDblClick, this);
            this.mon(this, "containercontextmenu", this.onContainerContextMenu, this);
            this.mon(this, "rowcontextmenu", this.onRowContextMenu, this);
            this.mon(this, "headerclick", this.onBodyResize, this);
            this.mon(this, "bodyresize", this.onBodyResize, this);
            this.mon(this.getSelectionModel(), "selectionchange", this.onSelectionChange, this);
            this.mon(this.getStore(), "load", this.onBodyResize, this);
            return c
        },
        onBodyResize: function() {
            var e = this.getEl().getWidth();
            var c = this.getInnerHeight() - this.getFrameHeight();
            var d = this.getView();
            var f = d.el.child(".x-grid-empty");
            if (f) {
                f.setWidth(e);
                f.setHeight(c)
            }
        },
        onActivate: function() {
            this.startPolling(true, true)
        },
        onDeactivate: function() {
            this.stopPolling()
        },
        maskWindow: function(c) {
            if (this._mask_owner.length === 0) {
                this.getEl().mask(_T("common", "loading"), "x-mask-loading")
            }
            if (this._mask_owner.indexOf(c) === -1) {
                this._mask_owner.push(c)
            }
        },
        unmaskWindow: function(c) {
            this._mask_owner.remove(c);
            if (this._mask_owner.length === 0) {
                this.getEl().unmask()
            }
        },
        startPolling: function(c, d) {
            if (c) {
                this.maskWindow("polling")
            }
            if (this._polling_id) {
                return
            }
            this._polling_id = this.pollReg({
                webapi: {
                    api: "SYNO.ActiveBackup.Task",
                    method: "list",
                    version: 1,
                    params: {
                        filter: {
                            backup_type: this.backup_type
                        },
                        load_status: true,
                        load_result: true
                    }
                },
                interval: 3,
                immediate: d,
                scope: this,
                status_callback: this.onPollingDone
            })
        },
        stopPolling: function() {
            if (!this._polling_id) {
                return
            }
            this.pollUnreg(this._polling_id);
            this._polling_id = null;
            this.unmaskWindow("polling")
        },
        onPollingDone: function(g, d, f, e) {
            this.unmaskWindow("polling");
            if (!g) {
                this.reportError(d, "mask");
                return
            }
            this.unmask();
            this.getStore().loadData(d.tasks);
            var c = "";
            if (this.backup_type === SYNO.ActiveBackup.BackupType.VM) {
                if (d.has_inventories === true) {
                    this.actions.get("create").enable()
                } else {
                    c = _LABS("tool_tip", "no_inventory_to_create_task");
                    this.actions.get("create").disable()
                }
            } else {
                if (d.has_devices === true) {
                    this.actions.get("create").enable()
                } else {
                    c = _LABS("tool_tip", "no_device_to_create_task");
                    this.actions.get("create").disable()
                }
            }
            this.actions.get("create").items[0].setTooltip(c)
        },
        onTaskCreate: Ext.emptyFn,
        onTaskEdit: Ext.emptyFn,
        onTaskDetail: function() {
            var c = this.getSelectionModel().getSelected();
            var d = new SYNO.ActiveBackup.TaskDetailWindow({
                appWin: this.appWin,
                owner: this.owner,
                backupType: this.backup_type,
                record: c
            });
            this._openModalWindow(d)
        },
        onBackup: function() {
            this.stopPolling();
            this.maskWindow("backup_send");
            this.sendWebAPI({
                api: "SYNO.ActiveBackup.Task",
                method: "backup",
                params: {
                    task_ids: this.getSelectedIds()
                },
                version: 1,
                callback: function(d, c) {
                    this.unmaskWindow("backup_send");
                    this.startPolling(true, true);
                    if (!d) {
                        this.reportError(c)
                    }
                },
                scope: this
            })
        },
        onTaskCancel: function() {
            this.stopPolling();
            this.maskWindow("cancel_send");
            this.sendWebAPI({
                api: "SYNO.ActiveBackup.Task",
                method: "cancel",
                params: {
                    task_ids: this.getSelectedIds()
                },
                version: 1,
                callback: function(d, c) {
                    this.unmaskWindow("cancel_send");
                    this.startPolling(true, true);
                    if (!d) {
                        this.reportError(c)
                    }
                },
                scope: this
            })
        },
        onTaskVersion: function() {
            var d = this.getSelectionModel().getSelected();
            var c = new SYNO.ActiveBackup.VersionDialog({
                owner: this.owner,
                appWin: this.appWin,
                taskId: d.id,
                backupType: this.backup_type
            });
            this._openModalWindow(c)
        },
        onTaskRemove: function() {
            var d = new SYNO.SDS.MessageBoxV5({
                owner: this.owner
            });
            var c = (this.backup_type === SYNO.ActiveBackup.BackupType.AGENTLESS) ? _LABS("warning", "confirm_delete_task_keep_target") : _LABS("warning", "confirm_delete_task");
            d.confirmDelete(_LABS("component", "task_view_title"), c, function(e) {
                if (e == "yes") {
                    this.stopPolling();
                    this.maskWindow("remove_send");
                    this.sendWebAPI({
                        api: "SYNO.ActiveBackup.Task",
                        method: "remove",
                        params: {
                            task_ids: this.getSelectedIds()
                        },
                        version: 1,
                        callback: function(g, f) {
                            this.unmaskWindow("remove_send");
                            this.startPolling(true, true);
                            if (!g) {
                                this.reportError(f)
                            }
                        },
                        scope: this
                    })
                }
            }, this)
        },
        onCellClick: function(f, i, e, h) {
            var g = f.getColumnModel().getDataIndex(e);
            var c = f.getStore().getAt(i);
            var d = SYNO.SDS.ActiveBackup.Utils.renderTargetPath(c.json);
            if (g === "target_path") {
                SYNO.SDS.AppLaunch("SYNO.SDS.App.FileStation3.Instance", {
                    opendir: d
                })
            }
        },
        onRowDblClick: function() {
            return this.onTaskDetail()
        },
        onContainerContextMenu: function(d, e) {
            var g = d.getSelectionModel();
            var c = g.getSelected();
            var f = d.store.indexOf(c);
            this.onRowContextMenu(d, f, e)
        },
        onRowContextMenu: function(d, h, e) {
            var g = d.getSelectionModel(),
                c = [],
                f = null;
            g.suspendEvents(false);
            g.selectRow(h, g.isSelected(h));
            g.resumeEvents();
            this.actions.each(function(i, j) {
                if (i !== "create") {
                    c.push(j)
                }
            }, this);
            f = new SYNO.ux.Menu({
                autoDestory: true,
                items: c
            });
            f.showAt(e.getXY())
        },
        getSelectedIds: function() {
            var c = this.getSelectionModel().getSelections();
            return c.map(function(d) {
                return d.id
            })
        },
        _openModalWindow: function(c) {
            this.onDeactivate();
            c.on("close", this.onActivate, this);
            c.open()
        },
        reportError: SYNO.ActiveBackup.Util.reportError
    }
});
Ext.define("SYNO.ActiveBackup.VM.InventoryTree", {
    extend: "SYNO.ActiveBackup.VM.TreePanel",
    constructor: function(a) {
        this.callParent([Ext.apply({
            viewType: "vim.VirtualMachine-Host",
            tbar: this.initTopToolbar()
        }, a)])
    },
    initTopToolbar: function() {
        return new SYNO.ux.Toolbar({
            style: "padding: 8px 12px 8px 16px; border-bottom: 0px;",
            items: [{
                xtype: "label",
                style: "margin-right: 8px",
                html: _LABS("vmbk", "view_mode") + _T("common", "colon")
            }, this.viewBox = new SYNO.ux.ComboBox({
                width: 150,
                value: "vim.VirtualMachine-Host",
                valueField: "value",
                displayField: "display",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        ["vim.VirtualMachine-Host", _LABS("vmbk", "host_view")],
                        ["vim.VirtualMachine-Folder", _LABS("vmbk", "folder_view")]
                    ]
                })
            }), "->", this.searchBox = new SYNO.ux.TextFilter({
                width: 246,
                emptyText: _LABS("vmbk", "search_share"),
                onTriggerClick: function(a) {
                    if (this.notTriggerEvent) {
                        this.notTriggerEvent = false
                    } else {
                        SYNO.ux.TextFilter.prototype.onTriggerClick.call(this, a)
                    }
                }
            })]
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.viewBox, "select", this.onViewChange, this);
        this.mon(this.searchBox, "keypress", this.onSearchChange, this)
    },
    maskWindow: function() {
        this.callParent(arguments);
        this.searchBox.setReadOnly(true)
    },
    unmaskWindow: function() {
        this.callParent(arguments);
        if (!this.isLoading) {
            this.searchBox.setReadOnly(false)
        }
    },
    setTooltip: function(a) {
        a.tooltip = (a.type === "vim.VirtualMachine" && !a.vmtool_running ? _LABS("vmbk", "vmtool_not_running_hint") : "")
    },
    setChecked: function(a) {
        a.checked = (a.type === "vim.VirtualMachine") ? false : undefined
    },
    setNodeName: function(a) {
        a.text = a.name.replace(/\.+$/, "");
        if (a.type === "vim.VirtualMachine" && !a.status_ok) {
            a.text += String.format(" ({0})", a.status)
        }
    },
    setNodeState: function(a) {
        if (a.type === "vim.VirtualMachine" && (!a.status_ok || a.is_template || this.notModify)) {
            a.disabled = true
        }
    },
    setCheckboxTip: function(a) {
        if (a.type === "vim.VirtualMachine") {
            if (this.notModify) {
                a.checkboxTip = _LABS("tool_tip", "backup_vm_disable_modify_device_tip")
            } else {
                if (!a.status_ok || a.is_template) {
                    a.checkboxTip = _LABS("tool_tip", "backup_vm_disable_unknown_tip")
                }
            }
        }
    },
    getCheckedNodeParam: function(a) {
        return {
            inventory_id: a.inventory_id,
            entity_id: a.vm_moid_path,
            parent_id: a.vm_moid_path,
            name: a.host_name
        }
    },
    getCheckedNodeData: function(b) {
        var a = b;
        while (!Ext.isNumber(a.attributes.inventory_id)) {
            a = a.parentNode
        }
        return {
            host_name: b.attributes.name,
            os_name: b.attributes.os_name,
            device_uuid: b.attributes.instance_uuid,
            vm_moid_path: b.attributes.path,
            inventory_id: a.attributes.inventory_id,
            inventory_name: a.attributes.host_name
        }
    },
    onViewChange: function() {
        this.viewType = this.viewBox.getValue();
        var a = this.getCheckedNodes();
        this.setTreeNodeByFilter(a)
    },
    onSearchChange: function(b, a) {
        if (a.getKey() !== Ext.EventObject.ENTER) {
            return
        }
        this.searchBox.notTriggerEvent = true;
        this.setTreeNodeByFilter()
    },
    setTreeNodeByFilter: function(a) {
        var b = this.searchBox.getValue();
        if (b === "") {
            this.setCheckedNodes(a || []);
            return
        }
        this.maskWindow();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Device",
            method: "list",
            version: 1,
            params: {
                filter: {
                    backup_type: SYNO.ActiveBackup.BackupType.VM,
                    host_name: b
                }
            },
            scope: this,
            callback: function(d, c) {
                this.unmaskWindow();
                if (!d) {
                    SYNO.ActiveBackup.Util.reportError.call(this, c);
                    return
                }
                this.setCheckedNodes(c.devices, true, true)
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.VM.InventorySetter", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.setDeviceUuids = [];
        this.callParent([Ext.apply({
            title: _LABS("vmbk", "vm_view_title"),
            items: [this.taskNameField = new SYNO.ux.TextField({
                fieldLabel: _LABS("task_info", "task_name"),
                anchor: "0",
                maxlength: 64,
                allowBlank: false,
                vtype: "taskname"
            }), this.inventoryTree = new SYNO.ActiveBackup.VM.InventoryTree({
                cls: "vmbk-inventory-tree",
                notModify: a.notModify,
                height: (a.mode === "edit" ? 410 : 275)
            })]
        }, a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "setting", this.onSetting, this);
        this.mon(this, "activate", this.loadDefault, this, {
            single: true
        });
        this.mon(this.taskNameField, "blur", function() {
            this.fireEvent("checkvalid", this)
        }, this);
        this.mon(this.inventoryTree, "checkchange", function() {
            this.fireEvent("checkvalid", this)
        }, this)
    },
    loadDefault: function() {
        if (this.mode === "edit") {
            return
        }
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "get_default_task_name",
            version: 1,
            params: {
                backup_type: SYNO.ActiveBackup.BackupType.VM
            },
            scope: this,
            callback: function(c, b) {
                this.getMask().hide();
                if (!c) {
                    SYNO.ActiveBackup.Util.reportError.call(this, b);
                    return
                }
                this.taskNameField.setValue(b.task_name)
            }
        });
        if (this.devices) {
            var a = this.devices.map(function(b) {
                return b.get("rawdata")
            });
            this.inventoryTree.setCheckedNodes(a)
        }
    },
    validate: function() {
        var a = this.getParams();
        if (this.inventoryTree.isLoading) {
            if (this.mode === "edit") {
                this.owner.getMsgBox().alert("", _LABS("warning", "loading_config"))
            }
            return false
        } else {
            if (0 === a.devices.length) {
                if (this.mode === "edit") {
                    this.owner.getMsgBox().alert("", _LABS("warning", "no_select_vm"))
                }
                return false
            }
        }
        return this.taskNameField.isValid()
    },
    checkInventorySshAvailable: function(d, c, e) {
        var a = {};
        var b = [];
        Ext.each(d.devices, function(f) {
            if (!a[f.inventory_id]) {
                b.push({
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "get_server_info",
                    version: 1,
                    params: {
                        inventory_id: f.inventory_id
                    }
                });
                a[f.inventory_id] = f.inventory_name
            }
        });
        this.owner.setStatusBusy();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            callback: function(h, f) {
                this.owner.clearStatusBusy();
                if (!h || f.has_fail) {
                    SYNO.ActiveBackup.Util.reportError.call(this, f);
                    return
                }
                var g = [];
                Ext.each(f.result, function(j, i) {
                    var l = b[i].params.inventory_id;
                    var k = a[l];
                    if (!j.data.shell_available) {
                        g.push(k)
                    }
                });
                if (g.length > 0) {
                    this.owner.getMsgBox().show({
                        msg: _LABS("error", "free_license_esxi_need_ssh_connect") + "<br/><br/><ul><li>" + g.join("</li><li>") + "</li></ul>",
                        cls: "vmbk-device-err-msgbox",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                    return
                }
                e.call(c)
            }
        })
    },
    beforeNext: function(a, b) {
        this.checkInventorySshAvailable(this.owner.getParams(), a, b)
    },
    onSetting: function(a) {
        this.setDeviceUuids = a.devices.map(function(b) {
            return String.format("{0}_{1}", b.inventory_id, b.vm_moid_path)
        });
        this.taskNameField.setValue(a.task_name);
        this.inventoryTree.setCheckedNodes(a.devices)
    },
    getParams: function() {
        var b = this.inventoryTree.getCheckedNodes();
        var a = [];
        Ext.each(b, function(d) {
            var c = String.format("{0}_{1}", d.inventory_id, d.vm_moid_path);
            if (-1 === this.setDeviceUuids.indexOf(c)) {
                a.push(c)
            }
        }, this);
        return {
            task_name: this.taskNameField.getValue(),
            devices: b,
            newDeviceUuids: a
        }
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.VM.ScriptSetter", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.isBatchEdit = (a.devices.length > 1);
        var b = Ext.apply({
            width: 600,
            height: 400,
            layout: "fit",
            resizable: false,
            useStatusBar: false,
            title: _LABS("advansetting", "advansetting_script"),
            items: [this.formPanel = new SYNO.ux.FormPanel({
                items: [this.batchEditCheck = new SYNO.ux.Checkbox({
                    boxLabel: _LABS("advansetting", "enable_batch_pc_desc"),
                    hidden: !this.isBatchEdit,
                    checked: true,
                    scope: this,
                    handler: function(d, c) {
                        this.formPanel.getComponent("script_exec_mode_field").setDisabled(!c);
                        this.formPanel.getComponent("script_os_type_field").setDisabled(!c)
                    }
                }), {
                    xtype: "panel",
                    border: false,
                    height: 1,
                    hidden: !this.isBatchEdit,
                    style: "border-top: 1px solid #EBF0F5; margin: 6px 0px;"
                }, {
                    xtype: "syno_fieldset",
                    itemId: "script_exec_mode_field",
                    items: [{
                        xtype: "syno_displayfield",
                        value: _LABS("advansetting", "advansetting_edit_script")
                    }, {
                        xtype: "syno_radio",
                        boxLabel: _LABS("advansetting", "script_exec_ignore"),
                        name: "script_exec_mode",
                        value: SYNO.SDS.ActiveBackup.ScriptExecMode.IGNORE_FAILURE
                    }, {
                        xtype: "syno_radio",
                        boxLabel: _LABS("advansetting", "script_exec_required"),
                        name: "script_exec_mode",
                        value: SYNO.SDS.ActiveBackup.ScriptExecMode.REQUIRED_SUCCESS
                    }]
                }, {
                    xtype: "syno_fieldset",
                    itemId: "script_os_type_field",
                    items: [{
                        xtype: "syno_displayfield",
                        value: _LABS("advansetting", "choose_script_path_desc")
                    }, {
                        xtype: "syno_compositefield",
                        hideLabel: true,
                        items: [{
                            xtype: "syno_radio",
                            name: "script_os_type",
                            boxLabel: _LABS("advansetting", "os_windows"),
                            value: SYNO.SDS.ActiveBackup.OSType.WINDOWS
                        }, {
                            xtype: "syno_radio",
                            name: "script_os_type",
                            boxLabel: _LABS("advansetting", "os_linux"),
                            value: SYNO.SDS.ActiveBackup.OSType.LINUX
                        }]
                    }, {
                        xtype: "syno_compositefield",
                        hideLabel: true,
                        items: [{
                            xtype: "syno_textfield",
                            name: "pre_script_path",
                            emptyText: _LABS("advansetting", "pre_script"),
                            width: 410
                        }, {
                            xtype: "syno_button",
                            text: _LABS("btn", "browse"),
                            scope: this,
                            handler: function() {
                                var c = new SYNO.ActiveBackup.VM.ScriptPathSetter({
                                    owner: this
                                });
                                c.on("apply", function(d) {
                                    this.formPanel.getForm().findField("pre_script_path").setValue(d)
                                }, this);
                                c.open()
                            }
                        }]
                    }, {
                        xtype: "syno_compositefield",
                        hideLabel: true,
                        items: [{
                            xtype: "syno_textfield",
                            name: "post_script_path",
                            emptyText: _LABS("advansetting", "post_script"),
                            width: 410
                        }, {
                            xtype: "syno_button",
                            text: _LABS("btn", "browse"),
                            scope: this,
                            handler: function() {
                                var c = new SYNO.ActiveBackup.VM.ScriptPathSetter({
                                    owner: this
                                });
                                c.on("apply", function(d) {
                                    this.formPanel.getForm().findField("post_script_path").setValue(d)
                                }, this);
                                c.open()
                            }
                        }]
                    }]
                }],
                buttons: [{
                    xtype: "syno_button",
                    text: _LABS("advansetting", "advansetting_resetall"),
                    scope: this,
                    handler: this.onReset
                }, "->", {
                    xtype: "syno_button",
                    text: _LABS("btn", "ok"),
                    btnStyle: "blue",
                    scope: this,
                    handler: this.onApply
                }, {
                    xtype: "syno_button",
                    text: _LABS("btn", "cancel"),
                    scope: this,
                    handler: this.close
                }],
                buttonAlign: "left"
            })]
        }, a);
        this.callParent([b])
    },
    onOpen: function() {
        this.callParent(arguments);
        var a = this.getCommonScript();
        this.formPanel.getForm().setValues(a);
        this.batchEditCheck.setValue(!this.isBatchEdit)
    },
    getCommonScript: function() {
        var a = Ext.apply({}, this.devices[0].get("script"));
        Ext.each(this.devices, function(b) {
            a = SYNO.SDS.ActiveBackup.Utils.deepMerge(a, b.get("script"))
        });
        return a
    },
    validate: function() {
        var a = this.formPanel.getForm().getValues();
        return (a.script_os_type && a.script_exec_mode)
    },
    checkFileExist: function(a, c) {
        var b = [];
        if (a.pre_script_path) {
            b.push(a.pre_script_path)
        }
        if (a.post_script_path) {
            b.push(a.post_script_path)
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Share",
            method: "check_file",
            params: {
                paths: b
            },
            version: 1,
            callback: function(e, d) {
                this.clearStatusBusy();
                if (!e) {
                    SYNO.ActiveBackup.Util.reportError.call(this, d);
                    return
                }
                if (d.error_files.length > 0) {
                    this.getMsgBox().show({
                        msg: String.format(_LABS("advansetting", "files_not_executable"), '<br/><ul><li class="item-text">' + d.error_files.join('</li><li class="item-text">') + "</li></ul>"),
                        cls: "vmbk-device-err-msgbox",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                    return
                }
                c.call(this)
            },
            scope: this
        })
    },
    onApply: function() {
        if (!this.batchEditCheck.getValue()) {
            this.close();
            return
        }
        if (!this.validate()) {
            this.getMsgBox().alert("", _LABS("advansetting", "warning_script_choose_mode_ostype"));
            return
        }
        var a = this.formPanel.getForm().getValues();
        a.script_os_type = +a.script_os_type;
        a.script_exec_mode = +a.script_exec_mode;
        this.checkFileExist(a, function() {
            Ext.each(this.devices, function(b) {
                this.fireEvent("apply", b.get("inventory_id"), b.get("vm_moid_path"), a)
            }, this);
            this.close()
        })
    },
    onReset: function() {
        this.formPanel.getForm().reset()
    }
});
Ext.define("SYNO.ActiveBackup.VM.ScriptPathSetter", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = Ext.apply({
            width: 450,
            height: 400,
            resizable: false,
            layout: "form",
            padding: "0 20px",
            title: _LABS("vmbk", "select_script_title"),
            buttons: [{
                xtpye: "syno_button",
                itemId: "apply",
                btnStyle: "blue",
                text: _LABS("btn", "ok"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.close
            }],
            items: [{
                xtype: "syno_displayfield",
                value: _LABS("advansetting", "file_filter_desc")
            }, this.comboBox = new SYNO.ux.ComboBox({
                value: "",
                anchor: "0",
                hideLabel: true,
                valueField: "value",
                displayField: "display",
                store: new Ext.data.SimpleStore({
                    fields: ["value", "display"],
                    data: [
                        ["", "All type"],
                        [".sh", "*.sh"],
                        [".py", "*.py"],
                        [".bat", "*.bat"]
                    ]
                })
            }), {
                xtype: "syno_displayfield",
                value: _LABS("advansetting", "browse_file_desc")
            }, this.treePanel = new SYNO.ActiveBackup.VM.ScriptPathTree({
                height: 218
            })]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.onSelectionChange(this.treePanel, null);
        this.mon(this.comboBox, "select", this.onFilterChange, this);
        this.mon(this.treePanel.getSelectionModel(), "selectionchange", this.onSelectionChange, this)
    },
    onFilterChange: function() {
        this.treePanel.filterBy(this.comboBox.getValue())
    },
    onSelectionChange: function(b, a) {
        this.fbar.getComponent("apply").setDisabled(!a || a.attributes.type !== "file")
    },
    onApply: function() {
        this.fireEvent("apply", this.treePanel.getSelectionModel().getSelectedNode().attributes.path);
        this.close()
    }
});
Ext.define("SYNO.ActiveBackup.VM.ScriptPathTree", {
    extend: "SYNO.ux.TreePanel",
    constructor: function(a) {
        var b = Ext.apply({
            rootVisible: false,
            cls: "vmbk-script-path-tree",
            useGradient: false,
            root: new Ext.tree.AsyncTreeNode(),
            loader: this.createRootLoader()
        }, a);
        this.callParent([b])
    },
    filterBy: function(a) {
        this.filter = a;
        this.getRootNode().reload()
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mask = new Ext.LoadMask(this.getEl());
        this.mon(this, "beforeload", this.mask.show, this.mask);
        this.mon(this, "load", this.mask.hide, this.mask)
    },
    createRootLoader: function() {
        var a = this;
        return new SYNO.API.TreeLoader({
            api: "SYNO.ActiveBackup.Share",
            method: "list",
            dataroot: "data,shares",
            version: 1,
            listeners: {
                loadexception: function(c, b, d) {
                    SYNO.ActiveBackup.Util.reportError.call(a, JSON.parse(d.responseText).error)
                }
            },
            createNode: function(b) {
                b.text = b.name;
                b.path = b.path;
                b.loader = a.createNodeLoader();
                b.iconCls = "folder";
                return Ext.tree.TreeLoader.prototype.createNode.call(this, b)
            }
        })
    },
    createNodeLoader: function() {
        var a = this;
        return new SYNO.API.TreeLoader({
            api: "SYNO.ActiveBackup.Share",
            method: "list_file",
            dataroot: "data",
            version: 1,
            listeners: {
                beforeload: function(c, b) {
                    this.baseParams = {
                        filter: a.filter,
                        root_path: b.attributes.path
                    }
                },
                loadexception: function(c, b, d) {
                    SYNO.ActiveBackup.Util.reportError.call(a, JSON.parse(d.responseText).error)
                }
            },
            createNode: function(b) {
                b.text = b.name;
                b.path = b.path;
                b.leaf = ("file" === b.type);
                b.iconCls = ("file" === b.type ? "file" : "folder");
                return Ext.tree.TreeLoader.prototype.createNode.call(this, b)
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.VM.CredentialSetter", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.isBatchEdit = (a.devices.length > 1);
        var b = Ext.apply({
            width: 600,
            height: 250,
            layout: "fit",
            resizable: false,
            useStatusBar: false,
            title: _LABS("advansetting", "advansetting_credential"),
            items: [this.formPanel = new SYNO.ux.FormPanel({
                items: [this.batchEditCheck = new SYNO.ux.Checkbox({
                    boxLabel: _LABS("advansetting", "enable_batch_pc_desc"),
                    hidden: !this.isBatchEdit,
                    checked: true,
                    scope: this,
                    handler: function(d, c) {
                        this.formPanel.getComponent("credential_field").setDisabled(!c)
                    }
                }), {
                    xtype: "panel",
                    border: false,
                    height: 1,
                    hidden: !this.isBatchEdit,
                    style: "border-top: 1px solid #EBF0F5; margin: 6px 0px;"
                }, {
                    xtype: "syno_fieldset",
                    itemId: "credential_field",
                    items: [{
                        xtype: "syno_textfield",
                        name: "login_user",
                        fieldLabel: _LABS("advansetting", "credential_username"),
                        allowBlank: false,
                        anchor: "0"
                    }, {
                        xtype: "syno_textfield",
                        name: "login_password",
                        fieldLabel: _LABS("advansetting", "credential_password"),
                        inputType: "password",
                        anchor: "0"
                    }]
                }],
                buttons: [{
                    xtype: "syno_button",
                    text: _LABS("advansetting", "advansetting_resetall"),
                    scope: this,
                    handler: this.onReset
                }, "->", {
                    xtype: "syno_button",
                    text: _LABS("btn", "ok"),
                    btnStyle: "blue",
                    scope: this,
                    handler: this.onApply
                }, {
                    xtype: "syno_button",
                    text: _LABS("btn", "cancel"),
                    scope: this,
                    handler: this.close
                }],
                buttonAlign: "left"
            })]
        }, a);
        this.callParent([b])
    },
    onOpen: function() {
        this.callParent(arguments);
        var a = this.getCommonCredential();
        this.formPanel.getForm().setValues(a);
        this.batchEditCheck.setValue(!this.isBatchEdit)
    },
    getCommonCredential: function() {
        var a = {
            login_user: this.devices[0].get("login_user"),
            login_password: ""
        };
        Ext.each(this.devices, function(b) {
            a = SYNO.SDS.ActiveBackup.Utils.deepMerge(a, b.data)
        });
        return a
    },
    validate: function() {
        return this.formPanel.getForm().isValid()
    },
    onApply: function() {
        if (!this.batchEditCheck.getValue()) {
            this.close();
            return
        }
        if (!this.validate()) {
            return
        }
        var a = this.formPanel.getForm().getValues();
        if (this.setByWebApi) {
            var b = [];
            Ext.each(this.devices, function(c) {
                b.push(c.get("device_id"))
            }, this);
            this.getMask().show();
            this.sendWebAPI({
                api: "SYNO.ActiveBackup.Device",
                method: "set_credential",
                version: 1,
                encryption: ["login_password"],
                params: Ext.apply({
                    device_ids: b
                }, a),
                scope: this,
                callback: function(d, c) {
                    this.getMask().hide();
                    if (!d) {
                        SYNO.ActiveBackup.Util.reportError.call(this, c);
                        return
                    }
                    this.close()
                }
            })
        } else {
            Ext.each(this.devices, function(c) {
                this.fireEvent("apply", c.get("inventory_id"), c.get("vm_moid_path"), a)
            }, this);
            this.close()
        }
    },
    onReset: function() {
        this.formPanel.getForm().reset()
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.VM.AdvanceSetter", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            script: {
                text: _LABS("advansetting", "advansetting_script"),
                scope: this,
                handler: this.onScript,
                select_type_enable: [false, true, true]
            },
            credential: {
                text: _LABS("advansetting", "advansetting_credential"),
                scope: this,
                handler: this.onCredential,
                select_type_enable: [false, true, true],
                tooltip: _LABS("tool_tip", "vm_credential")
            }
        });
        var c = new SYNO.ux.EnableColumn({
            header: _LABS("advansetting", "advansetting_enable"),
            tooltip: _LABS("advansetting", "advansetting_enable"),
            dataIndex: "enabled",
            isIgnore: function(e, d) {
                return !d.get("available")
            },
            renderer: function(f, e, d) {
                if (!d.get("available")) {
                    e.attr = 'ext:qtip="' + _LABS("vmbk", "tooltip_guest_not_available") + '"';
                    return this.disableRenderer(f, e, d)
                }
                return SYNO.ux.EnableColumn.prototype.renderer.call(this, f, e, d)
            }
        });
        var b = Ext.apply({
            title: _LABS("common", "advance_setting"),
            width: 650,
            height: 500,
            resizable: false,
            layout: "form",
            padding: "0 20px",
            items: [{
                xtype: "syno_displayfield",
                itemId: "advance_setting_desc",
                value: _LABS("advansetting", "advansetting_overview")
            }, this.gridPanel = new SYNO.ux.GridPanel({
                owner: this,
                height: 378,
                store: new Ext.data.JsonStore({
                    fields: [{
                        name: "enabled",
                        mapping: "script.enabled"
                    }, {
                        name: "script",
                        defaultValue: {}
                    }, {
                        name: "checked",
                        defaultValue: false
                    }, {
                        name: "available",
                        defaultValue: false
                    }, {
                        name: "vm_moid_path",
                        defaultValue: ""
                    }, {
                        name: "inventory_id",
                        defaultValue: 0
                    }, {
                        name: "os_name",
                        defaultValue: ""
                    }, {
                        name: "host_name",
                        defaultValue: ""
                    }, {
                        name: "login_user",
                        defaultValue: ""
                    }, {
                        name: "login_password",
                        defaultValue: ""
                    }, {
                        name: "is_cred_modified",
                        defaultValue: false
                    }]
                }),
                tbar: new SYNO.ux.Toolbar({
                    items: [this.actions.get("script"), this.actions.get("credential")]
                }),
                colModel: new Ext.grid.ColumnModel({
                    columns: [c, {
                        header: _LABS("advansetting", "advansetting_vmname"),
                        tooltip: _LABS("advansetting", "advansetting_vmname"),
                        dataIndex: "host_name",
                        renderer: function(d, e) {
                            e.attr = 'ext:qtip="' + d + '"';
                            return d
                        }
                    }, {
                        header: _LABS("advansetting", "advansetting_guestos"),
                        tooltip: _LABS("advansetting", "advansetting_guestos"),
                        dataIndex: "os_name",
                        renderer: function(d, e) {
                            e.attr = 'ext:qtip="' + d + '"';
                            return d
                        }
                    }, {
                        header: _LABS("advansetting", "advansetting_script"),
                        tooltip: _LABS("advansetting", "advansetting_script"),
                        dataIndex: "script",
                        renderer: function(d) {
                            return _LABS("advansetting", (0 < d.pre_script_path.length || 0 < d.post_script_path.length) ? "status_on" : "status_off")
                        }
                    }, {
                        header: _LABS("advansetting", "advansetting_credential"),
                        tooltip: _LABS("advansetting", "advansetting_credential"),
                        dataIndex: "credential",
                        renderer: function(e, f, d) {
                            return _LABS("advansetting", (0 < d.get("login_user").length) ? "status_on" : "status_off")
                        }
                    }]
                }),
                viewConfig: {
                    markDirty: false
                },
                stateId: "SYNO.ActiveBackup.VM.AdvanceSetter.GridPanel",
                plugins: [c, new SYNO.SDS.ActiveBackup.GridStatePlugin()]
            })],
            buttons: [{
                xtype: "syno_button",
                text: _LABS("btn", "ok"),
                btnStyle: "blue",
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b])
    },
    onOpen: function() {
        this.callParent(arguments);
        this.checkInventoryGuestAvailable(function(a) {
            this.getDeviceCredentials(function(b) {
                this.mergeCheckedAndTempDevices(a, b)
            })
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.onSelectionChange();
        this.mon(this, "afterlayout", this.onAfterLayout, this, {
            single: true
        });
        this.mon(this.gridPanel.getSelectionModel(), "selectionchange", this.onSelectionChange, this)
    },
    onAfterLayout: function() {
        var a = this.getComponent("advance_setting_desc");
        SYNO.SDS.Utils.AddTip(a.getEl(), _LABS("advansetting", "tooltip_vmwaretool_must_installed"))
    },
    onSelectionChange: function() {
        var a = this.gridPanel.getSelectionModel().getSelections();
        this.actions.onSelectionChange(a.length)
    },
    validate: function() {
        var a = [];
        this.gridPanel.getStore().each(function(b) {
            if (b.get("enabled") && (b.get("script").pre_script_path.length > 0 || b.get("script").post_script_path.length > 0) && b.get("login_user").length === 0) {
                a.push(b.get("host_name"))
            }
        }, this);
        if (0 < a.length) {
            this.getMsgBox().show({
                msg: String.format(_LABS("advansetting", "err_credential_not_set"), '<br/><ul><li class="item-text">' + a.join('</li><li class="item-text">') + "</li></ul>"),
                cls: "vmbk-device-err-msgbox",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return false
        }
        return true
    },
    checkInventoryGuestAvailable: function(c) {
        var a = {};
        var b = [];
        Ext.each(this.checkedDevices, function(d) {
            if (!a[d.inventory_id]) {
                b.push({
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "get_server_info",
                    version: 1,
                    params: {
                        inventory_id: d.inventory_id
                    }
                });
                a[d.inventory_id] = d.inventory_name
            }
        });
        this.getMask().show();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            callback: function(e, d) {
                this.getMask().hide();
                if (!e || d.has_fail) {
                    SYNO.ActiveBackup.Util.reportError.call(this, d);
                    return
                }
                Ext.each(d.result, function(g, f) {
                    var h = b[f].params.inventory_id;
                    a[h] = g.data
                });
                c.call(this, a)
            }
        })
    },
    getDeviceCredentials: function(a) {
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Device",
            method: "list",
            version: 1,
            params: {
                filter: {
                    backup_type: SYNO.ActiveBackup.BackupType.VM
                }
            },
            scope: this,
            callback: function(c, b) {
                this.getMask().hide();
                if (!c) {
                    SYNO.ActiveBackup.Util.reportError.call(this, b);
                    return
                }
                a.call(this, b.devices)
            }
        })
    },
    mergeCheckedAndTempDevices: function(a, c) {
        var b = this.gridPanel.getStore();
        b.loadData(this.tempDevices);
        Ext.each(this.checkedDevices, function(e) {
            var f = a[e.inventory_id].guest_available;
            var d = b.findBy(function(g) {
                return (g.get("vm_moid_path") === e.vm_moid_path && g.get("inventory_id") === e.inventory_id)
            });
            if (d < 0) {
                e.script = {
                    enabled: false,
                    pre_script_path: "",
                    post_script_path: "",
                    script_os_type: SYNO.SDS.ActiveBackup.OSType.NONE,
                    script_exec_mode: SYNO.SDS.ActiveBackup.ScriptExecMode.NONE
                };
                Ext.each(c, function(g) {
                    if (e.inventory_id === g.inventory_id && e.vm_moid_path === g.vm_moid_path) {
                        e.login_user = g.login_user;
                        e.login_password = g.login_password;
                        return false
                    }
                });
                e.checked = true;
                e.available = f;
                b.loadData([e], true)
            } else {
                b.getAt(d).set("checked", true);
                b.getAt(d).set("available", f);
                if (!f) {
                    b.getAt(d).set("enabled", false)
                }
            }
        }, this);
        b.filter("checked", true)
    },
    checkNoToolDevices: function(a, c) {
        var b = [];
        Ext.each(a, function(d) {
            if (d.script.enabled) {
                b.push({
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "get_vm_info",
                    version: 1,
                    params: {
                        inventory_id: d.inventory_id,
                        vm_moid_path: d.vm_moid_path
                    }
                })
            }
        });
        this.getMask().show();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            callback: function(f, d) {
                this.getMask().hide();
                if (!f || d.has_fail) {
                    SYNO.ActiveBackup.Util.reportError.call(this, d);
                    return
                }
                var e = [];
                Ext.each(d.result, function(g) {
                    if (!g.data.vmtool_running) {
                        e.push(g.data.name)
                    }
                });
                if (e.length === 0) {
                    c.call(this)
                } else {
                    this.getMsgBox().show({
                        msg: _LABS("vmbk", "vmtool_not_running_hint") + '<br/><br/><ul><li class="item-text">' + e.join('</li><li class="item-text">') + "</li></ul>",
                        cls: "vmbk-device-err-msgbox",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.OK,
                        scope: this,
                        fn: c
                    })
                }
            }
        })
    },
    onApply: function() {
        if (!this.validate()) {
            return
        }
        var a = this.gridPanel.getStore();
        var b = [];
        a.clearFilter();
        a.each(function(c) {
            var d = {};
            Ext.apply(d, c.data);
            d.script.enabled = c.get("enabled");
            delete d.enabled;
            delete d.checked;
            delete d.available;
            b.push(d)
        }, this);
        a.filter("checked", true);
        this.fireEvent("apply", b);
        this.checkNoToolDevices(b, this.close)
    },
    onScript: function() {
        var a = new SYNO.ActiveBackup.VM.ScriptSetter({
            devices: this.gridPanel.getSelectionModel().getSelections(),
            owner: this
        });
        a.on("apply", function(g, f, c) {
            var b = this.gridPanel.getStore();
            var d = b.findBy(function(h) {
                return (h.get("inventory_id") === g && h.get("vm_moid_path") === f)
            });
            var e = b.getAt(d);
            e.set("script", c)
        }, this);
        a.open()
    },
    onCredential: function() {
        var a = new SYNO.ActiveBackup.VM.CredentialSetter({
            devices: this.gridPanel.getSelectionModel().getSelections(),
            owner: this
        });
        a.on("apply", function(g, f, d) {
            var b = this.gridPanel.getStore();
            var c = b.findBy(function(h) {
                return (h.get("inventory_id") === g && h.get("vm_moid_path") === f)
            });
            var e = b.getAt(c);
            e.set("login_user", d.login_user);
            e.set("login_password", d.login_password);
            e.set("is_cred_modified", true)
        }, this);
        a.open()
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.VM.GeneralSetter", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.tempDevices = [];
        this.setEnableCbt = 0;
        this.lastAnchor = null;
        var b = Ext.apply({
            title: _LABS("common", "settings_general"),
            items: [this.batchEditCheck = new SYNO.ux.Checkbox({
                boxLabel: _LABS("advansetting", "enable_batch_vm_desc"),
                hidden: !a.batch_edit,
                checked: true,
                scope: this,
                handler: function(f, e) {
                    var d = this.getForm();
                    var c = d.findField("vmm_disabled_msg");
                    d.findField("cbt_enable_mode").setDisabled(!e);
                    d.findField("enable_app_aware_bkp").setDisabled(!e);
                    d.findField("enable_encrypt_transfer").setDisabled(!e);
                    d.findField("enable_compress_transfer").setDisabled(!e);
                    d.findField("enable_verification").setDisabled((c.getValue() === "") ? !e : true);
                    d.findField("max_concurrent_devices_form").setDisabled(!e);
                    d.findField("enable_datastore_aware").setDisabled(!e)
                }
            }), {
                xtype: "panel",
                border: false,
                height: 1,
                hidden: !a.batch_edit,
                style: "border-top: 1px solid #EBF0F5; margin: 6px 0px;"
            }, {
                xtype: "syno_compositefield",
                name: "max_concurrent_devices_form",
                hideLabel: true,
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("settings_tab_panel", "max_concurrent_devices") + _T("common", "colon")
                }, {
                    xtype: "syno_combobox",
                    name: "max_concurrent_devices",
                    width: 130,
                    value: 2,
                    valueField: "value",
                    displayField: "display",
                    store: new Ext.data.SimpleStore({
                        autoDestroy: true,
                        fields: ["value", "display"],
                        data: SYNO.SDS.ActiveBackup.MaxConcurrentDevices
                    })
                }]
            }, {
                xtype: "syno_checkbox",
                name: "cbt_enable_mode",
                boxLabel: _LABS("component", "task_cbt_enable"),
                checked: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_app_aware_bkp",
                boxLabel: _LABS("component", "task_app_aware_backup_enable")
            }, {
                xtype: "syno_checkbox",
                name: "enable_compress_transfer",
                boxLabel: _LABS("component", "task_data_compression")
            }, {
                xtype: "syno_checkbox",
                name: "enable_encrypt_transfer",
                boxLabel: _LABS("component", "task_data_encryption"),
                checked: true
            }, {
                xtype: "syno_checkbox",
                name: "enable_datastore_aware",
                boxLabel: _LABS("common", "enable_datastore_aware"),
                listeners: {
                    disable: function() {
                        this.getForm().findField("datastore_reserved_form").setDisabled(true)
                    },
                    enable: function(c) {
                        this.getForm().findField("datastore_reserved_form").setDisabled(!c.getValue())
                    },
                    check: function(d, c) {
                        this.getForm().findField("datastore_reserved_form").setDisabled(d.disabled || !c)
                    },
                    scope: this
                }
            }, {
                xtype: "syno_compositefield",
                name: "datastore_reserved_form",
                indent: 1,
                disabled: true,
                hideLabel: true,
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("common", "datastore_reserved_percentage").split("{0}")[0]
                }, {
                    xtype: "syno_numberfield",
                    name: "datastore_reserved_percentage",
                    width: 50,
                    value: 10,
                    minValue: 1,
                    maxValue: 100
                }, {
                    xtype: "syno_displayfield",
                    value: _LABS("common", "datastore_reserved_percentage").split("{0}")[1]
                }]
            }, {
                xtype: "syno_checkbox",
                name: "enable_verification",
                boxLabel: _LABS("common", "enable_verification"),
                disabled: true,
                listeners: {
                    disable: function() {
                        this.getForm().findField("screenshot_setting_form").setDisabled(true)
                    },
                    enable: function(c) {
                        this.getForm().findField("screenshot_setting_form").setDisabled(!c.getValue())
                    },
                    check: function(d, c) {
                        this.getForm().findField("screenshot_setting_form").setDisabled(d.disabled || !c)
                    },
                    scope: this
                }
            }, {
                xtype: "syno_compositefield",
                name: "screenshot_setting_form",
                indent: 1,
                disabled: true,
                hideLabel: true,
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("common", "screenshot_setting_form")
                }, {
                    xtype: "syno_numberfield",
                    name: "verification_policy",
                    width: 50,
                    value: 120,
                    minValue: 10,
                    maxValue: 600
                }, {
                    xtype: "syno_displayfield",
                    name: "screenshot_setting_sec",
                    value: _LABS("common", "screenshot_setting_sec")
                }]
            }, {
                xtype: "syno_displayfield",
                name: "vmm_disabled_msg",
                style: "color:orange;",
                value: "",
                indent: 1
            }, {
                xtype: "syno_button",
                text: _LABS("common", "advance_setting"),
                scope: this,
                handler: this.onAdvance,
                hidden: a.batch_edit
            }]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "setting", this.onSetting, this);
        this.mon(this, "afterlayout", this.onAfterLayout, this, {
            single: true
        });
        this.batchEditCheck.setValue(!this.batch_edit)
    },
    activate: function() {
        if (this.lastAnchor === this.owner.getWizardAnchor()) {
            return
        }
        this.lastAnchor = this.owner.getWizardAnchor();
        var a = {};
        if (this.owner && Ext.isFunction(this.owner.getParams)) {
            a = this.owner.getParams()
        }
        this.checkVmmEnvironment(a.share_name)
    },
    onAfterLayout: function() {
        var c = this.getForm();
        var d = c.findField("cbt_enable_mode");
        var f = c.findField("enable_app_aware_bkp");
        var e = c.findField("enable_compress_transfer");
        var a = c.findField("enable_verification");
        var b = c.findField("screenshot_setting_sec");
        SYNO.SDS.Utils.AddTip(d.getEl(), _LABS("vmbk", "tooltip_cbt"));
        SYNO.SDS.Utils.AddTip(f.getEl(), _LABS("vmbk", "tooltip_appaware"));
        SYNO.SDS.Utils.AddTip(e.getEl(), _LABS("vmbk", "tooltip_data_compression"));
        SYNO.SDS.Utils.AddTip(a.getEl(), _LABS("vmbk", "tooltip_livevideo"));
        SYNO.SDS.Utils.AddTip(b.getEl(), _LABS("vmbk", "tooltip_videotime"))
    },
    checkVmmEnvironment: function(a) {
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "check_vmm",
            version: 1,
            scope: this,
            params: {
                share_name: a
            },
            callback: function(g, c) {
                this.getMask().hide();
                if (!g) {
                    SYNO.ActiveBackup.Util.reportError.call(this, c);
                    return
                }
                var e = this.getForm();
                var d = e.findField("vmm_disabled_msg");
                var b = e.findField("enable_verification");
                var f = b.getValue();
                if (!c[SYNO.SDS.ActiveBackup.VmmEnv.DSM_SUPPORTED]) {
                    d.setValue(_LABS("restore_wizard", "vmm_need_upgrade_dsm"));
                    b.setValue(false);
                    b.setDisabled(true)
                } else {
                    if (!c[SYNO.SDS.ActiveBackup.VmmEnv.INSTALLED]) {
                        d.setValue(_LABS("restore_wizard", "vmm_not_installed"));
                        b.setValue(false);
                        b.setDisabled(true)
                    } else {
                        if (!c[SYNO.SDS.ActiveBackup.VmmEnv.VMM_SUPPORTED]) {
                            d.setValue(_LABS("restore_wizard", "vmm_not_supported"));
                            b.setValue(false);
                            b.setDisabled(true)
                        } else {
                            if (!c[SYNO.SDS.ActiveBackup.VmmEnv.INCLUSTER]) {
                                d.setValue(_LABS("restore_wizard", "vmm_no_cluster"));
                                b.setValue(false);
                                b.setDisabled(true)
                            } else {
                                if (!c[SYNO.SDS.ActiveBackup.VmmEnv.SAME_VOLUME]) {
                                    d.setValue(_LABS("restore_wizard", "vmm_no_same_volume"));
                                    b.setValue(false);
                                    b.setDisabled(true)
                                } else {
                                    d.setValue("");
                                    b.setDisabled(!this.batchEditCheck.getValue())
                                }
                            }
                        }
                    }
                }
                if (f !== b.getValue()) {
                    this.owner.getMsgBox().alert("", _LABS("warning", "auto_disable_verification"))
                }
            }
        })
    },
    getInventorySetter: function() {
        if ("edit" === this.mode) {
            return this.owner.tabPanel.getComponent("inventory")
        } else {
            return this.owner.getStep("inventory")
        }
    },
    validate: function() {
        if (!this.batchEditCheck.getValue()) {
            return true
        }
        return this.getForm().isValid()
    },
    onSetting: function(a) {
        this.getForm().setValues(a);
        this.setEnableCbt = a.cbt_enable_mode;
        this.tempDevices = a.devices;
        this.checkVmmEnvironment(a.share_name)
    },
    onAdvance: function() {
        if (this.getInventorySetter().inventoryTree.isLoading) {
            this.owner.getMsgBox().alert("", _LABS("warning", "loading_config"));
            return
        }
        var b = this.getInventorySetter().getParams().devices;
        if (b.length === 0) {
            this.owner.getMsgBox().alert("", _LABS("warning", "no_select_vm"));
            return
        }
        var a = new SYNO.ActiveBackup.VM.AdvanceSetter({
            owner: this.owner,
            tempDevices: this.tempDevices,
            checkedDevices: b
        });
        a.on("apply", function(c) {
            this.tempDevices = c
        }, this);
        a.open()
    },
    getParams: function() {
        if (!this.batchEditCheck.getValue()) {
            return {}
        }
        var b = {},
            a = this.getForm();
        b.cbt_enable_mode = a.findField("cbt_enable_mode").getValue();
        b.verification_policy = a.findField("verification_policy").getValue();
        b.enable_verification = a.findField("enable_verification").getValue();
        b.enable_app_aware_bkp = a.findField("enable_app_aware_bkp").getValue();
        b.enable_encrypt_transfer = a.findField("enable_encrypt_transfer").getValue();
        b.enable_compress_transfer = a.findField("enable_compress_transfer").getValue();
        b.max_concurrent_devices = a.findField("max_concurrent_devices").getValue();
        b.enable_datastore_aware = a.findField("enable_datastore_aware").getValue();
        b.datastore_reserved_percentage = a.findField("datastore_reserved_percentage").getValue();
        if (!this.batch_edit) {
            b.scripts = {};
            b.credentials = {};
            Ext.each(this.getInventorySetter().getParams().devices, function(c) {
                Ext.each(this.tempDevices, function(e) {
                    if (e.inventory_id === c.inventory_id && e.vm_moid_path === c.vm_moid_path) {
                        var d = c.inventory_id + "_" + c.vm_moid_path;
                        b.scripts[d] = e.script;
                        b.credentials[d] = Ext.copyTo({}, e, "login_user,login_password,is_cred_modified");
                        return false
                    }
                }, this)
            }, this)
        }
        return b
    },
    checkInventoryLicensed: function(d, c, e) {
        var a = {};
        var b = [];
        Ext.each(d.devices, function(f) {
            if (!a[f.inventory_id]) {
                b.push({
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "get_server_info",
                    version: 1,
                    params: {
                        inventory_id: f.inventory_id
                    }
                });
                a[f.inventory_id] = f.inventory_name
            }
        });
        this.owner.setStatusBusy();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            callback: function(g, f) {
                this.owner.clearStatusBusy();
                if (!g || f.has_fail) {
                    SYNO.ActiveBackup.Util.reportError.call(this, f);
                    return
                }
                Ext.each(f.result, function(i, h) {
                    var j = b[h].params.inventory_id;
                    a[j] = i.data
                });
                e.call(c, a)
            }
        })
    },
    checkVmManualEnableCbt: function(d, a, c, e) {
        var b = [];
        Ext.each(d.devices, function(f) {
            if (!a[f.inventory_id].licensed) {
                b.push({
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "get_vm_info",
                    version: 1,
                    params: {
                        get_cbt: true,
                        inventory_id: f.inventory_id,
                        vm_moid_path: f.vm_moid_path
                    }
                })
            }
        });
        this.owner.setStatusBusy();
        this.sendWebAPI({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            callback: function(h, f) {
                this.owner.clearStatusBusy();
                if (!h || f.has_fail) {
                    SYNO.ActiveBackup.Util.reportError.call(this, f);
                    return
                }
                var g = [];
                Ext.each(f.result, function(j, i) {
                    var l = b[i].params.inventory_id;
                    var k = String.format("{0}_{1}", l, j.data.vm_id);
                    if (!j.data.cbt_enabled) {
                        if (0 === this.setEnableCbt || -1 < d.newDeviceUuids.indexOf(k)) {
                            g.push(j.data.name)
                        }
                    }
                }, this);
                if (g.length === 0) {
                    e.call(c)
                } else {
                    this.owner.getMsgBox().show({
                        msg: _LABS("warning", "free_license_esxi_need_manual_enable_cbt") + "<br/><br/><ul><li>" + g.join("</li><li>") + "</li></ul>",
                        cls: "vmbk-device-err-msgbox",
                        icon: Ext.MessageBox.INFO,
                        buttons: Ext.MessageBox.OK,
                        scope: c,
                        fn: e
                    })
                }
            }
        })
    },
    beforeNext: function(a, c) {
        var b = this.owner.getParams();
        if (!b.cbt_enable_mode) {
            c.call(a);
            return
        }
        this.checkInventoryLicensed(b, this, function(d) {
            this.checkVmManualEnableCbt(b, d, a, c)
        })
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.TaskSummaryPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            colModel: this.createModel(b),
            disableSelection: true,
            enableColumnMove: false,
            enableColumnHide: false,
            enableColumnResize: false,
            store: new Ext.data.JsonStore({
                autoDestroy: true,
                fields: ["item", "value"]
            })
        };
        return Ext.apply(a, b)
    },
    getEnableString: function(a) {
        return (a) ? _LABS("common", "enable") : _LABS("common", "disable")
    },
    createModel: function(c) {
        var b = [{
            header: _LABS("create_wizard", "item"),
            dataIndex: "item",
            align: "left",
            sortable: false,
            width: 200,
            renderer: (function(j, h, d, f, i, e) {
                var g = d.data.item;
                if (h) {
                    h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(g) + '"'
                }
                return g
            }).createDelegate(this)
        }, {
            header: _LABS("create_wizard", "value"),
            dataIndex: "value",
            align: "left",
            sortable: false,
            width: 200,
            renderer: (function(j, g, d, f, i, e) {
                var h = d.data.value;
                if (g) {
                    g.attr = 'ext:qtip="' + SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(h) + '"'
                }
                return Ext.util.Format.htmlEncode(h)
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    }
});
Ext.define("SYNO.ActiveBackup.VM.TaskSummaryPanel", {
    extend: "SYNO.ActiveBackup.TaskSummaryPanel",
    activate: function() {
        var c = this.owner.getParams();
        var b = this.getItemConfig(c);
        var a = [];
        Ext.each(b, function(d) {
            a.push({
                item: d.label,
                value: d.getValue.call(this, c)
            })
        }, this);
        this.getStore().loadData(a)
    },
    getItemConfig: function(b) {
        var a = [{
            label: _LABS("task_info", "task_name"),
            getValue: function(c) {
                return c.task_name
            }
        }, {
            label: _LABS("vmbk", "select_repository_headline"),
            getValue: function(c) {
                return c.share_name
            }
        }, {
            label: _LABS("restore_wizard", "hypervisor"),
            getValue: function(d) {
                var c = {};
                d.devices.each(function(e) {
                    c[e.inventory_name] = true
                });
                return Object.keys(c).join(", ")
            }
        }, {
            label: _LABS("vmbk", "vm_view_title"),
            getValue: function(c) {
                return c.devices.map(function(d) {
                    return d.host_name
                }).join(", ")
            }
        }, {
            label: _LABS("component", "task_cbt_enable"),
            getValue: function(c) {
                return this.getEnableString(c.cbt_enable_mode)
            }
        }, {
            label: _LABS("task_info", "enable_compress"),
            getValue: function(c) {
                return this.getEnableString(c.enable_compress_transfer)
            }
        }, {
            label: _LABS("component", "task_data_encryption"),
            getValue: function(c) {
                return this.getEnableString(c.enable_encrypt_transfer)
            }
        }, {
            label: _LABS("common", "transfer_setting_app_aware"),
            getValue: function(c) {
                return this.getEnableString(c.enable_app_aware_bkp)
            }
        }, {
            label: _LABS("task_info", "enable_schedule"),
            getValue: function(c) {
                return this.getEnableString(c.sched_content.enable_schedule === "enable")
            }
        }, {
            label: _LABS("retention", "enable_backup_retention"),
            getValue: function(c) {
                return this.getEnableString(!c.retention_policy.keep_all)
            }
        }, {
            label: _LABS("common", "enable_verification"),
            getValue: function(c) {
                if (!c.enable_verification) {
                    return this.getEnableString(c.enable_verification)
                }
                return c.verification_policy + _LABS("common", "screenshot_setting_sec")
            }
        }, {
            label: _LABS("advansetting", "summary_script_vms"),
            getValue: function(d) {
                var c = d.devices.map(function(f) {
                    var e = f.inventory_id + "_" + f.vm_moid_path;
                    if (!Ext.isEmpty(d.scripts[e]) && d.scripts[e].enabled) {
                        return f.host_name
                    } else {
                        return ""
                    }
                }).filter(String).join(", ");
                return c ? c : "--"
            }
        }, {
            label: _LABS("settings_tab_panel", "max_concurrent_devices"),
            getValue: function(c) {
                return c.max_concurrent_devices
            }
        }];
        return a
    }
});
Ext.define("SYNO.ActiveBackup.VM.TaskCreateWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    constructor: function(a) {
        var b = [new SYNO.ActiveBackup.TargetSelector({
            headline: _LABS("vmbk", "select_repository_headline"),
            description: _LABS("vmbk", "select_repository_desc"),
            appWin: a.appWin,
            owner: a.owner,
            itemId: "target",
            nextId: "inventory",
            backup_type: SYNO.ActiveBackup.BackupType.VM
        }), new SYNO.ActiveBackup.VM.InventorySetter({
            headline: _LABS("vmbk", "select_vm_headline"),
            description: _LABS("vmbk", "select_vm_desc"),
            appWin: a.appWin,
            devices: a.devices,
            itemId: "inventory",
            nextId: "general"
        }), new SYNO.ActiveBackup.VM.GeneralSetter({
            headline: _LABS("vmbk", "task_settings_headline"),
            description: _LABS("vmbk", "task_settings_desc"),
            appWin: a.appWin,
            itemId: "general",
            nextId: "schedule"
        }), new SYNO.ActiveBackup.ScheduleSetterPaenl({
            headline: _LABS("agentbk", "select_schedule_headline"),
            description: _LABS("agentbk", "select_schedule_desc"),
            appWin: a.appWin,
            itemId: "schedule",
            nextId: "retention"
        }), new SYNO.ActiveBackup.RetentionEditPanel({
            headline: _LABS("agentbk", "select_retention_policy_headline"),
            description: _LABS("agentbk", "select_retention_policy_desc"),
            appWin: a.appWin,
            itemId: "retention",
            nextId: "priviledge"
        }), new SYNO.ActiveBackup.PrivilegePanel({
            headline: _LABS("agentbk", "select_privilege_headline"),
            description: _LABS("agentbk", "select_privilege_desc"),
            appWin: a.appWin,
            owner: a.owner,
            itemId: "priviledge",
            nextId: "summary"
        }), new SYNO.ActiveBackup.VM.TaskSummaryPanel({
            headline: _LABS("create_wizard", "summary_header"),
            description: _LABS("create_wizard", "summary_description"),
            appWin: a.appWin,
            owner: a.owner,
            itemId: "summary",
            nextId: null
        })];
        var c = Ext.apply({
            title: _LABS("vmbk", "task_create_wizard"),
            banner: true,
            width: 700,
            height: 580,
            steps: b
        }, a);
        this.callParent([c])
    },
    onApply: function() {
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "create_vm",
            version: 1,
            params: this.getParams(),
            encryption: ["credentials"],
            scope: this,
            callback: function(b, a) {
                this.getMask().hide();
                if (!b) {
                    SYNO.ActiveBackup.Util.reportError.call(this, a);
                    return
                }
                this.getMsgBox().confirm(this.title, _LABS("warning", "confirm_instant_backup"), function(c) {
                    if (c === "yes") {
                        this.onBackup(a.task_id)
                    } else {
                        this.close()
                    }
                    this.appWin.selectTab("synoabk-task-view")
                }, this)
            }
        })
    },
    onBackup: function(a) {
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "backup",
            version: 1,
            params: {
                task_ids: [a]
            },
            scope: this,
            callback: function(c, b) {
                this.getMask().hide();
                if (!c) {
                    SYNO.ActiveBackup.Util.reportError.call(this, b, "alert", this.close, this);
                    return
                }
                this.close()
            }
        })
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.Agent.BackupTypePanel", {
    extend: "SYNO.ux.FormPanel",
    backup_type: null,
    panelAgent: null,
    panelAgentless: null,
    constructor: function(a) {
        function b() {
            return new SYNO.ux.TextField({
                bodyStyle: "margin-left: 32px; padding-left: 8px;",
                name: "task_name",
                width: 388,
                fieldLabel: _LABS("task_info", "task_name"),
                vtype: "taskname",
                vtypeText: _LABS("warning", "bad_taskname"),
                allowBlank: false
            })
        }
        this.backup_type = a.backup_type;
        this.taskNameField = b();
        var c = Ext.apply({
            items: [this.taskNameField, {
                xtype: "panel",
                height: 10,
                border: false,
                bodyStyle: "width: 100%;"
            }]
        }, a);
        this.callParent([c])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.taskNameField, "change", function() {
            this.fireEvent("checkvalid", this)
        }, this);
        this.mon(this, "activate", function() {
            this.getDefaultTaskName()
        }, this, {
            single: true
        })
    },
    validate: function() {
        var a = this.getParams();
        if (this.taskNameField.getEl().hasClass("x-form-invalid")) {
            return false
        }
        return (a.task_name !== "")
    },
    getDefaultTaskName: function() {
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "get_default_task_name",
            version: 1,
            params: {
                backup_type: this.backup_type
            },
            callback: this.setDefaultTaskName,
            scope: this
        })
    },
    setDefaultTaskName: function(d, a, c, b) {
        if (!d) {
            this.taskNameField.setValue("");
            return
        }
        this.taskNameField.setValue(a.task_name);
        this.taskNameField.fireEvent("change")
    },
    getParams: function() {
        return {
            task_name: this.taskNameField.getValue(),
            backup_type: this.backup_type
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agent.DeviceSelectPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    backup_type: null,
    constructor: function(b) {
        this.backup_type = b.backup_type;

        function g() {
            return new SYNO.API.JsonStore({
                api: "SYNO.ActiveBackup.Device",
                method: "list",
                version: 1,
                appWindow: b.appWin,
                baseParams: {
                    filter: {
                        backup_type: b.backup_type
                    }
                },
                autoLoad: true,
                root: "devices",
                idProperty: "device_id",
                fields: ["device_id", "enabled", "host_name", "login_user", "host_ip"]
            })
        }

        function a(h) {
            return new Ext.grid.ColumnModel({
                defaults: {
                    sortable: true
                },
                columns: [h, {
                    header: _LABS("agentbk", "device_name"),
                    dataIndex: "host_name"
                }, {
                    header: _LABS("agentbk", "user_name"),
                    dataIndex: "login_user"
                }, {
                    header: _LABS("agentbk", "device_ip"),
                    dataIndex: "host_ip"
                }]
            })
        }
        var e = g();

        function f() {
            return new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                width: 300,
                localFilter: true,
                localFilterField: ["host_name"],
                blOr: true,
                emptyText: _LABS("agentbk", "search_share"),
                store: e
            })
        }
        var d = new SYNO.ux.EnableColumn({
            header: _LABS("agentbk", "enable"),
            dataIndex: "enabled",
            align: "center",
            width: 80,
            listeners: {
                click: this.fireCheckValid,
                scope: this
            }
        });
        var c = Ext.apply({
            store: e,
            colModel: a(d),
            enableHdMenu: false,
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            plugins: [d],
            tbar: [f()],
            viewConfig: {
                markDirty: false
            }
        }, b);
        return this.callParent([c])
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.mon(this.getStore(), "update", function() {
            this.fireEvent("checkvalid", this)
        }, this);
        return a
    },
    getEnabledDeviceList: function() {
        return this.getStore().data.items.map(function(a) {
            return a.data
        }).filter(function(a) {
            return a.enabled
        })
    },
    fireCheckValid: function() {
        this.fireEvent("checkvalid", this)
    },
    onDataLoad: function() {
        this.getStore().each(function(a) {
            a.set("enabled", false)
        })
    },
    validate: function() {
        return (this.getParams().device_ids.length > 0)
    },
    getParams: function() {
        var a = this.getEnabledDeviceList().map(function(b) {
            return b.device_id
        });
        if (a.length > 1) {
            this.owner.getStep("task_source_type").changeMode(SYNO.SDS.ActiveBackup.CreateMode.BATCH)
        } else {
            if (a.length === 1) {
                this.owner.getStep("task_source_type").changeMode(SYNO.SDS.ActiveBackup.CreateMode.SINGLE);
                this.owner.getStep("task_source_type").setDeviceId(a[0])
            }
        }
        return {
            device_ids: a
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agent.TaskSummaryPanel", {
    extend: "SYNO.ActiveBackup.TaskSummaryPanel",
    activate: function() {
        var c = Ext.apply(this.owner.getParams(), {
            device: this.owner.getDevice()
        });
        var b = this.getItemConfig(c);
        var a = [];
        Ext.each(b, function(d) {
            if (!d.show || d.show.call(this, c)) {
                a.push({
                    item: d.label,
                    value: d.getValue.call(this, c)
                })
            }
        }, this);
        this.getStore().loadData(a)
    },
    getItemConfig: function(b) {
        var a = [{
            label: _LABS("task_info", "task_name"),
            getValue: function(c) {
                return c.task_name
            }
        }, {
            label: _LABS("component", "device"),
            getValue: function(c) {
                return c.device.map(function(d) {
                    return d.host_name
                }).join(", ")
            }
        }, {
            label: _LABS("task_info", "local_path"),
            getValue: function(c) {
                return "/" + c.share_name
            }
        }, {
            label: _LABS("common", "settings_sourceType"),
            getValue: function(c) {
                switch (c.source_type) {
                    case SYNO.ActiveBackup.SourceType.BARE_METAL:
                        return _LABS("agentbk", "source_bare_metal");
                    case SYNO.ActiveBackup.SourceType.SYSVOL:
                        return _LABS("agentbk", "source_sysvol");
                    case SYNO.ActiveBackup.SourceType.CUSVOL:
                        return _LABS("agentbk", "source_cusvol") + ": " + c.cus_vols.join(", ");
                    default:
                        SYNO.Debug.error("unknown source type: " + c.source_type);
                        return ""
                }
            }
        }, {
            label: _LABS("task_info", "enable_compress"),
            getValue: function(c) {
                return this.getEnableString(c.enable_compress_transfer)
            }
        }, {
            label: _LABS("component", "task_data_encryption"),
            getValue: function(c) {
                return this.getEnableString(c.enable_encrypt_transfer)
            }
        }, {
            label: _LABS("common", "transfer_setting_app_aware"),
            show: function(c) {
                return this.backup_type === SYNO.ActiveBackup.BackupType.SERVER
            },
            getValue: function(c) {
                return this.getEnableString(c.enable_app_aware_bkp)
            }
        }, {
            label: _LABS("common", "enable_verification"),
            show: function(c) {
                return this.backup_type !== SYNO.ActiveBackup.BackupType.PC
            },
            getValue: function(c) {
                return this.getEnableString(c.enable_verification)
            }
        }, {
            label: _LABS("task_info", "enable_schedule"),
            getValue: function(c) {
                return this.getEnableString(c.sched_content.enable_schedule === "enable")
            }
        }, {
            label: _LABS("retention", "enable_backup_retention"),
            getValue: function(c) {
                return this.getEnableString(!c.retention_policy.keep_all)
            }
        }, {
            label: _LABS("task_info", "backup_privilege"),
            show: function(c) {
                return this.backup_type !== SYNO.ActiveBackup.BackupType.PC
            },
            getValue: function(e) {
                var c = this.owner.getPrivilege();
                if (!c) {
                    return ""
                }
                var d = c.users.map(function(g) {
                    return g.name
                });
                var f = c.groups.map(function(g) {
                    return g.name
                });
                return d.concat(f).join(", ")
            }
        }];
        return a
    }
});
Ext.define("SYNO.ActiveBackup.Agent.TaskCreateWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    backup_type: null,
    have_default_device: false,
    default_device_list: [],
    constructor: function(b) {
        var c = this;
        this.owner = b.owner;
        this.backup_type = b.backup_type;
        if (b.device_list !== undefined && b.device_list.length > 0) {
            this.have_default_device = true;
            this.default_device_list = b.device_list
        }
        var a = function(f, k, h) {
            for (var g = 0; g < f.length; ++g) {
                var j = f[g];
                if (j.getItemId() !== k) {
                    continue
                }
                h.nextId = j.nextId;
                j.nextId = h.getItemId();
                f.splice(g + 1, 0, h);
                break
            }
        };

        function e(h, g, l) {
            var k = (l.length === 1) ? SYNO.SDS.ActiveBackup.CreateMode.SINGLE : SYNO.SDS.ActiveBackup.CreateMode.BATCH;
            var j = l.length > 0 ? l[0].device_id : 0;
            var i = {};
            var f = [new SYNO.ActiveBackup.Agent.BackupTypePanel({
                headline: _LABS("agentbk", "set_task_name_headline"),
                description: _LABS("agentbk", "set_task_name_desc"),
                backup_type: b.backup_type,
                appWin: b.appWin,
                itemId: "task_backup_type",
                nextId: "task_target"
            }), new SYNO.ActiveBackup.TargetSelector({
                headline: _LABS("vmbk", "select_repository_headline"),
                description: _LABS("vmbk", "select_repository_desc"),
                appWin: b.appWin,
                owner: c,
                backup_type: b.backup_type,
                itemId: "task_target",
                nextId: "task_source_type"
            }), i = new SYNO.ActiveBackup.Agent.SourceTypeWizardPanel({
                headline: _LABS("agentbk", "select_source_type_headline"),
                description: _LABS("agentbk", "select_source_type_desc"),
                appWin: b.appWin,
                owner: c,
                backup_type: b.backup_type,
                mode: k,
                device_id: j,
                itemId: "task_source_type",
                nextId: "task_schedule"
            }), new SYNO.ActiveBackup.ScheduleSetterPaenl({
                headline: _LABS("agentbk", "select_schedule_headline"),
                description: _LABS("agentbk", "select_schedule_desc"),
                appWin: b.appWin,
                itemId: "task_schedule",
                nextId: "task_retention"
            }), new SYNO.ActiveBackup.RetentionEditPanel({
                headline: _LABS("agentbk", "select_retention_policy_headline"),
                description: _LABS("agentbk", "select_retention_policy_desc"),
                appWin: b.appWin,
                itemId: "task_retention",
                nextId: "task_summary"
            }), new SYNO.ActiveBackup.Agent.TaskSummaryPanel({
                headline: _LABS("create_wizard", "summary_header"),
                description: _LABS("create_wizard", "summary_description"),
                appWin: b.appWin,
                owner: c,
                backup_type: b.backup_type,
                itemId: "task_summary",
                nextId: null
            })];
            if (h !== SYNO.ActiveBackup.BackupType.PC) {
                a(f, "task_retention", new SYNO.ActiveBackup.PrivilegePanel({
                    headline: _LABS("agentbk", "select_privilege_headline"),
                    description: _LABS("agentbk", "select_privilege_desc"),
                    appWin: b.appWin,
                    owner: c,
                    itemId: "task_priviledge"
                }))
            }
            if (g !== true) {
                a(f, "task_backup_type", new SYNO.ActiveBackup.Agent.DeviceSelectPanel({
                    headline: _LABS("agentbk", "select_backup_device_headline"),
                    description: _LABS("agentbk", "select_backup_device_desc"),
                    backup_type: b.backup_type,
                    appWin: b.appWin,
                    owner: c,
                    itemId: "task_device"
                }))
            }
            return f
        }
        var d = Ext.apply({
            title: _LABS("agentbk", "task_create_wizard"),
            cls: "syno-vmbk-task-create-wizard",
            banner: true,
            width: 700,
            height: 580,
            steps: e(b.backup_type, this.have_default_device, this.default_device_list)
        }, b);
        return this.callParent([d])
    },
    getDevice: function() {
        if (this.have_default_device) {
            return this.default_device_list
        } else {
            return this.getStep("task_device").getEnabledDeviceList()
        }
    },
    getPrivilege: function() {
        if (this.backup_type === SYNO.ActiveBackup.BackupType.PC) {
            return null
        } else {
            return this.getStep("task_priviledge").getPrivilege()
        }
    },
    onApply: function() {
        var a = this.getParams();
        a.backup_type = this.backup_type;
        if (this.have_default_device === true) {
            a.device_ids = this.default_device_list.map(function(b) {
                return b.device_id
            })
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "create_agent",
            version: 1,
            params: a,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onApplyDone: function(d, a, c, b) {
        this.clearStatusBusy();
        if (!d) {
            this.reportError(a);
            return
        }
        this.getMsgBox().confirm(this.title, _LABS("warning", "confirm_instant_backup"), function(e) {
            if (e === "yes") {
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.Task",
                    method: "backup",
                    version: 1,
                    params: {
                        task_ids: a.task_ids
                    },
                    callback: function(i, f, h, g) {
                        if (!i) {
                            this.reportError(f, "alert", this.close, this);
                            return
                        }
                        this.close()
                    },
                    scope: this
                })
            } else {
                this.close()
            }
        }, this);
        this.appWin.selectTab("synoabk-task-view")
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.VersionDialog", {
    extend: "SYNO.SDS.ModalWindow",
    pageSize: 50,
    constructor: function(a) {
        this.owner = a.owner;
        var b = Ext.apply({
            title: _T("backup", "version_info"),
            closable: true,
            cls: "synoabk-version",
            width: 746,
            height: 500,
            layout: "fit",
            resizable: false,
            useStatusBar: false,
            items: this.getGrid(a)
        }, a);
        this.getPollingTask();
        this.callParent([b])
    },
    getPollingTask: function() {
        if (!this.pollingTask) {
            this.pollingTask = this.addTask({
                interval: 3000,
                scope: this,
                run: this.loadWebApi
            })
        }
        return this.pollingTask
    },
    loadWebApi: function() {
        this.getPagingToolbar().refresh.getEl().child(".x-btn-text").addClass("not-fresh");
        this.getPagingToolbar().doRefresh()
    },
    getGrid: function(a) {
        if (!this.grid) {
            this.grid = new SYNO.ux.GridPanel({
                owner: this,
                appWin: a.appWin,
                enableHdMenu: false,
                enableColumnMove: false,
                bbar: this.getPagingToolbar(a),
                store: this.getStore(a),
                colModel: this.getColModel(a),
                viewConfig: {
                    markDirty: false,
                    trackResetOnLoad: false
                },
                stateId: "SYNO.ActiveBackup.VersionDialog.GridPanel",
                plugins: [new SYNO.SDS.ActiveBackup.GridStatePlugin()]
            })
        }
        return this.grid
    },
    getColModel: function(a) {
        var b = [];
        if (!a.deviceId) {
            b.push({
                header: "",
                width: 25,
                fixed: true,
                align: "center",
                dataIndex: "locked",
                renderer: this.renderComponents.createDelegate(this)
            })
        }
        b.push({
            header: _LABS("component", "version_time"),
            tooltip: _LABS("component", "version_time"),
            dataIndex: "time_start",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
        });
        b.push({
            header: _LABS("component", "version_time_end"),
            tooltip: _LABS("component", "version_time_end"),
            dataIndex: "time_end",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
        });
        b.push({
            header: _LABS("job_action", "backup") + " " + _LABS("common", "status"),
            tooltip: _LABS("job_action", "backup") + " " + _LABS("common", "status"),
            renderer: this.renderBackupStatus.createDelegate(this)
        });
        if (this.showVerifyStatus(a)) {
            b.push({
                header: _LABS("job_action", "verify") + " " + _LABS("common", "status"),
                tooltip: _LABS("job_action", "verify") + " " + _LABS("common", "status"),
                dataIndex: "verify_status",
                renderer: this.renderVerifyStatus.createDelegate(this)
            })
        }
        if (!a.deviceId) {
            b.push({
                width: 38,
                renderer: Ext.emptyFn
            })
        }
        return new Ext.grid.ColumnModel(b)
    },
    getStore: function(a) {
        if (!this.store) {
            this.store = new SYNO.ActiveBackup.CacheStore({
                api: "SYNO.ActiveBackup.Task",
                version: 1,
                method: "list",
                baseParams: {
                    load_status: true,
                    load_versions: true,
                    load_verify_status: this.showVerifyStatus(a)
                },
                autoLoad: false,
                appWindow: false,
                idProperty: "version_id",
                root: function(b) {
                    if (b && b.tasks && b.tasks.length > 0) {
                        return b.tasks[0].versions
                    }
                    return []
                },
                totalProperty: function(b) {
                    if (b && b.tasks && b.tasks.length > 0) {
                        return b.tasks[0].version_count
                    }
                    return 0
                },
                successProperty: function(b) {
                    return b && b.tasks && b.tasks.length > 0
                },
                fields: ["version_id", "time_start", "time_end", "status", "locked", "job", "folder_name", "device_status", "verify_status"],
                listeners: {
                    scope: this,
                    load: this.onLoadDone,
                    exception: this.onLoadException,
                    beforeload: this.onBeforeLoad
                }
            })
        }
        return this.store
    },
    getPagingToolbar: function(a) {
        if (!this.pagingToolbar) {
            this.pagingToolbar = new SYNO.ux.PagingToolbar({
                store: this.getStore(a),
                pageSize: this.pageSize,
                displayInfo: true
            })
        }
        return this.pagingToolbar
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.getGrid(), "rowclick", this.onRowClick, this);
        this.mon(this.getPagingToolbar().refresh, "click", this.getGrid().mask, this.getGrid())
    },
    onShow: function() {
        this.getGrid().mask();
        this.getPollingTask().start(true)
    },
    onRowClick: function(b, f, d) {
        var c = Ext.fly(d.target);
        if (!c) {
            return
        }
        var a = this.store.getAt(f);
        if (c.hasClass("synoabk-version-lock")) {
            this.onVersionUnLock(a.id)
        } else {
            if (c.hasClass("synoabk-version-unlock")) {
                this.onVersionLock(a.id)
            } else {
                if (c.hasClass("synoabk-version-delete")) {
                    this.onVersionDelete(a.id)
                } else {
                    if (c.hasClass("synoabk-version-link-video") || c.hasClass("synoabk-version-link-folder")) {
                        this.onVersionLink(a)
                    }
                }
            }
        }
    },
    renderComponents: function(j, i, e) {
        var f = new Ext.XTemplate('<i class="{lockCls}" ext:qtip="{lockTip}"></i><i class="{linkCls}" ext:qtip="{linkTip}"></i><i class="{delCls}" ext:qtip="{delTip}"></i>');
        var h = "";
        var g = "";
        var b = "";
        var a = "";
        var d = "";
        var c = "";
        if (!this.deviceId) {
            h = "synoabk-version-delete-disable";
            b = "synoabk-version-lock-disable";
            if (!e.get("job")) {
                switch (e.get("status")) {
                    case SYNO.SDS.ActiveBackup.VersionStatus.COMPLETED:
                    case SYNO.SDS.ActiveBackup.VersionStatus.PARTIAL:
                        if (e.get("locked")) {
                            b = "synoabk-version-lock";
                            a = _T("backup", "backup_lock_qtip");
                            g = _LABS("component", "version_delete_lock_qtip")
                        } else {
                            b = "synoabk-version-unlock";
                            a = _T("backup", "backup_unlock_qtip");
                            if (this.isLastRecord(e)) {
                                g = _LABS("component", "version_reserved_qtip")
                            } else {
                                h = "synoabk-version-delete"
                            }
                        }
                        break;
                    case SYNO.SDS.ActiveBackup.VersionStatus.CANCELED:
                    case SYNO.SDS.ActiveBackup.VersionStatus.PAUSED:
                    case SYNO.SDS.ActiveBackup.VersionStatus.FAILED:
                    case SYNO.SDS.ActiveBackup.VersionStatus.DELETE_FAILED:
                        h = "synoabk-version-delete";
                        break;
                    case SYNO.SDS.ActiveBackup.VersionStatus.BACKING_UP:
                    case SYNO.SDS.ActiveBackup.VersionStatus.WAITING_CONNECTION:
                    case SYNO.SDS.ActiveBackup.VersionStatus.DELETING:
                    case SYNO.SDS.ActiveBackup.VersionStatus.CLONING:
                        break
                }
            }
            if (this.backupType === SYNO.ActiveBackup.BackupType.AGENTLESS) {
                d = "synoabk-version-link-folder";
                c = _LABS("component", "version_folder_link_qtip")
            } else {
                switch (e.get("verify_status")) {
                    case SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS:
                    case SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS:
                        d = "synoabk-version-link-video";
                        c = _LABS("component", "version_link_qtip");
                        break;
                    default:
                        d = "synoabk-version-link-disable";
                        c = _LABS("component", "disable_version_link_qtip");
                        break
                }
            }
        }
        return f.apply({
            delCls: h,
            delTip: g,
            lockCls: b,
            lockTip: a,
            linkCls: d,
            linkTip: c
        })
    },
    isLastRecord: function(b) {
        var a = this.getStore().reader.jsonData.tasks[0].last_version_id;
        return a === b.get("version_id")
    },
    showVerifyStatus: function(a) {
        return !a.deviceId && (a.backupType === SYNO.ActiveBackup.BackupType.VM || a.backupType === SYNO.ActiveBackup.BackupType.SERVER)
    },
    renderBackupStatus: function(c, b, a) {
        var d = "";
        if (a.get("job")) {
            d = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(this.backupType, a.get("job"), false)
        } else {
            if (this.deviceId) {
                if (SYNO.SDS.ActiveBackup.VersionStatus.CANCELED === a.get("status") && SYNO.SDS.ActiveBackup.DeviceStatus.FAILED === a.get("device_status")) {
                    d = SYNO.SDS.ActiveBackup.Utils.renderVersionStatus(a)
                } else {
                    d = SYNO.SDS.ActiveBackup.Utils.renderDeviceStatus(a.get("device_status"))
                }
            } else {
                d = SYNO.SDS.ActiveBackup.Utils.renderVersionStatus(a)
            }
        }
        if (d) {
            b.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(d.replace(/<\/?[^>]+(>|$)/g, "")) + '"'
        }
        return d
    },
    renderVerifyStatus: function(d, c) {
        var e = "";
        if (!d) {} else {
            if (d === SYNO.SDS.ActiveBackup.ResultStatus.INCOMPLETE) {
                var a = "blue";
                var b = _LABS("task_status", "verifying");
                e = String.format('<font color="{0}">{1}</font>', a, b)
            } else {
                e = SYNO.SDS.ActiveBackup.Utils.renderResultStatus(d)
            }
        }
        if (e) {
            c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(e.replace(/<\/?[^>]+(>|$)/g, "")) + '"'
        }
        return e
    },
    onBeforeLoad: function(a, b) {
        b.params.filter = {
            offset: b.params.offset,
            limit: b.params.limit
        };
        if (this.taskId) {
            b.params.filter.task_id = this.taskId
        }
        if (this.deviceId) {
            b.params.filter.device_id = this.deviceId;
            b.params.filter.load_available = true
        }
        if (this.versionStatus) {
            b.params.filter.version_status = this.versionStatus
        }
        if (this.deviceStatus) {
            b.params.filter.device_status = this.deviceStatus
        }
    },
    onLoadDone: function(b) {
        this.getPagingToolbar().refresh.getEl().child(".x-btn-text").removeClass("not-fresh");
        this.getGrid().unmask();
        var a = b.reader.jsonData.tasks[0];
        Ext.each(a.waiting_jobs, function(c) {
            Ext.each(c.version_ids, function(e) {
                var d = b.getById(e);
                if (d) {
                    d.set("job", c)
                }
            }, this)
        }, this)
    },
    onLoadException: function(g, h, c, a, d) {
        if (c !== Ext.data.Api.actions.read) {
            return
        }
        var j = function() {
            this.close()
        };
        this.getGrid().unmask();
        this.getPollingTask().stop(true);
        try {
            var i = d.tasks[0].error;
            if (i.code === SYNO.SDS.ActiveBackup.ErrorTable.INTERNAL_ERROR) {
                i = _LABS("warning", "confirm_destination_exists")
            } else {
                i = SYNO.ActiveBackup.Util.parseError(i)
            }
            this.getMsgBox().alert("", i, j, this)
        } catch (f) {
            var b = d.tasks ? {
                code: SYNO.SDS.ActiveBackup.ErrorTable.NO_TASK_EXIST
            } : d;
            this.reportError(b, "alert", j, this)
        }
    },
    onVersionLock: function(a) {
        this.lockVersion(a, true)
    },
    onVersionUnLock: function(a) {
        this.getMsgBox().confirm(this.title, _T("backup", "confirm_unlock_version"), function(b) {
            if ("yes" === b) {
                this.lockVersion(a, false)
            }
        }, this)
    },
    onVersionDelete: function(a) {
        this.getMsgBox().confirmDelete(this.title, _LABS("warning", "confirm_delete_version"), function(b) {
            if ("yes" === b) {
                this.deleteVersion(a)
            }
        }, this)
    },
    onVersionLink: function(a) {
        var b = SYNO.SDS.ActiveBackup.Utils.renderTargetPath(this.getStore().reader.jsonData.tasks[0]);
        SYNO.SDS.AppLaunch("SYNO.SDS.App.FileStation3.Instance", {
            opendir: b + "/" + a.get("folder_name")
        })
    },
    lockVersion: function(b, a) {
        this.getGrid().mask();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Version",
            version: 1,
            method: "lock",
            params: {
                task_id: this.taskId,
                version_id: b,
                lock: a
            },
            scope: this,
            callback: function(d, c) {
                if (!d) {
                    this.getGrid().unmask();
                    this.reportError(c);
                    return
                }
                this.getPagingToolbar().doRefresh()
            }
        })
    },
    deleteVersion: function(a) {
        this.getGrid().mask();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Version",
            version: 1,
            method: "delete",
            params: {
                task_id: this.taskId,
                version_ids: [a]
            },
            scope: this,
            callback: function(c, b) {
                if (!c) {
                    this.getGrid().unmask();
                    this.reportError(b);
                    return
                }
                this.getPagingToolbar().doRefresh()
            }
        })
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.CacheStore", {
    extend: "SYNO.API.JsonStore",
    lastResponse: null,
    constructor: function(a) {
        var b = Ext.apply({
            listeners: {
                scope: this,
                load: this.dataLoad
            }
        }, a);
        this.callParent([b]);
        this.proxy.on("load", this.dataLoad, this)
    },
    dataLoad: function(c, a, b) {
        this.lastResponse = a
    },
    loadRecords: function(c, a, b) {
        if (c && c.success && this.checkDiffRecords(c.records)) {
            this.callParent(arguments)
        } else {
            if (this.isDestroyed === true) {
                return
            }
            if (c.success && b !== false) {
                this.fireEvent("load", this, [], a)
            } else {
                this.fireEvent("exception", this, "response", Ext.data.Api.actions.read, a, this.lastResponse)
            }
            if (a.callback) {
                a.callback.call(a.scope || this, [], a, true)
            }
        }
    },
    checkDiffRecords: function(d) {
        if (!d || d.constructor !== Array) {
            return true
        }
        var b = this.data.items;
        if (b.length !== d.length) {
            return true
        }
        var a = [];
        b.each(function(e) {
            a.push(this.recordToJson(e.data))
        }, this);
        var c = false;
        d.each(function(e) {
            if (a.indexOf(this.recordToJson(e.data)) === -1) {
                c = true;
                return
            }
        }, this);
        return c
    },
    recordToJson: function(a) {
        return JSON.stringify(this.sortObject(a))
    },
    sortObject: function(c) {
        if (typeof c !== "object") {
            return c
        }
        var a = {};
        var b = Object.keys(c);
        b.sort();
        b.each(function(d) {
            a[d] = this.sortObject(c[d])
        }, this);
        return a
    }
});
Ext.define("SYNO.ActiveBackup.DeviceFilterPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.searchPanel = null;
        this.defaultAnimation = ["#000", 1, {
            duration: 0.35
        }];
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(e) {
        var b, d;
        var c = [];
        this.inputfields = [];
        this.inputfields_config = [];
        if (e.hasOwnProperty("filter_inputfield") && e.filter_inputfield !== undefined) {
            e.filter_inputfield.forEach(function(g, f, h) {
                this.inputfields[f] = this.createInputFieled(g.name, g.display_string);
                this.inputfields_config[f] = g.name
            }, this)
        }
        this.inputfields.forEach(function(f) {
            this.push(f)
        }, c);
        if (e.hasOwnProperty("filter_protocol_type_combobox") && e.filter_protocol_type_combobox === true) {
            d = this.createProtocolType();
            c.push(d)
        }
        b = this.createFootBar();
        c.push(b);
        var a = {
            width: 368,
            heigh: 480,
            floating: true,
            labelAlign: "left",
            trackResetOnLoad: true,
            waitMsgTarget: true,
            border: true,
            bodyStyle: "padding: 20px; padding-top: 0px; font-size: 24px;",
            autoFlexcroll: false,
            defaults: {
                hideLabel: true,
                anchor: "100%"
            },
            keys: [{
                key: Ext.EventObject.ENTER,
                scope: this,
                handler: this.onSearch,
                stopEvent: true
            }],
            itemId: "search_panel",
            items: c
        };
        return Ext.apply(a, e)
    },
    onHide: function() {
        if (!this.triggerClick) {
            SYNO.SDS.ActiveBackup.Model.SearchPanel.superclass.onHide.call(this)
        }
    },
    onTriggerClickSelector: function() {
        this.triggerClick = true
    },
    createInputFieled: function(a, b) {
        return [{
            xtype: "syno_displayfield",
            value: b,
            flex: 1
        }, {
            xtype: "syno_textfield",
            name: a,
            flex: 2,
            vaule: ""
        }]
    },
    createProtocolType: function() {
        this.ProtocolTypeSelector = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: "protocol_type",
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    [SYNO.ActiveBackup.ProtocolType.ALL, _LABS("filter_panel", "filter_panel_protocol_all")],
                    [SYNO.ActiveBackup.ProtocolType.SMB, _LABS("filter_panel", "filter_panel_protocol_smb")],
                    [SYNO.ActiveBackup.ProtocolType.RSYNC, _LABS("filter_panel", "filter_panel_protocol_rsync")]
                ]
            }),
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            value: SYNO.ActiveBackup.ProtocolType.ALL
        });
        return [{
            xtype: "syno_displayfield",
            value: _LABS("filter_panel", "filter_panel_protocol_type") + _T("common", "colon"),
            flex: 1
        }, this.ProtocolTypeSelector]
    },
    createFootBar: function() {
        return [{
            xtype: "toolbar",
            border: false,
            itemId: "btns",
            toolbarCls: "search-panel-fbar-btnPanel",
            items: [{
                xtype: "tbtext",
                itemId: "msg",
                height: 26,
                style: "-webkit-text-size-adjust:none;font-size:11px;color:red;height:26px;overflow:hidden;",
                text: ""
            }, {
                xtype: "tbfill"
            }, {
                xtype: "syno_button",
                btnStyle: "blue",
                style: "margin-right: 10px",
                text: _T("log", "search"),
                itemId: "btn_search",
                handler: this.onSearch,
                scope: this
            }, {
                xtype: "syno_button",
                minWidth: 80,
                text: _T("common", "reset"),
                handler: this.onReset,
                scope: this
            }]
        }]
    },
    setKeyWord: function(a) {
        var b = this.getForm().findField("key_word");
        if (b && Ext.isString(a)) {
            b.setValue(a)
        }
        b.focus("", 1)
    },
    setMsg: function(c) {
        var b = this.get("btns");
        var a = b.get("msg");
        a.setText(c);
        if (c.trim() !== "") {
            this.frameAnimation(a.el, this.defaultAnimation)
        }
    },
    validateForm: function() {
        var a = this.getForm();
        if (!a.isValid()) {
            return false
        }
        return a.isDirty()
    },
    onSearch: function() {
        if (!this.hidden && !this.validateForm()) {
            this.setMsg(_WFT("search", "least_one"));
            return
        }
        var g = {};
        var e = this.getForm();
        var d, f, c, a, b;
        for (d = 0; d < this.inputfields_config.length; d++) {
            c = this.inputfields_config[d];
            f = e.findField(c).getValue();
            if (!f) {
                continue
            }
            g[c] = f
        }
        a = e.findField("protocol_type");
        if (null !== a) {
            b = a.getValue();
            if (b !== SYNO.ActiveBackup.ProtocolType.ALL) {
                if (b === SYNO.ActiveBackup.ProtocolType.SMB) {
                    f = "smb"
                } else {
                    if (b === SYNO.ActiveBackup.ProtocolType.RSYNC) {
                        f = "rsync"
                    }
                }
                g.os_name = f
            }
        }
        this.setMsg("");
        this.fireEvent("search", this, {
            filter: g
        })
    },
    onReset: function() {
        this.getForm().items.each(function(a) {
            if (a.isDirty()) {
                this.frameAnimation(a.el, this.defaultAnimation);
                return
            }
        }, this);
        this.setMsg("");
        this.getForm().reset();
        this.fireEvent("search", this, {
            filter: {}
        })
    },
    frameAnimation: function(a, b) {
        if (a && a.isVisible()) {
            Ext.Element.prototype.frame.apply(a, b)
        }
    }
});
Ext.define("SYNO.ActiveBackup.Device.ListView", {
    extend: "SYNO.ActiveBackup.Util.ExpandableListView",
    constructor: function(a) {
        var b = Ext.apply({
            itemId: "device_list",
            store: this.createStore(),
            innerTpl: this.createInnerTpl()
        }, a);
        this.callParent([b]);
        this.mon(this, "toggle", this.onToggleClick, this)
    },
    createStore: function() {
        function a(c) {
            return Ext.isNumber(c) ? 0 : 1
        }

        function b(c) {
            return c.toLowerCase()
        }
        return new Ext.data.JsonStore({
            hasMultiSort: true,
            autoDestroy: true,
            idProperty: "device_id",
            fields: [{
                name: "device_id",
                sortType: a
            }, {
                name: "host_name",
                sortType: b
            }, "rawdata", "host_status", "login_user", "status_key", "status", "iconCls", "properties", "tasks", "blLoad"],
            multiSortInfo: {
                sorters: [{
                    field: "device_id",
                    direction: "ASC"
                }, {
                    field: "host_name",
                    direction: "ASC"
                }]
            }
        })
    },
    createTpl: function(a) {
        var d = SYNO.SDS.ActiveBackup.Utils.getTypeStr(a.page.backup_type);
        var c = a.toggleWrapCls || this.toggleWrapCls,
            b = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap {cls}" role="option" aria-expanded="false" id={[Ext.id()]} aria-label="{ariaInfo}">', '<div class="item-summary">', '<div class="item-icon ' + d + ' {iconCls}"></div>', "<div>", String.format('<div class="item-title {titleCls}" ext:qtip="{0}">{1}{2}</div>', this.getHostTemplateTip(), this.getHostTemplate(), this.getHostStatusTemplate()), this.getSummaryInfoTemplate(), "</div>", (this.innerTpl) ? '<div class="' + c + '"><div class="item-toggle-img ' + d + '"></div></div>' : "", "</div>", '<div class="item-detail" style="display:none">', (this.innerTpl) ? this.innerTpl.html : "", "</div>", "</div>", "</tpl>", '<div class="x-clear"></div>', {
                itemLength: function(e) {
                    return e ? e.length : 0
                }
            });
        return b
    },
    getHostTemplateTip: function() {
        return "{[SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(values.host_name)]}"
    },
    getHostTemplate: function() {
        return "{host_name:htmlEncode}"
    },
    getHostStatusTemplate: function() {
        return ' <span style="font-size:12px">{host_status:htmlEncode}</span>'
    },
    getSummaryInfoTemplate: function() {
        return '<dl class="item-status item-property {statusCls}"><dt ext:qtip="{status_key:htmlEncode}">{status_key:htmlEncode}:</dt><dd ext:qtip="{status:htmlEncode}">{status:htmlEncode}</dd></dl>'
    },
    createInnerTpl: function() {
        function b(d) {
            var e = [],
                f = [];
            Ext.each(d.columns, function(k) {
                var h = '<div class="item-task-col" {0}>{1}</div>';
                var g = "item-task-col";
                var j, i;
                if (k.dataIndex == "target_version") {
                    g = "item-task-col-version";
                    return true
                } else {
                    if (k.dataIndex == "task_name") {
                        g = "item-task-col-name"
                    }
                }
                j = (k.width ? String.format('style="width:{0}%"', k.width) : "");
                i = '<div class="{0}" {1} ext:qtip="{{2}:htmlEncode}">{{3}}</div>';
                e.push(String.format(h, j, k.header));
                f.push(String.format(i, g, j, k.dataIndex, k.dataIndex))
            });
            return ['<dl class="item-property">', String.format("<dt>{0}:</dt>", d.title), "</dl>", '<div class="item-device-tasks">', '<div class="item-task-header">', e.join(""), String.format('<div class="item-task-col">{0}</div>', _LABS("component", "target_versions")), "</div>", '<tpl if="this.itemLength(values.tasks) === 0 && (values.blLoad) === false">', '<div class="item-task-row">', String.format('<div class="item-task-col">{0}</div>', d.loadingText), "</div>", "</tpl>", '<tpl if="this.itemLength(values.tasks) === 0 && (values.blLoad) !== false">', '<div class="item-task-row">', String.format('<div class="item-task-col">{0}</div>', d.emptyText), "</div>", "</tpl>", '<tpl if="this.itemLength(values.tasks) &gt; 0">', '<tpl for="tasks">', '<div class="item-task-row">', f.join(""), '<tpl if="backup_type == 4">', '<tpl if="agentless_backup_policy == 2">', '<div class="item-task-col-version" style="width:20%" ext:qtip="{target_version:htmlEncode}">{target_version}</div>', "</tpl>", '<tpl if="agentless_backup_policy != 2">', '<div class="item-task-col" style="width:20%" ext:qtip="{str_agentless_backup_policy:htmlEncode}">{str_agentless_backup_policy}</div>', "</tpl>", "</tpl>", '<tpl if="backup_type !== 4">', '<div class="item-task-col-version" style="width:20%" ext:qtip="{target_version:htmlEncode}">{target_version}</div>', "</tpl>", "</div>", "</tpl>", "</tpl>", "</div>"].join("")
        }
        var c = b({
            title: _LABS("component", "device_tasks"),
            loadingText: _T("common", "loading"),
            emptyText: _LABS("component", "task_view_empty"),
            columns: [{
                header: _LABS("task_info", "task_name"),
                dataIndex: "task_name",
                width: 20
            }, {
                header: _LABS("component", "task_last_status"),
                dataIndex: "last_result",
                noEncode: true,
                width: 35
            }, {
                header: _LABS("component", "task_status"),
                dataIndex: "status",
                noEncode: true,
                width: 25
            }, {
                header: _LABS("component", "target_versions"),
                dataIndex: "target_version",
                width: 20
            }]
        });
        var a = new Ext.XTemplate('<tpl for="properties">', '<dl class="item-property">', "<dt>{key:htmlEncode}:</dt>", String.format("<dd>{0}</dd>", this.getValueTemplate()), "</dl>", "</tpl>", c);
        return a
    },
    getValueTemplate: function() {
        return "{value:htmlEncode}"
    },
    findTaskId: function(a, c) {
        var b = -1;
        var d = this.getStore().getById(a);
        var e = d.json.tasks;
        Ext.each(e, function(f) {
            if (f.task_name === c) {
                b = f.task_id
            }
        });
        return b
    },
    onClick: function(h, i, g) {
        this.callParent(arguments);
        var f = this.getSelectedRecords();
        if (1 !== f.length) {
            return
        }
        var d = f[0].get("device_id");
        var c = Ext.fly(i);
        var b, k;
        if (!c) {
            return
        }
        if (c.hasClass("item-task-col-version")) {
            b = c.parent().first().dom.innerHTML;
            k = this.findTaskId(d, b);
            this.page.versionMgr(d, k)
        } else {
            if (c.hasClass("item-task-col-name")) {
                b = c.dom.innerHTML;
                k = this.findTaskId(d, b);
                this.flyToTaskPage(k)
            }
        }
        if (c.hasClass("item-task-col-name")) {
            var j = this.owner.getActivePage();
            var m = j.items.items[1];
            var l = m.getStore();
            k = this.findTaskId(d, i.innerHTML);
            j.setActiveTab(1);
            l.on("load", function a(e, p, n) {
                var o = m.getSelectionModel();
                o.clearSelections();
                e.each(function(q, r) {
                    if (q.json.task_id === k) {
                        o.selectRow(r)
                    }
                });
                if (o.getSelections().length === 0) {
                    this.appWin.getMsgBox().alert("", _LABS("warning", "no_task_exist"))
                }
                e.un("load", a, this)
            }, this)
        }
    },
    onToggleClick: function(a, b) {
        this.fireEvent("updateToggleItems", this.getToggledItemIds())
    },
    flyToTaskPage: function(c) {
        var e = this.page.appWin.getActivePage();
        var b = e.items.items[1];
        var a = b.getStore();
        a.on("load", function d(f, i, g) {
            var h = b.getSelectionModel();
            h.clearSelections();
            f.each(function(j, k) {
                if (j.json.task_id === c) {
                    h.selectRow(k)
                }
            });
            if (h.getSelections().length === 0) {
                this.appWin.getMsgBox().alert("", _LABS("warning", "no_task_exist"))
            }
        }, this, {
            single: true
        });
        e.setActiveTab(1)
    }
});
Ext.define("SYNO.ActiveBackup.DeviceView", {
    extend: "SYNO.ux.Panel",
    statics: {
        getIconClsByOsName: function(a) {
            if (!a) {
                return ""
            }
            a = Ext.util.Format.lowercase(a);
            if (a.indexOf("smb") !== -1) {
                return "device-icon-smb"
            } else {
                if (a.indexOf("rsync") !== -1) {
                    return "device-icon-rsync"
                } else {
                    if (a.indexOf("windows") !== -1) {
                        return "device-icon-windows"
                    } else {
                        if (a.indexOf("linux") !== -1 || a.indexOf("ubuntu") !== -1 || a.indexOf("asianux") !== -1 || a.indexOf("centos") !== -1 || a.indexOf("debian") !== -1 || a.indexOf("oracle") !== -1 || a.indexOf("redhat") !== -1 || a.indexOf("suse") !== -1 || a.indexOf("vmware photon") !== -1) {
                            return "device-icon-ubuntu"
                        } else {
                            if (a.indexOf("mac") !== -1) {
                                return "device-icon-mac"
                            } else {
                                return "device-icon-unknown"
                            }
                        }
                    }
                }
            }
        }
    },
    constructor: function(a) {
        this._view = this.createListView(a);
        this._empty_view = this.createEmptyView("no_data", false);
        this._no_device_match_view = this.createEmptyView("no_device_match", true);
        this.searchPanel = new SYNO.ActiveBackup.DeviceFilterPanel({
            itemId: "search_panel",
            cls: "syno-sds-fs-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            filter_inputfield: a.filter_inputfield,
            filter_protocol_type_combobox: a.filter_protocol_type_combobox,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackup.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        this.initActions();
        this.select_ids = [];
        this.validToggledItemIds = [];
        this.filter = {
            backup_type: this.backup_type
        };
        this.pollingTasks = this.createPollingTask();
        var b = Ext.apply({
            cls: "synoabk-device-view",
            title: _LABS("component", "device_view_title"),
            tbar: this.configToolbar(),
            layout: "card",
            activeItem: "device_list",
            items: [this._empty_view, this._view, this._no_device_match_view]
        }, a);
        this._mask_owner = [];
        return this.callParent([b])
    },
    createEmptyView: function(b, a) {
        return Ext.apply({
            layout: {
                type: "vbox",
                align: "center"
            },
            itemId: b,
            border: false,
            cls: "empty_device",
            items: [{
                xtype: "spacer",
                flex: 1
            }, {
                html: "<div class=type" + this.backup_type + "></div>",
                border: false
            }, {
                xtype: "spacer",
                height: 20
            }, {
                xtype: "label",
                cls: "text",
                html: this.renderPlaceHolderText(a)
            }, {
                xtype: "spacer",
                flex: 1
            }]
        })
    },
    renderPlaceHolderText: function(a) {
        switch (this.backup_type) {
            case SYNO.ActiveBackup.BackupType.VM:
                return (a) ? _LABS("empty_device", "no_device_match") : _LABS("empty_device", "no_device") + "<br>" + String.format(_LABS("empty_device", "vm_message"), _LABS("vmbk", "btn_host_manage"));
            case SYNO.ActiveBackup.BackupType.PC:
                return (a) ? _LABS("empty_device", "no_device_match") : _LABS("empty_device", "no_device") + "<br>" + _LABS("empty_device", "agent_message");
            case SYNO.ActiveBackup.BackupType.SERVER:
                return (a) ? _LABS("empty_device", "no_device_match") : _LABS("empty_device", "no_device") + "<br>" + _LABS("empty_device", "agent_message");
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                return (a) ? _LABS("empty_device", "no_device_match") : _LABS("empty_device", "no_device") + "<br>" + _LABS("empty_device", "agentless_message")
        }
    },
    createListView: function(a) {
        return new SYNO.ActiveBackup.Device.ListView({
            owner: a.appWin,
            page: this
        })
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            create_task: {
                text: _LABS("component", "btn_create_task"),
                itemId: "create_task",
                scope: this,
                handler: this.onTaskCreate,
                select_type_enable: [false, true, true]
            }
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.actions.onSelectionChange(0);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this);
        this.mon(this.searchPanel, "search", this.onSearch, this);
        this.mon(this.getView(), "updateToggleItems", this.onUpdateToggleItems, this);
        this.mon(this.getView(), "selectionchange", this.onSelectionChange, this);
        this.mon(this.getTopToolbar(), "afterlayout", this.adjustToolbar, this)
    },
    configButtons: function() {
        return [this.actions.get("create_task")]
    },
    configToolbar: function() {
        return new SYNO.ux.Toolbar({
            itemId: "tool_bar",
            items: [this.configButtons(), "->", this.findField]
        })
    },
    getView: function() {
        return this._view
    },
    getStore: function() {
        return this._view.getStore()
    },
    versionMgr: function(c, b) {
        if (!c || !b) {
            return
        }
        var a = new SYNO.ActiveBackup.VersionDialog({
            owner: this.owner,
            appWin: this.appWin,
            taskId: b,
            deviceId: c
        });
        this._openModalWindow(a)
    },
    _openModalWindow: function(a) {
        this.onDeactivate();
        a.on("close", this.onActivate, this);
        a.open()
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    handleApiResp: function(e) {
        var b = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Device", "list").devices;
        var d = SYNO.API.Util.GetValByAPI(e, "SYNO.ActiveBackup.Device", "list_tasks").devices;
        var c = this.select_ids;
        var a = [];
        var f = this.getView().getToggledItemIds();
        Ext.each(b, function(g) {
            var h = this.prepareData(g, d);
            if (f.indexOf(h.device_id) !== -1) {
                h.blLoad = true
            }
            a.push(h)
        }, this);
        this.getStore().loadData(a);
        this.selectedRecord(c)
    },
    startPollingTasks: function(a) {
        Ext.each(this.pollingTasks, function(b) {
            b.start(a)
        })
    },
    stopPollingTasks: function() {
        Ext.each(this.pollingTasks, function(a) {
            a.stop()
        })
    },
    createPollingTask: function() {
        return [this.addWebAPITask({
            compound: {
                mode: "parallel",
                params: [{
                    api: "SYNO.ActiveBackup.Device",
                    method: "list",
                    version: 1,
                    params: {
                        load_result: this.load_device_result || false,
                        filter: Ext.apply({
                            load_available: true
                        }, this.filter)
                    }
                }, {
                    api: "SYNO.ActiveBackup.Device",
                    method: "list_tasks",
                    version: 1,
                    params: {
                        device_ids: this.validToggledItemIds,
                        load_status: true,
                        load_result: true,
                        load_versions: true,
                        filter: {
                            load_available: true
                        }
                    }
                }]
            },
            scope: this,
            interval: 6000,
            callback: function(d, b, c, a) {
                this.unmaskWindow("polling");
                if (!d || b.has_fail) {
                    return
                }
                this.adjustUI(b);
                this.handleApiResp(b)
            }
        })]
    },
    adjustUI: function(a) {
        if (a.result[0].data.total === 0) {
            this.layout.setActiveItem((a.result[0].data.total_devices_of_backup_type === 0) ? "no_data" : "no_device_match")
        } else {
            this.layout.setActiveItem("device_list")
        }
        this.doLayout()
    },
    prepareSummary: function(a, b) {},
    prepareProperties: function(b, a) {},
    prepareData: function(b, a) {
        b.vm_info = b.vm_info || {};
        var c = {
            rawdata: b,
            device_id: b.device_id,
            properties: [],
            tasks: [],
            blLoad: false
        };
        this.prepareSummary(b, c);
        this.prepareProperties(b, c.properties);
        this.prepareTasks(b, a, c.tasks);
        return c
    },
    prepareTasks: function(f, c, h) {
        var b = [];
        Ext.each(c, function(i) {
            if (f.device_id === i.id) {
                b = i.tasks;
                return false
            }
        });
        if (0 === b.length) {
            return
        }

        function g(i) {
            return SYNO.SDS.ActiveBackup.Utils.renderTaskLastResult(i.last_result)
        }

        function e(i) {
            if (i.progress) {
                return SYNO.SDS.ActiveBackup.Utils.renderJobStatus(i.backup_type, i.progress, false)
            } else {
                return (i.next_trigger_time === "") ? _LABS("task_info", "task_no_schedule") : _LABS("schedule", "next_backup_time") + i.next_trigger_time
            }
        }

        function a(i) {
            if (i.target_status === "online") {
                return i.version_count
            } else {
                if (i.target_status === "offline") {
                    return "offline"
                } else {
                    return "loading..."
                }
            }
        }

        function d(i) {
            switch (i) {
                case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.INCREMENTAL:
                    return _LABS("backup_policy", "incremental");
                case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.MIRROR:
                    return _LABS("backup_policy", "mirror");
                case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION:
                    return _LABS("backup_policy", "version")
            }
        }
        Ext.each(b, function(i) {
            var j = {
                task_id: i.task_id,
                backup_type: i.backup_type,
                task_name: Ext.util.Format.htmlEncode(i.task_name)
            };
            if (i.backup_type == SYNO.ActiveBackup.BackupType.AGENTLESS) {
                j.agentless_backup_policy = i.agentless_backup_policy;
                j.str_agentless_backup_policy = d(i.agentless_backup_policy)
            }
            if (i.target_status) {
                j.last_result = g(i);
                j.status = e(i);
                j.target_version = a(i)
            }
            h.push(j)
        })
    },
    updateValidDeviceId: function(a) {
        this.validToggledItemIds = [];
        a.each(function(b) {
            if (Ext.isNumber(b)) {
                this.validToggledItemIds.push(b)
            }
        }, this)
    },
    onActivate: function() {
        this.getView().fireEvent("toggle");
        this.maskWindow("polling");
        this.startPollingTasks(true)
    },
    onDeactivate: function() {
        this.stopPollingTasks();
        this.unmaskWindow("polling")
    },
    selectedRecord: function(b) {
        this.getView().clearSelections();
        var a = this.getView().getRecords(this.getView().getNodes());
        var c = [];
        Ext.each(a, function(d) {
            if (b.indexOf(d.id) !== -1) {
                c.push(d)
            }
        }, this);
        this.getView().select(c)
    },
    onSelectionChange: function() {
        var a = this.getView().getSelectedRecords();
        var b = [];
        this.actions.onSelectionChange(a.length);
        Ext.each(a, function(c) {
            b.push(c.id)
        }, this);
        this.setSelectedRecords(b)
    },
    adjustToolbar: function() {
        var e = this.getTopToolbar();
        var a = this.findField.getBox().width;
        var f = e.getResizeEl().child(".x-toolbar-left-row").getWidth();
        var g = e.getResizeEl().child(".x-toolbar-right-row").getWidth() - a;
        var d = e.getWidth() - f - g - 1;
        var c = 216;
        var b = 110;
        if (d > c) {
            d = c
        } else {
            if (d < b) {
                d = b
            }
        }
        this.findField.setWidth(d)
    },
    setSelectedRecords: function(a) {
        this.select_ids = a
    },
    onUpdateToggleItems: function(a) {
        this.updateValidDeviceId(a);
        this.stopPollingTasks();
        this.pollingTasks = this.createPollingTask();
        this.startPollingTasks(true)
    },
    onSearch: function(a, b) {
        this.filter = {
            backup_type: this.backup_type
        };
        Ext.apply(this.filter, b.filter);
        this.stopPollingTasks();
        this.pollingTasks = this.createPollingTask();
        this.maskWindow("polling");
        this.startPollingTasks(true)
    },
    onTaskCreate: Ext.emptyFn,
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agent.AddDeviceWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    constructor: function(a) {
        var b = Ext.apply({
            title: _LABS("agentbk", "add_device_title"),
            banner: true,
            width: 650,
            height: 500,
            steps: [new SYNO.ActiveBackup.Agent.AddDevicePanel({
                headline: _LABS("agentbk", "add_device_headline"),
                owner: this,
                itemId: "add_device"
            })]
        }, a);
        this.callParent([b]);
        this.getButton("next").hide();
        this.getButton("cancel").hide();
        this.addButton({
            xtype: "syno_button",
            text: _LABS("btn", "go_template"),
            btnStyle: "blue",
            scope: this,
            handler: this.toTemplate
        }, null, this);
        this.addButton({
            xtype: "syno_button",
            text: _LABS("btn", "ok"),
            btnStyle: "blue",
            scope: this,
            handler: this.closeWin
        }, null, this);
        return
    },
    closeWin: function() {
        this.close()
    },
    toTemplate: function() {
        this.close();
        this.appWin.selectPage("SYNO.ActiveBackup.PageSetting");
        var a = this.appWin.getActivePage();
        a.setActiveTab(1)
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agent.AddDevicePanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        var b = Ext.apply({
            xtype: "vbox",
            cls: "add-device",
            items: [{
                xtype: "label",
                itemId: "Intro",
                html: _LABS("agentbk", "add_device_intro")
            }, {
                xtype: "spacer",
                height: 10
            }, {
                xtype: "label",
                itemId: "first_step",
                html: _LABS("agentbk", "add_device_first_step")
            }, {
                xtype: "spacer",
                height: 10
            }, {
                xtype: "label",
                itemId: "second_step",
                html: _LABS("agentbk", "add_device_second_step")
            }, {
                xtype: "spacer",
                height: 10
            }, {
                xtype: "label",
                itenId: "third_step",
                text: _LABS("agentbk", "add_device_third_step")
            }, {
                xtype: "box",
                width: 592,
                itemId: "protocol_help",
                html: '<div class="add-device note"><div class="content">' + _LABS("agentbk", "template_description") + "</div></div>"
            }]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.owner.getEl().mask(_T("common", "loading"), "x-mask-loading");
        this.setUrl()
    },
    setUrl: function() {
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agent",
            version: 1,
            method: "get_client_dl_link",
            callback: function(e, c, d, a) {
                var b = String.format(_LABS("agentbk", "add_device_first_step"), c.url_32, c.url_64);
                this.getComponent("first_step").setText(b, false);
                this.owner.getEl().unmask()
            },
            scope: this
        })
    }
});
Ext.define("SYNO.ActiveBackup.Agent.RecoveryMediaWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        var b = Ext.apply({
            title: _LABS("agentbk", "title_create_recovery_media"),
            closable: false,
            resizable: false,
            border: true,
            width: 480,
            height: 272,
            padding: "0 20px",
            cls: "recovery-media-dialog",
            items: [{
                xtype: "syno_displayfield",
                cls: "recover-bare-metal-desc",
                value: _LABS("agentbk", "recover_bare_metal_desc")
            }, {
                xtype: "syno_displayfield",
                cls: "download-recovery-media-guide-desc",
                value: _LABS("agentbk", "download_recovery_media_guide_desc")
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                items: [{
                    xtype: "box",
                    autoEl: {
                        tag: "div",
                        cls: "icon-pdf"
                    }
                }, {
                    xtype: "syno_displayfield",
                    cls: "download-link",
                    value: _LABS("agentbk", "download_recovery_media_guide"),
                    listeners: {
                        scope: this,
                        render: function(d) {
                            var c = this.getEl();
                            this.mon(c, "click", function(f) {
                                f.preventDefault();
                                this.downloadGuide()
                            }, this)
                        }
                    }
                }]
            }],
            buttons: [{
                xtype: "syno_button",
                btnStyle: "gray",
                text: _LABS("common", "close"),
                scope: this,
                handler: this.onCloseClick
            }]
        }, a);
        return this.callParent([b])
    },
    onCloseClick: function() {
        this.close()
    },
    downloadGuide: function() {
        var a = SYNO.SDS.ActiveBackup.Utils.getRecoverMediaGuideLink();
        window.open(a)
    }
});
Ext.define("SYNO.ActiveBackup.Agent.DeviceView", {
    extend: "SYNO.ActiveBackup.DeviceView",
    constructor: function(a) {
        this.backup_type = a.backup_type;
        var b = [{
            name: "key_word",
            display_string: _LABS("filter_panel", "filter_panel_key_word") + _T("common", "colon")
        }, {
            name: "host_name",
            display_string: _LABS("filter_panel", "filter_panel_host_name") + _T("common", "colon")
        }, {
            name: "host_ip",
            display_string: _LABS("filter_panel", "filter_panel_host_ip") + _T("common", "colon")
        }, {
            name: "login_user",
            display_string: _LABS("filter_panel", "filter_panel_login_user") + _T("common", "colon")
        }];
        return this.callParent([Ext.apply({
            cls: "synoabk-device-view synoabk-device-view-agent",
            title: _LABS("component", "device_view_title"),
            filter_inputfield: b,
            load_device_result: true,
            filter_protocol_type_combobox: false
        }, a)])
    },
    createListView: function(a) {
        return new SYNO.ActiveBackup.Device.AgentListView({
            owner: a.appWin,
            page: this
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.getStore(), "load", this.applyUpdateNowHandler, this)
    },
    applyUpdateNowHandler: function() {
        this.getEl().select(".agent-device-update-now").on("click", function(d, c) {
            var b = Ext.get(c);
            var a = parseInt(b.getAttribute("device_id"), 10);
            if (isNaN(a)) {
                SYNO.Debug.error("Invalid device id.");
                return
            }
            this.updateAgent(this, [a])
        }, this)
    },
    handleApiResp: function(a) {
        this.callParent(arguments);
        this.updateBtn()
    },
    updateBtn: function() {
        var a = this.getView().getRecords(this.getView().getNodes());
        this.actions.get("update_all_agent").disable();
        if (a.size() === 0) {
            return
        }
        for (var b = 0; b < a.size(); b++) {
            if (a[b] !== undefined && a[b].data.rawdata.agent_can_update) {
                this.actions.get("update_all_agent").enable();
                break
            }
        }
    },
    initActions: function() {
        var a = this.callParent(arguments);
        this.actions.add("add_device", {
            text: _LABS("component", "btn_add_device"),
            scope: this,
            handler: this.onAddDevice,
            select_type_enable: [true, true, true]
        });
        this.actions.add("remove_device", {
            text: _LABS("component", "btn_delete"),
            scope: this,
            handler: this.onRemoveDevice,
            select_type_enable: [false, true, true]
        });
        this.actions.add("update_agent", {
            text: _LABS("agentbk", "btn_selected_device"),
            scope: this,
            handler: this.onUpdateAgent,
            disabled: true,
            select_type_enable: [false, true, true]
        });
        this.actions.add("update_all_agent", {
            text: _LABS("agentbk", "btn_all_devices"),
            scope: this,
            handler: this.onUpdateAllAgent,
            select_type_enable: [false, true, true]
        });
        this.actions.add("open_restore_portal", {
            text: _LABS("btn", "open_in_portal"),
            scope: this,
            handler: this.onOpenRestorePortal,
            select_type_enable: [true, true, true]
        });
        this.actions.add("create_recovery_media", {
            text: _LABS("btn", "create_recovery_media"),
            scope: this,
            handler: this.onRestoreAgent,
            select_type_enable: [true, true, true]
        });
        this.actions.add("portal_or_media", {
            text: _LABS("btn", "restore"),
            scope: this,
            menu: [this.actions.get("open_restore_portal"), this.actions.get("create_recovery_media")],
            select_type_enable: [true, true, true]
        });
        this.actions.add("restore", {
            text: _LABS("btn", "restore"),
            scope: this,
            handler: this.onRestore,
            select_type_enable: [false, true, false]
        });
        this.actions.add("upgrade_device", {
            text: _LABS("agentbk", "btn_change_device"),
            scope: this,
            handler: this.onUpgradeDevice,
            select_type_enable: [false, true, true]
        });
        this.actions.add("update_agent_dropdown", {
            text: _LABS("agentbk", "btn_update_agent"),
            scope: this,
            menu: [this.actions.get("update_agent"), this.actions.get("update_all_agent")],
            select_type_enable: [true, true, true]
        });
        this.actions.add("more", {
            text: _LABS("agentbk", "btn_more"),
            scope: this,
            menu: [this.actions.get("update_agent_dropdown"), this.actions.get("upgrade_device")],
            select_type_enable: [true, true, true]
        });
        return a
    },
    onRestoreAgent: function() {
        var a = new SYNO.ActiveBackup.Agent.RecoveryMediaWindow({
            appWin: this.appWin,
            owner: this.owner
        });
        this._openModalWindow(a)
    },
    onRestore: function() {
        var a = this.getView().getSelectedRecords()[0];
        var b = new SYNO.ActiveBackup.Restore.RestoreWizard({
            appWin: this.appWin,
            owner: this.owner,
            device_id: a.id,
            backup_type: this.backup_type
        });
        this._openModalWindow(b)
    },
    configButtons: function() {
        var a = this.callParent(arguments);
        a.splice(0, 0, this.actions.get("add_device"));
        a.splice(3, 0, this.actions.get("remove_device"));
        if (this.backup_type == SYNO.ActiveBackup.BackupType.PC) {
            a.splice(2, 0, this.actions.get("portal_or_media"));
            a.splice(4, 0, this.actions.get("more"))
        } else {
            a.splice(2, 0, this.actions.get("restore"));
            a.splice(4, 0, this.actions.get("update_agent_dropdown"))
        }
        return a
    },
    prepareSummary: function(a, b) {
        b.device_id = a.device_id;
        b.host_name = a.host_name;
        b.login_user = a.login_user;
        b.host_ip = a.host_ip;
        b.host_status = SYNO.SDS.ActiveBackup.Utils.getAgentUpdateDescription(a) || "";
        b.iconCls = SYNO.ActiveBackup.DeviceView.getIconClsByOsName(a.os_name);
        b.status_key = _LABS("component", "task_status");
        b.status = SYNO.SDS.ActiveBackup.Utils.renderTaskLastResult(a.last_result, "{0} ({1})");
        if (a.agent_status === "online") {
            b.iconCls = b.iconCls + "-online"
        } else {
            if (a.agent_status === "deleting") {
                b.iconCls = b.iconCls + "-deleting"
            } else {
                b.iconCls = b.iconCls + "-offline"
            }
        }
    },
    prepareProperties: function(c, b) {
        var a = SYNO.SDS.ActiveBackup.Utils.getAgentVersion(c);
        if (c.agent_update_status === SYNO.SDS.ActiveBackup.AgentUpdateStatus.NONE && c.agent_can_update && c.agent_status !== "deleting") {
            a += String.format(' (<span href="#" class="agent-device-update-now" device_id="{1}">{0}</span>)', _LABS("agentbk", "update_now"), c.device_id)
        }
        b.push({
            key: _LABS("component", "device_login_time"),
            value: SYNO.SDS.ActiveBackup.Utils.renderTime(c.login_time)
        }, {
            key: _LABS("component", "device_os_name"),
            value: c.os_name
        }, {
            key: _LABS("component", "device_version"),
            value: a
        })
    },
    onAddDevice: function() {
        var a = new SYNO.ActiveBackup.Agent.AddDeviceWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.backup_type,
            task_store: this.getStore()
        });
        this._openModalWindow(a)
    },
    onOpenRestorePortal: function() {
        SYNO.SDS.WindowLaunch("SYNO.SDS.ActiveBackupPortal.Application")
    },
    onRemoveDevice: function() {
        if (this.getView().getSelectedRecords().size() === 0) {
            return
        }
        var b = new SYNO.SDS.MessageBoxV5({
            owner: this.owner
        });
        var a = {
            yes: {
                text: _LABS("btn", "confirm_delete"),
                btnStyle: "red"
            },
            no: {
                text: _LABS("btn", "cancel")
            }
        };
        b.confirmDelete(_LABS("component", "device_view_title"), _LABS("warning", "confirm_delete_device"), function(d) {
            if (d == "yes") {
                this.stopPollingTasks();
                this.maskWindow("loading");
                var c = this.getView().getSelectedRecords();
                var e = [];
                Ext.each(c, function(f) {
                    e.push(f.id)
                });
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.Device",
                    method: "remove",
                    params: {
                        device_ids: e
                    },
                    version: 1,
                    callback: function(g, f) {
                        this.unmaskWindow("loading");
                        this.startPollingTasks(true);
                        if (!g) {
                            this.reportError(f)
                        }
                    },
                    scope: this
                })
            }
        }, this, a)
    },
    onUpdateAllAgent: function() {
        var a = this.getView().getRecords(this.getView().getNodes());
        if (a.size() === 0) {
            return
        }
        var b = a.filter(function(c) {
            return c.data.rawdata.agent_can_update
        }).map(function(c) {
            return c.id
        });
        this.updateAgent(this, b)
    },
    onUpdateAgent: function() {
        var a = this.getView().getSelectedRecords();
        if (a.length === 0) {
            return
        }
        var b = a.filter(function(c) {
            return c.data.rawdata.agent_can_update
        }).map(function(c) {
            return c.id
        });
        this.updateAgent(this, b)
    },
    updateAgentTime: null,
    updateAgent: function(a, c) {
        a.stopPollingTasks();
        a.maskWindow("loading");
        if (a.updateAgentTime === null) {
            var b = new Date();
            a.updateAgentTime = b.getTime()
        }
        a.sendWebAPI({
            api: "SYNO.ActiveBackup.Agent.Device",
            method: "update_agent",
            params: {
                device_ids: c
            },
            version: 1,
            callback: function(j, g, i, f) {
                if (!j) {
                    this.unmaskWindow("loading");
                    this.startPollingTasks();
                    this.reportError(g);
                    return
                }
                if (g.hasOwnProperty("delay") && g.delay === true) {
                    var h = new Date();
                    var e = h.getTime();
                    if ((e - this.updateAgentTime) > 10000) {
                        this.unmaskWindow("loading");
                        this.startPollingTasks();
                        g.code = SYNO.SDS.ActiveBackup.ErrorTable.DOWNLOAD_INSTALLER_FAILED;
                        this.reportError(g);
                        this.updateAgentTime = null;
                        return
                    }
                    setTimeout(this.updateAgent, 1000, this, i.device_ids);
                    return
                }
                this.unmaskWindow("loading");
                this.startPollingTasks();
                this.updateAgentTime = null
            },
            scope: a
        })
    },
    onUpgradeDevice: function() {
        var a = this.getView().getSelectedRecords();
        if (a.length === 0) {
            return
        }
        var b = a.map(function(c) {
            return c.id
        });
        this.upgradeDevice(b)
    },
    upgradeDevice: function(b) {
        if (b.length === 0) {
            return
        }
        var a = new SYNO.SDS.MessageBoxV5({
            owner: this.owner
        });
        a.confirm(_LABS("component", "device_view_title"), _LABS("agentbk", "change_device_confirm_message"), function(c) {
            if (c == "yes") {
                this.stopPollingTasks();
                this.maskWindow("loading");
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.Agent.Device",
                    method: "upgrade",
                    params: {
                        device_ids: b
                    },
                    version: 1,
                    callback: function(e, d) {
                        this.unmaskWindow("loading");
                        this.startPollingTasks(true);
                        if (!e) {
                            this.reportError(d)
                        }
                    },
                    scope: this
                })
            }
        }, this)
    },
    onTaskCreate: function() {
        var a = this.getView().getSelectedRecords();
        var c = a.map(function(d) {
            return d.data
        });
        var b = new SYNO.ActiveBackup.Agent.TaskCreateWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.backup_type,
            task_store: this.getStore(),
            device_list: c
        });
        this._openModalWindow(b)
    },
    onSelectionChange: function(b) {
        this.callParent(arguments);
        var a = this.getView().getSelectedRecords();
        Ext.each(a, function(c) {
            if (!c.data.rawdata.agent_can_update || c.data.rawdata.agent_update_status !== 0) {
                this.actions.get("update_agent").disable()
            }
            if (!c.data.rawdata.agent_status || c.data.rawdata.agent_status === "deleting") {
                this.actions.get("remove_device").disable();
                this.actions.get("create_task").disable();
                this.actions.get("update_agent").disable();
                this.actions.get("open_restore_portal").disable();
                this.actions.get("restore").disable();
                this.actions.get("upgrade_device").disable()
            }
        }, this);
        this.updateBtn()
    }
});
Ext.define("SYNO.ActiveBackup.Agent.TaskView", {
    extend: "SYNO.ActiveBackup.TaskView",
    constructor: function(a) {
        this.backup_type = a.backup_type;
        this.appWin = a.appWin;
        this.owner = a.owner;
        return this.callParent([a])
    },
    initActions: function() {
        this.callParent(arguments)
    },
    configColumnModel: function() {
        var a = this.callParent(arguments);
        a.columns.splice(1, 0, {
            header: _LABS("agentbk", "device_name"),
            width: 35,
            dataIndex: "first_device_name",
            renderer: function(c, d, b) {
                d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return c
            }
        }, {
            header: _LABS("agentbk", "source_type"),
            width: 35,
            dataIndex: "source_type",
            renderer: function(d, e, b) {
                var c = SYNO.SDS.ActiveBackup.Utils.renderSourceType(d);
                e.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return c
            }
        });
        return a
    },
    onTaskCreate: function() {
        var a = new SYNO.ActiveBackup.Agent.TaskCreateWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.backup_type,
            task_store: this.getStore()
        });
        this._openModalWindow(a)
    },
    onTaskEdit: function() {
        var c = this.getSelectionModel();
        var a = c.getSelections();
        var b = new SYNO.ActiveBackup.Agent.TaskEditWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.backup_type,
            records: a
        });
        this._openModalWindow(b)
    },
    startPolling: function(a, b) {
        if (a) {
            this.maskWindow("polling")
        }
        if (this._polling_id) {
            return
        }
        this._polling_id = this.pollReg({
            webapi: {
                api: "SYNO.ActiveBackup.Task",
                method: "list",
                version: 1,
                params: {
                    filter: {
                        backup_type: this.backup_type
                    },
                    load_status: true,
                    load_result: true,
                    load_devices: true
                }
            },
            interval: 3,
            immediate: b,
            scope: this,
            status_callback: this.onPollingDone
        })
    },
    onSelectionChange: function(c) {
        var a = c.getSelections();
        this.actions.onSelectionChange(a.length);
        if (a.length > 0) {
            var b = [];
            b.edit = true;
            b.backup = true;
            b.cancel = true;
            b.remove = true;
            b.detail = true;
            b.version = true;
            Ext.each(a, function(f) {
                var d = f.get("progress");
                var e = f.get("waiting_jobs");
                if (d === "" && e === "") {
                    b.cancel = false;
                    return true
                }
                b.remove = false;
                if (d === "") {
                    d = e[0]
                }
                switch (d.action) {
                    case SYNO.SDS.ActiveBackup.JobAction.BACKUP:
                        b.backup = false;
                        if (d.running_task_status === SYNO.SDS.ActiveBackup.AgentRunningTaskStatus.CANCELING) {
                            b.cancel = false
                        }
                        break;
                    case SYNO.SDS.ActiveBackup.JobAction.VERIFY:
                        if (d.status === SYNO.SDS.ActiveBackup.JobStatus.STOPPING) {
                            b.cancel = false
                        }
                        b.backup = false;
                        break;
                    case SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION:
                        b.backup = false;
                        b.cancel = false;
                        break;
                    case SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET:
                        b.edit = false;
                        b.backup = false;
                        b.cancel = false;
                        b.detail = false;
                        b.version = false;
                        break
                }
            });
            if (a.length > 1) {
                b.detail = false;
                b.version = false
            }
            Ext.each(Object.keys(b), function(d) {
                this.actions.get(d).setDisabled(b[d] === false)
            }, this)
        }
        this.checkMaxCount()
    }
});
Ext.define("SYNO.ActiveBackup.Device.AgentListView", {
    extend: "SYNO.ActiveBackup.Device.ListView",
    constructor: function(a) {
        this.callParent([a])
    },
    createStore: function() {
        return new Ext.data.JsonStore({
            autoDestroy: true,
            idProperty: "device_id",
            fields: ["device_id", "rawdata", "host_name", "host_status", "status_key", "status", "iconCls", "properties", "tasks", "login_user", "host_ip", "blLoad"]
        })
    },
    getHostStatusTemplate: function() {
        return '<tpl if="values.rawdata.agent_status === \'deleting\'"> <div class="agent-device-status">(' + _LABS("common", "device_deleting") + ')</div></tpl><tpl if="values.rawdata.agent_status !== \'deleting\'"><tpl if="values.host_status !== \'\'"> <div class="agent-device-status">(<span class="agent-device-update-desc">{host_status:htmlEncode}</span>)</div></tpl></tpl>'
    },
    getValueTemplate: function() {
        return "{value}"
    },
    getSummaryInfoTemplate: function() {
        return '<dl class="item-status item-property {statusCls}"><dt ext:qtip="{status_key:htmlEncode}">{status_key:htmlEncode}:</dt><dd ext:qtip="{status:htmlEncode}">{status}</dd></dl><dl class="item-property" style="margin-bottom:5px;"><dt>' + _LABS("component", "device_user") + ":</dt><dd>{login_user:htmlEncode} ({host_ip:htmlEncode})</dd></dl>"
    }
});
Ext.define("SYNO.ActiveBackup.PagePcBackup", function(a) {
    return {
        extend: "SYNO.ux.TabPanel",
        constructor: function(b) {
            var d = Ext.copyTo({}, b, "appWin, owner");
            d.backup_type = SYNO.ActiveBackup.BackupType.PC;
            var c = Ext.apply({
                items: [new SYNO.ActiveBackup.Agent.DeviceView(d), new SYNO.ActiveBackup.Agent.TaskView(Ext.apply({
                    stateId: "SYNO.ActiveBackup.PagePcBackup.TaskView"
                }, d))]
            }, b);
            return this.callParent([c])
        },
        getHelpParam: function() {
            return "activebackup_business_personalcomputer.html"
        }
    }
});
Ext.define("SYNO.ActiveBackup.PageServerBackup", function(a) {
    return {
        extend: "SYNO.ux.TabPanel",
        constructor: function(b) {
            var d = Ext.copyTo({}, b, "appWin,owner");
            d.backup_type = SYNO.ActiveBackup.BackupType.SERVER;
            var c = Ext.apply({
                items: [new SYNO.ActiveBackup.Agent.DeviceView(d), new SYNO.ActiveBackup.Agent.TaskView(Ext.apply({
                    stateId: "SYNO.ActiveBackup.PageServerBackup.TaskView"
                }, d))]
            }, b);
            return this.callParent([c])
        },
        getHelpParam: function() {
            return "activebackup_business_physicalserver.html"
        }
    }
});
Ext.define("SYNO.ActiveBackup.VM.HostSetter", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.blEditMode = a.record ? true : false;
        this.callParent([Ext.apply({
            title: _LABS("vmbk", "host_setting_title"),
            width: 480,
            height: 250,
            resizable: false,
            layout: "fit",
            items: this.form = new SYNO.ux.FormPanel({
                keys: [{
                    key: Ext.EventObject.ENTER,
                    fn: this.onApply,
                    scope: this
                }],
                items: [{
                    xtype: this.blEditMode ? "syno_displayfield" : "syno_textfield",
                    fieldLabel: _LABS("task_info", "server_address"),
                    name: "host_name",
                    allowBlank: false,
                    width: 250
                }, {
                    xtype: "syno_numberfield",
                    fieldLabel: _LABS("task_info", "web_service_port"),
                    name: "port_webapi",
                    width: 250,
                    value: 443,
                    allowBlank: false
                }, {
                    xtype: "syno_numberfield",
                    fieldLabel: _LABS("task_info", "transmission_port"),
                    name: "nfc_host_port",
                    width: 250,
                    value: 902,
                    allowBlank: false
                }, {
                    xtype: "syno_textfield",
                    fieldLabel: _LABS("task_info", "account"),
                    name: "auth_user",
                    allowBlank: false,
                    width: 250
                }, {
                    xtype: "syno_textfield",
                    fieldLabel: _LABS("task_info", "password"),
                    name: "auth_password",
                    textType: "password",
                    allowBlank: false,
                    width: 250
                }, {
                    xtype: "syno_numberfield",
                    name: "inventory_id",
                    hidden: true,
                    allowBlank: true
                }, {
                    xtype: "syno_numberfield",
                    name: "host_type",
                    hidden: true,
                    value: SYNO.ActiveBackup.HostType.ESXi
                }]
            }),
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _LABS("common", "apply"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                btnStyle: "grey",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a)])
    },
    onShow: function() {
        if (this.blEditMode) {
            this.form.getForm().setValues(this.record.data)
        }
    },
    onApply: function() {
        if (!this.form.getForm().isValid()) {
            return
        }
        if (!this.blEditMode) {
            this.doCreateUpdate(false);
            return
        }
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Inventory",
            method: "check_identity",
            version: 1,
            params: this.form.getForm().getFieldValues(),
            encryption: ["auth_password"],
            scope: this,
            callback: function(b, a) {
                this.getMask().hide();
                if (!b) {
                    SYNO.ActiveBackup.Util.reportError.call(this, a);
                    return
                }
                if (a.init) {
                    this.doCreateUpdate(true);
                    return
                }
                if (a.same) {
                    this.doCreateUpdate(false);
                    return
                }
                this.getMsgBox().show({
                    msg: _LABS("error", "hypervisor_mismatch"),
                    icon: Ext.MessageBox.QUESTION,
                    scope: this,
                    buttons: {
                        yes: true,
                        no: true
                    },
                    fn: function(c) {
                        if (c === "yes") {
                            this.doCreateUpdate(true)
                        }
                    }
                })
            }
        })
    },
    doCreateUpdate: function(a) {
        var b = this.form.getForm().getFieldValues();
        b.merge_device = a;
        this.getMask().show();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Inventory",
            method: this.blEditMode ? "update" : "create",
            version: 1,
            params: b,
            encryption: ["auth_password"],
            scope: this,
            callback: function(d, c) {
                this.getMask().hide();
                if (!d) {
                    SYNO.ActiveBackup.Util.reportError.call(this, c);
                    return
                }
                this.close()
            }
        })
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.VM.HostManageWizard", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.initActions();
        this.callParent([Ext.apply({
            title: _LABS("vmbk", "host_manage_wizard"),
            width: 650,
            height: 500,
            closable: true,
            resizable: false,
            useStatusBar: false,
            layout: "absolute",
            cls: "synoabk-appwin vmbk-host-manage-wizard",
            items: [this.initGrid(), this.initEmpty()]
        }, a)])
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            create: {
                text: _LABS("vmbk", "btn_host_add"),
                scope: this,
                handler: this.onHostCreate,
                select_type_enable: [true, true, true]
            },
            update: {
                text: _LABS("component", "btn_edit"),
                scope: this,
                handler: this.onHostUpdate,
                select_type_enable: [false, true, false]
            },
            remove: {
                text: _LABS("component", "btn_delete"),
                scope: this,
                handler: this.onHostRemove,
                select_type_enable: [false, true, false]
            }
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.startPolling();
        this.onSelectionChange();
        this.mon(this.grid, "rowdblclick", this.onRowDblClick, this);
        this.mon(this.grid.getSelectionModel(), "selectionchange", this.onSelectionChange, this)
    },
    initGrid: function() {
        this.grid = new SYNO.ux.GridPanel({
            x: 20,
            anchor: "-20 100%",
            stateId: "SYNO.ActiveBackup.VM.HostManageWizard.GridPanel",
            plugins: [new SYNO.SDS.ActiveBackup.GridStatePlugin()],
            owner: this,
            tbar: new SYNO.ux.Toolbar([this.actions.get("create"), this.actions.get("update"), this.actions.get("remove")]),
            viewConfig: {
                markDirty: false
            },
            colModel: new Ext.grid.ColumnModel([{
                header: _LABS("task_info", "server_address"),
                tooltip: _LABS("task_info", "server_address"),
                dataIndex: "host_name",
                renderer: function(a, b) {
                    b.attr = 'ext:qtip="' + a + '"';
                    return a
                }
            }, {
                header: _LABS("task_info", "account"),
                tooltip: _LABS("task_info", "account"),
                dataIndex: "auth_user",
                renderer: function(a, b) {
                    b.attr = 'ext:qtip="' + a + '"';
                    return a
                }
            }, {
                header: _LABS("task_info", "host_version"),
                tooltip: _LABS("task_info", "host_version"),
                dataIndex: "api_version",
                renderer: function(a, b) {
                    var c;
                    if (!a) {
                        c = _T("common", "loading")
                    } else {
                        if (a.success) {
                            if (a.response.api_type === "VirtualCenter") {
                                c = "vCenter " + a.response.api_version
                            } else {
                                if (a.response.api_type === "HostAgent") {
                                    c = "ESXi " + a.response.api_version
                                } else {
                                    if (a.response.api_type === "HyperV") {
                                        c = "Windows " + a.response.api_version
                                    } else {
                                        c = "Unknown"
                                    }
                                }
                            }
                        } else {
                            c = _LABS("vmbk", "vpshere_version_not_available")
                        }
                    }
                    b.attr = 'ext:qtip="' + c + '"';
                    return c
                }
            }, {
                header: _LABS("common", "status"),
                tooltip: _LABS("common", "status"),
                renderer: function(g, i, e) {
                    var f = new Ext.XTemplate('<span style="color:{color}" ext:qtip="{text}">{text}</span><tpl if="qtip"><i><i class="status-error" ext:qtip="{qtip}"></i></i></tpl>');
                    var h = "";
                    var b = "";
                    var c = "";
                    var d = e.get("status");
                    var a = e.get("server_info");
                    if (d) {
                        if (d.action === "deleting") {
                            h = _LABS("common", "server_deleting") + " " + d.percent.toFixed(0) + "%";
                            c = "blue"
                        } else {
                            h = _LABS("error", "server_deletion_failed");
                            c = "red"
                        }
                    } else {
                        if (!a) {
                            h = _T("common", "loading");
                            c = "blue"
                        } else {
                            if (a.success) {
                                if (!a.response.shell_available) {
                                    b = _LABS("error", "free_license_esxi_need_ssh_connect")
                                }
                                h = _LABS("vmbk", "server_status_online");
                                c = "green"
                            } else {
                                b = SYNO.ActiveBackup.Util.parseError(a.response);
                                h = _LABS("vmbk", "server_status_offline");
                                c = "red"
                            }
                        }
                    }
                    return f.apply({
                        color: c,
                        text: h,
                        qtip: b
                    })
                }
            }]),
            store: new Ext.data.JsonStore({
                idProperty: "inventory_id",
                fields: ["inventory_id", "host_type", "host_name", "auth_user", "port_webapi", "nfc_host_port", "status", "api_version", "server_info"]
            })
        });
        return this.grid
    },
    initEmpty: function() {
        this.empty = new SYNO.ux.Panel({
            y: 150,
            border: false,
            cls: "empty_device",
            layout: {
                type: "vbox",
                align: "center"
            },
            items: [{
                border: false,
                html: "<div class=type_vm></div>"
            }, {
                xtype: "spacer",
                height: 20
            }, {
                cls: "text",
                border: false,
                html: _LABS("empty_device", "no_host") + "<br>" + String.format(_LABS("empty_device", "vm_message"), _LABS("vmbk", "btn_host_add"))
            }]
        });
        return this.empty
    },
    createPollingTask: function(a) {
        return this.addWebAPITask({
            api: "SYNO.ActiveBackup.Inventory",
            method: "get_server_info",
            version: 1,
            params: {
                inventory_id: a,
                reconnect: true
            },
            scope: this,
            interval: 10000,
            callback: function(d, c) {
                var b = this.grid.getStore().getById(a);
                b.set("server_info", {
                    success: d,
                    response: c
                });
                b.set("api_version", {
                    success: d,
                    response: c
                });
                this.onSelectionChange()
            }
        })
    },
    startPolling: function() {
        this.getMask().show();
        this.getHostInfoTasks = {};
        this.listHostTask = this.addWebAPITask({
            api: "SYNO.ActiveBackup.Inventory",
            method: "list",
            version: 1,
            scope: this,
            interval: 3000,
            callback: function(b, a) {
                this.getMask().hide();
                if (!b) {
                    SYNO.ActiveBackup.Util.reportError.call(this, a);
                    return
                }
                if (a.length === 0) {
                    this.empty.setVisible(true)
                } else {
                    this.empty.setVisible(false)
                }
                Ext.each(a, function(e) {
                    var d = e.inventory_id;
                    var c = this.grid.getStore().getById(d);
                    if (c) {
                        c.set("status", e.status);
                        c.set("host_name", e.host_name)
                    } else {
                        this.grid.getStore().loadData([e], true)
                    }
                    if (!this.getHostInfoTasks[d]) {
                        this.getHostInfoTasks[d] = this.createPollingTask(d);
                        this.getHostInfoTasks[d].start(true)
                    }
                }, this);
                this.grid.getStore().each(function(c) {
                    var d = c.get("inventory_id");
                    var e = a.find(function(f) {
                        return d === f.inventory_id
                    });
                    if (!e) {
                        if (this.getHostInfoTasks[d]) {
                            this.getHostInfoTasks[d].remove();
                            delete this.getHostInfoTasks[d]
                        }
                        this.grid.getStore().remove(c)
                    }
                }, this);
                this.onSelectionChange()
            }
        });
        this.listHostTask.start(true)
    },
    stopPolling: function() {
        Ext.each(Object.values(this.getHostInfoTasks), function(a) {
            a.remove()
        });
        this.listHostTask.remove()
    },
    onRowDblClick: function() {
        this.onHostUpdate()
    },
    onSelectionChange: function() {
        var b = this.grid.getSelectionModel().getSelections();
        this.actions.onSelectionChange(b.length);
        if (b.length === 1) {
            var a = b[0].get("status");
            if (a) {
                this.actions.get("update").disable();
                if (a.action === "deleting") {
                    this.actions.get("remove").disable()
                }
            }
        }
    },
    onHostCreate: function() {
        this.openModalWindow(new SYNO.ActiveBackup.VM.HostSetter({
            owner: this
        }))
    },
    onHostUpdate: function() {
        this.openModalWindow(new SYNO.ActiveBackup.VM.HostSetter({
            owner: this,
            record: this.grid.getSelectionModel().getSelected()
        }))
    },
    onHostRemove: function() {
        this.getMsgBox().show({
            msg: _LABS("warning", "confirm_delete_host"),
            icon: Ext.MessageBox.QUESTION,
            scope: this,
            buttons: {
                yes: {
                    text: _T("common", "delete"),
                    btnStyle: "red"
                },
                no: true
            },
            fn: function(a) {
                if (a !== "yes") {
                    return
                }
                this.doHostRemove()
            }
        })
    },
    doHostRemove: function() {
        this.getMsgBox().show({
            msg: _LABS("warning", "confirm_delete_host_data"),
            icon: Ext.MessageBox.QUESTION,
            scope: this,
            buttons: {
                yes: true,
                no: true
            },
            fn: function(a) {
                this.stopPolling();
                this.getMask().show();
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.Inventory",
                    method: "remove",
                    version: 1,
                    params: {
                        inventory_id: this.grid.getSelectionModel().getSelected().id,
                        is_remove_data: (a === "yes") ? true : false
                    },
                    scope: this,
                    callback: function(c, b) {
                        this.getMask().hide();
                        this.startPolling();
                        if (!c) {
                            SYNO.ActiveBackup.Util.reportError.call(this, b);
                            return
                        }
                    }
                })
            }
        })
    },
    openModalWindow: function(a) {
        this.stopPolling();
        a.on("close", this.startPolling, this);
        a.open()
    },
    getMask: function() {
        return this._mask ? this._mask : (this._mask = new Ext.LoadMask(this.grid.getEl()))
    }
});
Ext.define("SYNO.ActiveBackup.VM.TaskEditWizard", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.taskIds = a.tasks.map(function(e) {
            return e.id
        });
        this.isBatchEdit = (this.taskIds.length > 1);
        this.isBackingup = false;
        this.owner = a.owner;
        var c = a.tasks[0].get("progress");
        if (!this.isBatchEdit && c) {
            this.isBackingup = c.action === SYNO.SDS.ActiveBackup.JobAction.BACKUP || c.action === SYNO.SDS.ActiveBackup.JobAction.VERIFY
        }
        var d = {
            mode: "edit",
            owner: this,
            appWin: a.appWin,
            batch_edit: this.isBatchEdit
        };
        this.panels = [new SYNO.ActiveBackup.VM.InventorySetter(Ext.apply({
            itemId: "inventory",
            notModify: this.isBackingup
        }, d)), new SYNO.ActiveBackup.VM.GeneralSetter(Ext.apply({
            itemId: "general"
        }, d)), new SYNO.ActiveBackup.ScheduleSetterPaenl(Ext.apply({
            itemId: "schedule"
        }, d)), new SYNO.ActiveBackup.RetentionEditPanel(Ext.apply({
            itemId: "retention"
        }, d)), new SYNO.ActiveBackup.PrivilegePanel(Ext.apply({
            itemId: "privilege"
        }, d))];
        if (this.isBatchEdit) {
            this.panels.splice(0, 1)
        }
        this.tabPanel = new SYNO.ux.TabPanel({
            activeTab: 0,
            deferredRender: false,
            items: this.panels
        });
        var b = Ext.apply({
            title: _LABS("vmbk", "task_edit_wizard"),
            width: 700,
            height: 580,
            layout: "fit",
            resizable: false,
            items: this.tabPanel,
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _LABS("btn", "ok"),
                scope: this,
                handler: this.onApply
            }, {
                xtype: "syno_button",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.close
            }]
        }, a);
        this.callParent([b])
    },
    validate: function() {
        return this.panels.reduce(function(b, a) {
            return b && a.validate()
        }, true)
    },
    onOpen: function() {
        this.callParent(arguments);
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "list",
            version: 1,
            params: {
                filter: {
                    task_id: this.taskIds
                },
                load_devices: true,
                load_user_group: true
            },
            callback: function(c, a) {
                this.clearStatusBusy();
                if (!c) {
                    SYNO.ActiveBackup.Util.reportError.call(this, a);
                    return
                }
                var b = this.getCommonTask(a.tasks);
                Ext.each(this.panels, function(d) {
                    d.fireEvent("setting", b)
                })
            },
            scope: this
        })
    },
    getParams: function() {
        return this.panels.reduce(function(b, a) {
            return Ext.apply(a.getParams(), b)
        }, {
            task_ids: this.taskIds
        })
    },
    onApply: function() {
        if (!this.validate()) {
            return
        }
        var a = this.getParams();
        if (this.isBatchEdit) {
            this.setTask(a)
        } else {
            this.tabPanel.getComponent("inventory").beforeNext(this, function() {
                this.tabPanel.getComponent("general").beforeNext(this, function() {
                    this.setTask(a)
                })
            })
        }
    },
    setTask: function(a) {
        if (this.isBackingup) {
            this.getMsgBox().alert("", _LABS("warning", "config_effective_next_time"), function() {
                this.doSetTask(a)
            }, this)
        } else {
            this.doSetTask(a)
        }
    },
    doSetTask: function(a) {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "set",
            version: 1,
            params: a,
            encryption: ["credentials"],
            scope: this,
            callback: function(c, b) {
                this.clearStatusBusy();
                if (!c) {
                    SYNO.ActiveBackup.Util.reportError.call(this, b);
                    return
                }
                this.close()
            }
        })
    },
    getCommonTask: function(b) {
        var a = b[0];
        Ext.each(b, function(c) {
            a = SYNO.SDS.ActiveBackup.Utils.deepMerge(a, c)
        });
        return a
    }
});
Ext.define("SYNO.ActiveBackup.VM.DeviceListView", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var b = {
            layout: "border",
            items: [this.statusPanel = new SYNO.ux.Panel({
                region: "north",
                height: 44
            }), this.viewPanel = new SYNO.ux.Panel({
                region: "center",
                autoFlexcroll: true
            })]
        };
        this.viewGroups = {};
        this.expandDevicedId = null;
        this.isStoreLoaded = false;
        this.isScrollReady = false;
        this.callParent([Ext.apply(b, a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "mark_expand_device", this.onMarkExpandDevice, this);
        this.mon(this, "load", this.onLoad, this);
        this.mon(this.viewPanel, "flexcroll", this.onFleXcroll, this)
    },
    onMarkExpandDevice: function(a) {
        this.expandDeviceId = a
    },
    onLoad: function() {
        this.isStoreLoaded = true;
        this.isScrollReady = false
    },
    onFleXcroll: function(b, a) {
        if (!this.isScrollReady) {
            if (a.hasVerticalScroll) {
                this.isScrollReady = true
            }
        }
        if (this.isStoreLoaded && this.isScrollReady && this.expandDeviceId) {
            var c = this.expandDeviceId;
            this.expandDeviceId = null;
            this.expandDevice(c)
        }
    },
    setStatus: function(b, a) {
        this.statusPanel.removeAll();
        this.statusPanel.add({
            border: false,
            cls: "inventory-status " + b,
            html: '<div class="' + b + '-icon"></div><div class="text" ext:qtip="' + a + '">' + a + "</div>"
        });
        this.doLayout()
    },
    onUpdateToggleItems: function() {
        this.page.onUpdateToggleItems(this.getToggledItemIds())
    },
    onSelectionChange: function(b, a) {
        if (Ext.EventObject.type === "click" && !Ext.EventObject.ctrlKey && !Ext.EventObject.shiftKey) {
            this.clearSelections(true);
            b.select(a, false, true)
        }
        this.page.onSelectionChange()
    },
    getStore: function() {
        return {
            loadData: this.loadData.createDelegate(this),
            getTotalCount: this.getTotalCount.createDelegate(this)
        }
    },
    getVmKeyByView: function(b) {
        var c = "";
        var e = false;
        if (Object.keys(b.rawdata.vm_info).length === 0 || !b.rawdata.vm_info.status_ok) {
            if (b.rawdata.inventory_name) {
                c = b.rawdata.inventory_name + " : " + _LABS("vmbk", "unknown_vm")
            } else {
                c = _LABS("vmbk", "unknown_vm")
            }
            e = true
        } else {
            if (this.page.viewType === "vim.VirtualMachine-Folder") {
                c = b.rawdata.inventory_name + b.rawdata.vm_info.folder_path
            } else {
                c = b.rawdata.vm_info.hypervisor_name
            }
        }
        var a = c.replace(/\//g, '<i class="path-arrow"></i>');
        var d = {
            style: (e ? "color:red" : ""),
            tip: c,
            key: a
        };
        return new Ext.XTemplate('<span style="{style}" ext:qtip="{tip}">{key}</span>').apply(d)
    },
    loadData: function(a) {
        var b = {};
        Ext.each(a, function(d) {
            var c = this.getVmKeyByView(d);
            if (!b[c]) {
                b[c] = []
            }
            b[c].push(d)
        }, this);
        Ext.each(Object.keys(b), function(d) {
            if (!this.viewGroups[d]) {
                var c = new SYNO.ActiveBackup.Device.ListView({
                    autoFlexcroll: false,
                    appWin: this.appWin,
                    owner: this.owner,
                    page: this.page
                });
                var e = new SYNO.ux.FieldSet({
                    title: d,
                    collapsible: true,
                    items: [c],
                    cls: "vm-field-set"
                });
                this.mon(c, "selectionchange", this.onSelectionChange, this);
                this.mon(c, "updateToggleItems", this.onUpdateToggleItems, this);
                this.viewGroups[d] = {
                    list_view: c,
                    field_set: e
                };
                this.viewPanel.add(e)
            }
            this.viewPanel.items.sort("ASC", function(g, f) {
                return g.title < f.title ? -1 : 1
            });
            this.viewGroups[d].list_view.getStore().loadData(b[d])
        }, this);
        Ext.each(Object.keys(this.viewGroups), function(c) {
            if (!b[c]) {
                this.viewPanel.remove(this.viewGroups[c].field_set, true);
                delete this.viewGroups[c]
            }
        }, this);
        this.doLayout();
        this.fireEvent("load")
    },
    getTotalCount: function() {
        var a = 0;
        Ext.each(Object.values(this.viewGroups), function(b) {
            a += b.list_view.getStore().getTotalCount()
        });
        return a
    },
    getToggledItemIds: function() {
        var a = [];
        Ext.each(Object.values(this.viewGroups), function(b) {
            a = a.concat(b.list_view.getToggledItemIds())
        });
        return a
    },
    getSelectedRecords: function() {
        var a = [];
        Ext.each(Object.values(this.viewGroups), function(b) {
            a = a.concat(b.list_view.getSelectedRecords())
        });
        return a
    },
    clearSelections: function(a) {
        Ext.each(Object.values(this.viewGroups), function(b) {
            b.list_view.clearSelections(a)
        })
    },
    expandDevice: function(b) {
        var a = false;
        Ext.each(Object.values(this.viewGroups), function(g) {
            var d = g.list_view;
            var f = g.field_set;
            var e = d.getStore();
            var c = e.getById(b);
            if (c) {
                f.expand();
                d.selectAndExpandById(b);
                a = true;
                return false
            }
        });
        if (!a) {
            this.appWin.getMsgBox().alert("", _LABS("warning", "device_removed"))
        }
    }
});
Ext.define("SYNO.ActiveBackup.VM.DeviceView", {
    extend: "SYNO.ActiveBackup.DeviceView",
    backup_type: SYNO.ActiveBackup.BackupType.VM,
    statics: {
        formatDiskType: function(b) {
            var a = "";
            if ("vim.vm.device.VirtualDisk.SparseVer1BackingInfo" === b.disk_type || "vim.vm.device.VirtualDisk.SparseVer2BackingInfo" === b.disk_type) {
                a += _LABS("vmbk", "2gbsparse") + " "
            } else {
                if ("vim.vm.device.VirtualDisk.RawDiskMappingVer1BackingInfo" === b.disk_type || "vim.vm.device.VirtualDisk.RawDiskVer2BackingInfo" === b.disk_type || "vim.vm.device.VirtualDisk.PartitionedRawDiskVer2BackingInfo" === b.disk_type) {
                    a += _LABS("vmbk", "raw_disk_mapping") + " "
                } else {
                    if (b.thin_provision) {
                        a += _LABS("vmbk", "thin_provision") + " "
                    } else {
                        if (b.eager_scrub) {
                            a += _LABS("vmbk", "thick_provision") + " ";
                            a += _LABS("vmbk", "eager_zeroed") + " "
                        } else {
                            a += _LABS("vmbk", "thick_provision") + " ";
                            a += _LABS("vmbk", "lazy_zeroed") + " "
                        }
                    }
                }
            }
            if ("independent_persistent" === b.disk_mode) {
                a += "(" + _LABS("vmbk", "independent_persistent") + ")"
            } else {
                if ("independent_nonpersistent" === b.disk_mode) {
                    a += "(" + _LABS("vmbk", "independent_non_persistent") + ")"
                } else {
                    a += "(" + _LABS("vmbk", "persistent") + ")"
                }
            }
            return a
        }
    },
    constructor: function(a) {
        var b = [{
            name: "key_word",
            display_string: _LABS("filter_panel", "filter_panel_key_word") + _T("common", "colon")
        }, {
            name: "host_name",
            display_string: _LABS("filter_panel", "filter_panel_virtual_machine") + _T("common", "colon")
        }, {
            name: "inventory_name",
            display_string: _LABS("filter_panel", "filter_panel_hypervisor") + _T("common", "colon")
        }, {
            name: "os_name",
            display_string: _LABS("filter_panel", "filter_panel_os_name") + _T("common", "colon")
        }];
        this.callParent([Ext.apply({
            title: _LABS("vmbk", "vm_view_title"),
            filter_inputfield: b,
            filter_protocol_type_combobox: false
        }, a)])
    },
    initActions: function() {
        this.callParent(arguments);
        this.actions.add("host_manage", {
            text: _LABS("vmbk", "btn_host_manage"),
            scope: this,
            handler: this.onHostManage,
            select_type_enable: [true, true, true]
        });
        this.actions.add("restore", {
            text: _LABS("component", "btn_restore"),
            scope: this,
            handler: this.onRestore,
            select_type_enable: [false, false, false]
        });
        this.actions.add("credential_set", {
            text: _LABS("advansetting", "advansetting_credential"),
            scope: this,
            handler: this.onCredentialSet,
            select_type_enable: [false, false, false],
            tooltip: _LABS("tool_tip", "vm_credential")
        })
    },
    onActivate: function() {
        this.callParent(arguments);
        this.isPollingTasksCreated = false
    },
    onDeactivate: function() {
        this.callParent(arguments);
        this.stopPolling()
    },
    createListView: function(a) {
        return new SYNO.ActiveBackup.VM.DeviceListView({
            itemId: "device_list",
            appWin: a.appWin,
            owner: a.owner,
            page: this
        })
    },
    configToolbar: function() {
        return new SYNO.ux.Toolbar({
            itemId: "tool_bar",
            items: [this.configButtons(), "->", this.configViewChooser(), this.findField]
        })
    },
    configButtons: function() {
        var a = this.callParent(arguments);
        a.splice(0, 0, this.actions.get("host_manage"));
        a.splice(3, 0, this.actions.get("restore"));
        a.splice(4, 0, this.actions.get("credential_set"));
        return a
    },
    configViewChooser: function() {
        var a = new SYNO.ux.SplitButton({
            cls: "vmbk-view-chooser",
            iconCls: "host-view",
            scope: this,
            handler: function() {
                this.onViewChange(this.viewType)
            },
            menu: {
                cls: "synoabk-appwin vmbk-view-chooser",
                items: [{
                    text: _LABS("vmbk", "host_view"),
                    iconCls: "host-view",
                    overCls: "host-view-hover",
                    scope: this,
                    handler: function() {
                        a.setIconClass("host-view");
                        this.onViewChange("vim.VirtualMachine-Host")
                    }
                }, {
                    text: _LABS("vmbk", "folder_view"),
                    iconCls: "folder-view",
                    overCls: "folder-view-hover",
                    scope: this,
                    handler: function() {
                        a.setIconClass("folder-view");
                        this.onViewChange("vim.VirtualMachine-Folder")
                    }
                }]
            }
        });
        return a
    },
    selectedRecord: function() {
        this.onSelectionChange()
    },
    prepareSummary: function(b, c) {
        c.device_id = b.device_id || b.inventory_id + "_" + b.vm_moid_path;
        c.login_user = b.login_user;
        c.status_key = _LABS("histogram", "space_usage");
        c.status = SYNO.SDS.ActiveBackup.Utils.renderSize(b.vm_info.storage_size);
        var a = SYNO.ActiveBackup.DeviceView.getIconClsByOsName(b.os_name);
        c.iconCls = a ? a : "device-icon-unknown";
        if (b.device_id) {
            c.iconCls += "-protected"
        }
        if (Object.keys(b.vm_info).length === 0) {
            c.host_name = b.host_name;
            c.host_status = "(" + _LABS("vmbk", "vm_not_exist") + ")"
        } else {
            if (!b.vm_info.status_ok) {
                c.host_name = b.host_name;
                c.host_status = "(" + b.vm_info.status + ")"
            } else {
                c.host_name = b.host_name
            }
        }
    },
    prepareProperties: function(b, a) {
        if (b.vm_info.hypervisor_name) {
            a.push({
                key: _LABS("vmbk", "hypervisor"),
                value: b.vm_info.hypervisor_name
            })
        }
        if (b.os_name) {
            a.push({
                key: _LABS("component", "device_os_name"),
                value: b.os_name
            })
        }
        if (b.vm_info.num_cpu) {
            a.push({
                key: _LABS("component", "device_cpu_core"),
                value: b.vm_info.num_cpu + " core"
            })
        }
        if (b.vm_info.ram_mb) {
            a.push({
                key: _LABS("component", "device_mem"),
                value: b.vm_info.ram_mb + " MB"
            })
        }
        if (b.vm_info.virtual_disk) {
            Ext.each(b.vm_info.virtual_disk, function(d, c) {
                var e = SYNO.SDS.ActiveBackup.Utils.renderSize(d.capacity);
                var f = SYNO.ActiveBackup.VM.DeviceView.formatDiskType(d);
                a.push({
                    key: _LABS("component", "hard_disk") + " " + (c + 1),
                    value: e + " " + f
                })
            })
        } else {
            if (b.vm_info.num_vdisk) {
                a.push({
                    key: _LABS("component", "hard_disk"),
                    value: _T("common", "loading")
                })
            }
        }
    },
    onHostManage: function() {
        var a = new SYNO.ActiveBackup.VM.HostManageWizard({
            appWin: this.appWin,
            owner: this.owner
        });
        this._openModalWindow(a)
    },
    onTaskCreate: function() {
        var a = this.getView().getSelectedRecords();
        var b = new SYNO.ActiveBackup.VM.TaskCreateWizard({
            appWin: this.appWin,
            owner: this.owner,
            devices: a
        });
        this._openModalWindow(b)
    },
    onRestore: function() {
        var a = this.getView().getSelectedRecords()[0];
        var b = new SYNO.ActiveBackup.Restore.RestoreWizard({
            appWin: this.appWin,
            owner: this.owner,
            device_id: a.id,
            backup_type: this.backup_type
        });
        this._openModalWindow(b)
    },
    onCredentialSet: function() {
        var a = this.getView().getSelectedRecords();
        var b = new SYNO.ActiveBackup.VM.CredentialSetter({
            appWin: this.appWin,
            owner: this.owner,
            devices: a,
            setByWebApi: true
        });
        this._openModalWindow(b)
    },
    onViewChange: function(a) {
        this.viewType = a;
        this.maskWindow("polling");
        Ext.each(this.pollingTasks, function(b) {
            b.restart(true)
        })
    },
    onSelectionChange: function() {
        this.callParent(arguments);
        var d = this.getTopToolbar().getComponent("create_task");
        if (this.getStore().getTotalCount() > 0) {
            d.enable();
            d.setTooltip(null)
        }
        var b = this.getView().getSelectedRecords();
        if (b.length > 0) {
            var a = b.reduce(function(f, e) {
                return f + Ext.isNumber(e.get("device_id"))
            }, 0);
            if (a === b.length) {
                this.actions.get("credential_set").enable();
                if (b.length === 1) {
                    this.actions.get("restore").enable()
                }
            }
            var c = false;
            Ext.each(b, function(e) {
                var f = e.get("rawdata").vm_info;
                if (Object.keys(f).length === 0 || !f.status_ok || f.is_template) {
                    c = true;
                    return false
                }
            });
            if (c) {
                d.disable();
                d.setTooltip(_LABS("tool_tip", "backup_vm_disable_unknown_tip"))
            }
        }
    },
    handleApiResp: function() {
        this.callParent(arguments);
        if (!this.isPollingTasksCreated) {
            this.isPollingTasksCreated = true;
            this.startPolling()
        }
    },
    createUpdateCacheTask: function(a) {
        return a.map(function(b) {
            return this.addWebAPITask({
                api: "SYNO.ActiveBackup.Inventory",
                method: "list_node",
                version: 1,
                interval: 20000,
                params: {
                    inventory_id: b.inventory_id,
                    parent_id: "",
                    view_type: "vim.VirtualMachine",
                    get_vm_disk: true,
                    get_vm_view: true,
                    save_cache: true
                }
            })
        }, this)
    },
    createGetServerInfoTask: function(a) {
        var b = a.map(function(c) {
            return {
                api: "SYNO.ActiveBackup.Inventory",
                method: "get_server_info",
                version: 1,
                params: {
                    inventory_id: c.inventory_id,
                    reconnect: true
                }
            }
        });
        return this.addWebAPITask({
            compound: {
                mode: "parallel",
                params: b
            },
            scope: this,
            interval: 60000,
            callback: function(d, c) {
                if (!d || c.has_fail) {
                    this.getView().setStatus("error", _LABS("vmbk", "server_status_error"))
                } else {
                    var e = c.result.reduce(function(f, g) {
                        return f && g.data.shell_available
                    }, true);
                    if (!e) {
                        this.getView().setStatus("error", _LABS("vmbk", "server_status_error"))
                    } else {
                        this.getView().setStatus("success", _LABS("vmbk", "server_status_success"))
                    }
                }
            }
        })
    },
    startPolling: function() {
        this.listServerTaskId = this.sendWebAPI({
            api: "SYNO.ActiveBackup.Inventory",
            method: "list",
            version: 1,
            scope: this,
            callback: function(b, a) {
                if (!b) {
                    SYNO.ActiveBackup.Util.reportError.call(this, a);
                    return
                }
                a = a.filter(function(c) {
                    return !c.status
                });
                if (a.length === 0) {
                    return
                }
                this.updateCacheTasks = this.createUpdateCacheTask(a);
                this.getServerInfoTask = this.createGetServerInfoTask(a);
                Ext.each(this.updateCacheTasks, function(c) {
                    c.start(true)
                });
                this.getServerInfoTask.start(true);
                this.getView().setStatus("loading", _LABS("vmbk", "server_status_loading"))
            }
        })
    },
    stopPolling: function() {
        if (Ext.Ajax.isLoading(this.listServerTaskId)) {
            Ext.Ajax.abort(this.listServerTaskId)
        }
        Ext.each(this.updateCacheTasks, function(a) {
            a.remove()
        });
        if (this.getServerInfoTask) {
            this.getServerInfoTask.remove()
        }
    }
});
Ext.define("SYNO.ActiveBackup.VM.TaskView", {
    extend: "SYNO.ActiveBackup.TaskView",
    backup_type: SYNO.ActiveBackup.BackupType.VM,
    configColumnModel: function() {
        var a = this.callParent(arguments);
        a.columns.splice(1, 0, {
            header: _LABS("vmbk", "device_count"),
            tooltip: _LABS("vmbk", "device_count"),
            width: 60,
            dataIndex: "device_count",
            renderer: function(c, d, b) {
                d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return c
            }
        });
        return a
    },
    initActions: function() {
        this.callParent(arguments);
        this.actions.add("restore", {
            text: _LABS("component", "btn_restore"),
            scope: this,
            handler: this.onRestore,
            select_type_enable: [false, true, false]
        })
    },
    configButtons: function() {
        var a = this.callParent(arguments);
        a.push(this.actions.get("restore"));
        return a
    },
    onTaskCreate: function() {
        var a = new SYNO.ActiveBackup.VM.TaskCreateWizard({
            appWin: this.appWin,
            owner: this.owner
        });
        this._openModalWindow(a)
    },
    onTaskEdit: function() {
        var a = this.getSelectionModel().getSelections();
        var b = new SYNO.ActiveBackup.VM.TaskEditWizard({
            appWin: this.appWin,
            owner: this.owner,
            tasks: a
        });
        this._openModalWindow(b)
    },
    onRestore: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.ActiveBackup.Restore.RestoreWizard({
            appWin: this.appWin,
            owner: this.owner,
            task_id: a.id,
            backup_type: this.backup_type
        });
        this._openModalWindow(b)
    },
    onSelectionChange: function(e) {
        this.callParent(arguments);
        var a = e.getSelections();
        if (a.length > 0) {
            var d = 0;
            var b = 0;
            var c = 0;
            Ext.each(a, function(f) {
                var g = f.get("progress");
                var h = f.get("waiting_jobs");
                if (g) {
                    if (g.action === SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET || g.action === SYNO.SDS.ActiveBackup.JobAction.DELETE_INVENTORY) {
                        d++
                    } else {
                        if (g.status === SYNO.SDS.ActiveBackup.JobStatus.STOPPING && (g.action === SYNO.SDS.ActiveBackup.JobAction.BACKUP || g.action === SYNO.SDS.ActiveBackup.JobAction.VERIFY)) {
                            c++
                        }
                    }
                } else {
                    if (h) {
                        if (h[0].action === SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET || h[0].action === SYNO.SDS.ActiveBackup.JobAction.DELETE_INVENTORY) {
                            b++
                        }
                    }
                }
            });
            if (d > 0 || b > 0) {
                this.actions.get("backup").disable();
                this.actions.get("remove").disable();
                this.actions.get("edit").disable();
                this.actions.get("version").disable();
                this.actions.get("detail").disable();
                this.actions.get("restore").disable();
                this.actions.get("cancel").disable()
            }
            if (c > 0) {
                this.actions.get("cancel").disable()
            }
        }
    }
});
Ext.define("SYNO.ActiveBackup.PageVmBackup", function() {
    return {
        extend: "SYNO.ux.TabPanel",
        constructor: function(a) {
            var c = Ext.copyTo({}, a, "appWin,owner");
            var b = Ext.apply({
                items: [new SYNO.ActiveBackup.VM.DeviceView(c), new SYNO.ActiveBackup.VM.TaskView(c)]
            }, a);
            this.callParent([b])
        },
        getHelpParam: function() {
            return "activebackup_business_virtualmachine.html"
        }
    }
});
Ext.define("SYNO.ActiveBackup.Restore.DetailModal", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([Ext.apply({
            layout: "fit",
            cls: "task_detail_information",
            title: String.format("{0}: {1} ({2})", _LABS("common", "detail"), a.record.get("task_name"), SYNO.SDS.ActiveBackup.Utils.getRestoreTypeString(a.record.get("restore_type"))),
            width: 650,
            height: 500,
            closable: true,
            resizable: false,
            useStatusBar: false,
            items: new SYNO.ux.TabPanel({
                itemId: "tab",
                activeTab: 0,
                items: [new SYNO.ActiveBackup.Restore.StatusPanel({
                    owner: this,
                    job_id: a.record.get("job_id"),
                    backup_type: a.record.get("backup_type"),
                    result_id: a.record.get("result_id"),
                    last_status: a.record.json,
                    title: _LABS("common", "status")
                }), new SYNO.ActiveBackup.View.LogPanel({
                    owner: this,
                    task_id: a.record.get("task_id"),
                    title: _LABS("detail_info_window", "log_information"),
                    mode: "task_detail",
                    showSettingBtn: false
                })]
            })
        }, a)])
    },
    onClose: function() {
        this.getComponent("tab").getActiveTab().fireEvent("deactivate")
    }
});
Ext.define("SYNO.ActiveBackup.Restore.StatusPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.mask_owner = [];
        this.last_status = a.last_status;
        return this.callParent([Ext.apply({
            cls: "form_panel",
            items: [{
                xtype: "syno_displayfield",
                fieldLabel: _LABS("common", "status"),
                itemId: "status"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("detail_info_window", "process_file"),
                itemId: "process_file"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("component", "task_source"),
                itemId: "source"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("detail_info_window", "restore_version"),
                itemId: "restore_version"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("component", "task_destination"),
                itemId: "destination"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("detail_info_window", "execute_time"),
                itemId: "execute_time"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("detail_info_window", "transfered_size"),
                itemId: "transfered_size"
            }, {
                xtype: "syno_displayfield",
                fieldLabel: _LABS("tasklist", "duration"),
                itemId: "duration"
            }],
            pollingTask: this.createPollingTask(a)
        }, a)])
    },
    maskWindow: function(a) {
        if (this.mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this.mask_owner.indexOf(a) === -1) {
            this.mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this.mask_owner.remove(a);
        if (this.mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    createPollingTask: function(a) {
        return this.addWebAPITask({
            api: "SYNO.ActiveBackup.Restore",
            method: "status",
            version: 1,
            params: {
                job_id: a.job_id,
                backup_type: a.backup_type,
                result_id: a.result_id
            },
            interval: 1000,
            scope: this,
            callback: function(d, b) {
                this.unmaskWindow("polling");
                if (!d) {
                    return
                }
                Ext.each(Object.keys(b.restore_info), function(e) {
                    this.last_status[e] = b.restore_info[e] || this.last_status[e]
                }, this);
                if (b.restore_info.action === SYNO.SDS.ActiveBackup.JobAction.RESTORE_PHYSICAL) {
                    this.getComponent("process_file").hide();
                    this.getComponent("source").hide();
                    this.getComponent("destination").hide()
                }
                var c = this.prepareData(this.last_status);
                if (this.last_status.filter_by_result_id && this.last_status.status != SYNO.SDS.ActiveBackup.ResultStatus.INCOMPLETE) {
                    c.status = SYNO.SDS.ActiveBackup.Utils.renderResultStatus(this.last_status.status);
                    this.getComponent("process_file").hide()
                }
                Ext.each(Object.keys(c), function(f) {
                    var e = c[f];
                    if (f !== "status") {
                        e = String.format('<span ext:qtip="{0}">{1}</span>', e, e)
                    }
                    this.getComponent(f).update(e)
                }, this)
            }
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this)
    },
    onActivate: function() {
        this.maskWindow("polling");
        this.pollingTask.start(true)
    },
    onDeactivate: function() {
        this.pollingTask.stop()
    },
    prepareData: function(a) {
        switch (a.backup_type) {
            case SYNO.ActiveBackup.BackupType.PC:
            case SYNO.ActiveBackup.BackupType.SERVER:
                return {
                    status: this.renderJobStatus(a), process_file: a.current_file ? a.current_file : "--", source: a.source, restore_version: this.renderVersionPC(a), destination: this.renderDestinationPC(a), execute_time: SYNO.SDS.ActiveBackup.Utils.renderTime(a.time_start), transfered_size: SYNO.SDS.ActiveBackup.Utils.renderSize(a.current_size), duration: SYNO.SDS.ActiveBackup.Utils.renderDuration(a)
                };
            case SYNO.ActiveBackup.BackupType.AGENTLESS:
                return {
                    status: this.renderJobStatus(a), process_file: a.current_file ? a.current_file : "--", source: a.source, restore_version: this.renderVersionAGENTLESS(a), destination: this.renderDestinationAGENTLESS(a), execute_time: SYNO.SDS.ActiveBackup.Utils.renderTime(a.time_start), transfered_size: SYNO.SDS.ActiveBackup.Utils.renderSize(a.transfered_bytes), duration: SYNO.SDS.ActiveBackup.Utils.renderDuration(a)
                };
            case SYNO.ActiveBackup.BackupType.VM:
                return {
                    status: this.renderJobStatus(a), process_file: a.current_file ? a.current_file : "--", source: a.target_path, restore_version: this.renderVersionVM(a), destination: this.renderDestinationVM(a), execute_time: SYNO.SDS.ActiveBackup.Utils.renderTime(a.time_start), transfered_size: SYNO.SDS.ActiveBackup.Utils.renderSize(a.transfered_bytes), duration: SYNO.SDS.ActiveBackup.Utils.renderDuration(a)
                }
        }
    },
    renderJobStatus: function(c) {
        var a = (c.percentage * 100).toFixed(2);
        var e = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(c.backup_type, c, (a < 100));
        var b = '<span ext:qtip="{0}">{1}</span>';
        var d = String.format("{0}: {1}%", _LABS("detail_info_window", "restore_progressing"), a);
        return String.format(b, d, e)
    },
    renderVersionPC: function(a) {
        var b = SYNO.SDS.ActiveBackup.Utils.renderTime(a.version_time);
        return String.format("{0} ({1})", a.device_name, b)
    },
    renderVersionAGENTLESS: function(a) {
        var b = SYNO.SDS.ActiveBackup.Utils.renderTime(a.version_time);
        return String.format("{0} ({1})", a.device_name, b)
    },
    renderVersionVM: function(b) {
        if (b.restore_type === SYNO.SDS.ActiveBackup.RestoreType.FILE) {
            var c = SYNO.SDS.ActiveBackup.Utils.renderTime(b.version_time);
            return String.format("{0} ({1})", b.device_name, c)
        } else {
            var a = [];
            Ext.each(b.device_list, function(d) {
                var e = SYNO.SDS.ActiveBackup.Utils.renderTime(d.version.time_start);
                a.push(String.format("{0} ({1})", d.restore_name, e))
            });
            return a.join(", ")
        }
    },
    renderDestinationPC: function(a) {
        return a.destination
    },
    renderDestinationAGENTLESS: function(a) {
        return a.destination
    },
    renderDestinationVM: function(b) {
        if (b.restore_type === SYNO.SDS.ActiveBackup.RestoreType.FILE) {
            return String.format("{0} ({1} - {2})", b.dst_path, b.dst_host_name, b.dst_vm_name)
        } else {
            var a = [];
            Ext.each(b.device_list, function(d) {
                var c = d.hypervisor.name;
                a.push(String.format("{0} -> {1}", d.restore_name, c))
            });
            return a.join(", ")
        }
    }
});
Ext.define("SYNO.ActiveBackup.Restore.MigrateModal", {
    extend: "SYNO.ActiveBackup.Restore.RestoreWizard",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            job_id: a.record.get("job_id"),
            task_id: a.record.get("task_id"),
            result_id: a.record.get("result_id")
        }, a)])
    },
    createSteps: function() {
        return [new SYNO.ActiveBackup.Restore.MigrateStep({
            headline: _LABS("restore_wizard", "datastore_step_head"),
            description: _LABS("restore_wizard", "datastore_step_desc"),
            owner: this,
            itemId: "datastore",
            nextId: null
        })]
    }
});
Ext.define("SYNO.ActiveBackup.Restore.MigrateStep", {
    extend: "SYNO.ActiveBackup.Restore.DatastoreStep",
    initData: function(a) {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Restore",
            method: "status",
            version: 1,
            params: {
                job_id: this.owner.job_id,
                result_id: this.owner.result_id,
                backup_type: SYNO.ActiveBackup.BackupType.VM
            },
            callback: function(c, b) {
                this.owner.clearStatusBusy();
                if (c) {
                    this.owner.store.loadData(b.restore_info.device_list);
                    this.owner.listSpecAPI(["inventory_id", "hypervisor"], ["datastore", "datastore_num"], this, a)
                } else {
                    this.owner.reportError(b)
                }
            },
            scope: this
        })
    },
    getNext: function() {
        this.owner.checkSpecAPI(["hypervisor", "datastore"], ["datastore"], this, this.onValid, this.onError);
        return false
    },
    onValid: function() {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.RestoreVM",
            method: "migrate",
            version: 1,
            params: {
                job_id: this.owner.job_id,
                task_id: this.owner.task_id,
                device_list: this.owner.getDevices(["device_id", "inventory_id", "host_name", "restore_name", "version", "hypervisor", "datastore"])
            },
            callback: function(b, a) {
                this.owner.clearStatusBusy();
                if (b) {
                    this.owner.close()
                } else {
                    this.owner.reportError(a)
                }
            },
            scope: this
        })
    },
    onError: Ext.emptyFn
});
Ext.define("SYNO.ActiveBackup.PageRestore", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    constructor: function(a) {
        this.initActions();
        this.mask_owner = [];
        return this.callParent([Ext.apply({
            layout: "fit",
            cls: "synoabk-restore",
            tbar: this.createTopToolbar(),
            store: this.createStore(),
            colModel: this.createColModel(),
            pollingTask: this.createPollingTask(),
            viewConfig: {
                trackResetOnLoad: false
            }
        }, a)])
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            detail: {
                text: _LABS("component", "btn_detail"),
                scope: this,
                handler: this.onDetail,
                select_type_enable: [false, false, false]
            },
            cancel: {
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.onCancel,
                select_type_enable: [false, true, true]
            },
            migrate: {
                text: _LABS("component", "btn_migrate"),
                scope: this,
                handler: this.onMigrate,
                select_type_enable: [false, false, false]
            }
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.onSelectionChange();
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this);
        this.mon(this, "rowdblclick", this.onRowDblClick, this);
        this.mon(this.getSelectionModel(), "selectionchange", this.onSelectionChange, this)
    },
    maskWindow: function(a) {
        if (this.mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this.mask_owner.indexOf(a) === -1) {
            this.mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this.mask_owner.remove(a);
        if (this.mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    createTopToolbar: function() {
        return new SYNO.ux.Toolbar([this.actions.get("detail"), this.actions.get("cancel"), this.actions.get("migrate")])
    },
    createStore: function() {
        return new Ext.data.JsonStore({
            idProperty: "job_id",
            fields: ["job_id", "task_id", "task_name", "restore_type", "user_name", "device_count", "backup_type", "result_id", "time_start", "time_end", "status", "action", "percentage", "migratable", "restore_job_id"]
        })
    },
    createColModel: function() {
        return new Ext.grid.ColumnModel([{
            header: _LABS("task_info", "task_name"),
            dataIndex: "task_name",
            renderer: function(a, b) {
                a = a ? Ext.util.Format.htmlEncode(a) : _LABS("error", "initializing");
                b.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(a) + '"';
                return a
            }
        }, {
            header: _LABS("restore_type", "restore_type"),
            dataIndex: "restore_type",
            renderer: function(a, b) {
                a = SYNO.SDS.ActiveBackup.Utils.getRestoreTypeString(a);
                b.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(a) + '"';
                return a
            }
        }, {
            header: _LABS("common", "user"),
            dataIndex: "user_name",
            renderer: function(a, b) {
                b.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(a) + '"';
                return a
            }
        }, {
            header: _LABS("storage", "device_count"),
            dataIndex: "device_count",
            renderer: function(b, c, a) {
                if (a.json.device_name) {
                    c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(a.json.device_name) + '"'
                } else {
                    c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"'
                }
                return b
            }
        }, {
            header: _LABS("common", "status"),
            renderer: function(b, c, a) {
                b = SYNO.SDS.ActiveBackup.Utils.renderJobStatus(a.json.backup_type, a.json, false);
                c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
                return b
            }
        }, {
            header: _LABS("tasklist", "elapsed_time"),
            renderer: function(b, c, a) {
                b = SYNO.SDS.ActiveBackup.Utils.renderDuration(a.json);
                c.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(b) + '"';
                return b
            }
        }])
    },
    createPollingTask: function() {
        return this.addWebAPITask({
            api: "SYNO.ActiveBackup.Restore",
            method: "list",
            params: {
                file_restore_only: false
            },
            version: 1,
            interval: 3000,
            scope: this,
            callback: function(b, a) {
                this.unmaskWindow("polling");
                if (!b) {
                    return
                }
                this.getStore().loadData(a.restore_infos);
                this.getStore().filterBy(function(c) {
                    return this.findExact("restore_job_id", c.get("job_id")) === -1
                }, this.getStore())
            }
        })
    },
    onDetail: function() {
        if (this.actions.get("detail").isDisabled()) {
            return
        }
        this.openModalWindow(new SYNO.ActiveBackup.Restore.DetailModal({
            owner: this.owner,
            appWin: this.appWin,
            record: this.getSelectionModel().getSelected()
        }))
    },
    onCancel: function() {
        var a = this.getSelectionModel().getSelections();
        var b = false;
        Ext.each(a, function(c) {
            if (c.get("restore_type") === SYNO.SDS.ActiveBackup.RestoreType.INSTANT && c.get("action") === SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE) {
                b = true;
                return false
            }
        });
        if (b) {
            this.appWin.getMsgBox().show({
                msg: _LABS("warning", "cancel_instant_restore"),
                icon: Ext.MessageBox.QUESTION,
                scope: this,
                buttons: {
                    yes: {
                        btnStyle: "red"
                    },
                    no: true
                },
                fn: function(c) {
                    if (c === "yes") {
                        this.doCancel()
                    }
                }
            })
        } else {
            this.doCancel()
        }
    },
    doCancel: function() {
        var a = this.getSelectionModel().getSelections().map(function(b) {
            return b.get("job_id")
        });
        this.onDeactivate();
        this.maskWindow("send_cancel");
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Restore",
            method: "stop",
            version: 1,
            params: {
                job_ids: a
            },
            callback: function(c, b) {
                this.unmaskWindow("send_cancel");
                this.onActivate();
                if (!c) {
                    this.reportError(b);
                    return
                }
            },
            scope: this
        })
    },
    onMigrate: function() {
        this.openModalWindow(new SYNO.ActiveBackup.Restore.MigrateModal({
            owner: this.owner,
            appWin: this.appWin,
            record: this.getSelectionModel().getSelected()
        }))
    },
    onActivate: function() {
        this.maskWindow("polling");
        this.pollingTask.start(true)
    },
    onDeactivate: function() {
        this.unmaskWindow("polling");
        this.pollingTask.stop()
    },
    onRowDblClick: function() {
        this.onDetail()
    },
    onSelectionChange: function() {
        var a = this.getSelectionModel().getSelections();
        this.actions.onSelectionChange(a.length);
        var d = "";
        if (a.length === 1) {
            var b = a[0];
            if (b.get("restore_type") === SYNO.SDS.ActiveBackup.RestoreType.INSTANT && b.get("action") === SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE && b.get("percentage") === 1) {
                if (b.get("migratable") === false) {
                    d = _LABS("restore", "no_migrate_capability")
                } else {
                    this.actions.get("migrate").enable()
                }
            }
            if (b.get("result_id")) {
                this.actions.get("detail").enable()
            }
        }
        var c = a.reduce(function(e, f) {
            return e || f.get("status") === SYNO.SDS.ActiveBackup.JobStatus.STOPPING
        }, false);
        if (c) {
            this.actions.get("detail").disable();
            this.actions.get("cancel").disable();
            this.actions.get("migrate").disable()
        }
        this.actions.get("migrate").items[0].setTooltip(d)
    },
    openModalWindow: function(a) {
        this.onDeactivate();
        a.on("close", this.onActivate, this);
        a.open()
    },
    getHelpParam: function() {
        return "activebackup_business_restorestatus.html"
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.StorageTipPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.usage_container = a.storage_container === false ? new SYNO.SDS.ActiveBackup.Overview.DeviceContainer({
            owner: this,
            appWin: a.appWin,
            itemId: "device_container"
        }) : new SYNO.SDS.ActiveBackup.Overview.StorageContainer({
            owner: this,
            appWin: a.appWin,
            itemId: "storage_container"
        });
        var b = {
            cls: "card_panel_wrapper",
            border: false,
            layout: "fit",
            items: [{
                xtype: "container",
                border: false,
                cls: "detail_header",
                html: '<span class="detail_font">' + _LABS("common", "detail") + "</span>"
            }, this.usage_container]
        };
        return this.callParent([Ext.apply(b, a)])
    },
    loadData: function(a) {
        this.usage_container.loadData(a)
    }
});
Ext.define("SYNO.ActiveBackup.PageStorage", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.mask_owner = [];
        return this.callParent([Ext.apply(a, {
            tbar: new Ext.Toolbar({
                owner: this,
                items: [{
                    xtype: "syno_button",
                    text: _LABS("action", "relink"),
                    scope: this,
                    handler: function() {
                        this.onDeactivate();
                        var b = new SYNO.ActiveBackup.Storage.Relink.Wizard({
                            appWin: a.appWin,
                            owner: a.owner
                        });
                        this.mon(b, "close", this.onActivate, this);
                        b.open()
                    }
                }]
            }),
            layout: "absolute",
            cls: "synoabk-storage",
            items: [this.listView = this.createListView(a), this.emptyView = this.createEmptyView()],
            pollingTask: this.createPollingTask()
        })])
    },
    createListView: function(a) {
        return new SYNO.ActiveBackup.StorageListView({
            anchor: "0 100%",
            store: this.store = this.createStore(),
            owner: this,
            appWin: a.appWin
        })
    },
    createEmptyView: function() {
        return new SYNO.ux.Panel({
            anchor: "0 100%",
            border: false,
            cls: "empty_device",
            layout: {
                type: "vbox",
                align: "center"
            },
            items: [{
                xtype: "spacer",
                flex: 1
            }, {
                border: false,
                html: "<div class=type_storage></div>"
            }, {
                xtype: "spacer",
                height: 20
            }, {
                cls: "text",
                border: false,
                html: _LABS("empty_device", "no_storage")
            }, {
                xtype: "spacer",
                flex: 1
            }]
        })
    },
    createStore: function() {
        var a = function(b) {
            return Ext.util.Format.uppercase(b)
        };
        return new Ext.data.JsonStore({
            idProperty: "storage_id",
            fields: ["storage_id", {
                name: "error",
                defaultValue: null
            }, {
                name: "fs_name",
                defaultValue: null
            }, {
                name: "vol_name",
                defaultValue: null
            }, {
                name: "share_name",
                defaultValue: null,
                sortType: a
            }, {
                name: "total_size",
                defaultValue: null
            }, {
                name: "dedup_size",
                defaultValue: null
            }, {
                name: "compactable_size",
                defaultValue: null
            }, {
                name: "backup_tasks",
                defaultValue: null
            }, {
                name: "delete_tasks",
                defaultValue: null
            }, {
                name: "delete_versions",
                defaultValue: null
            }, {
                name: "device_count",
                defaultValue: null
            }, {
                name: "device_info",
                defaultValue: null
            }, {
                name: "relink_state",
                defaultValue: null
            }],
            sortInfo: {
                field: "share_name",
                direction: "ASC"
            }
        })
    },
    createPollingTask: function() {
        return this.addWebAPITask({
            api: "SYNO.ActiveBackup.Share",
            method: "list_storage",
            version: 1,
            interval: 3000,
            scope: this,
            callback: function(b, a) {
                this.unmaskWindow("polling");
                if (!b) {
                    return
                }
                if (a.storages.length === 0) {
                    this.emptyView.setVisible(true);
                    this.listView.setVisible(false)
                } else {
                    this.emptyView.setVisible(false);
                    this.listView.setVisible(true)
                }
                if (this.listView.needUpdate(a.storages)) {
                    this.store.loadData(a.storages)
                }
            }
        })
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "deactivate", this.onDeactivate, this)
    },
    onActivate: function() {
        this.maskWindow("polling");
        this.pollingTask.start(true)
    },
    onDeactivate: function() {
        this.unmaskWindow("polling");
        this.pollingTask.stop()
    },
    maskWindow: function(a) {
        if (this.mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this.mask_owner.indexOf(a) === -1) {
            this.mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this.mask_owner.remove(a);
        if (this.mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    getHelpParam: function() {
        return "activebackup_business_storage.html"
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.StorageListView", {
    extend: "SYNO.ux.ExpandableListView",
    oldRecords: [],
    trackResetOnLoad: false,
    toggleOnDblClick: false,
    createTpl: function(a) {
        return new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap {cls}" role="option" aria-expanded="false" id={[Ext.id()]} aria-label="{ariaInfo}">', '<div class="item-summary">', '<div class="item-icon {[ values.backup_tasks && values.backup_tasks.length > 0 ? "folder-busy" : "folder" ]}"></div>', '<div style="width:auto">', '<div class="item-title" style="overflow-x: hidden; white-space: nowrap; text-overflow: ellipsis;">', "<span>{share_name:htmlEncode}{[ this.getShareError(values.error) ]}</span>", '<span style="font-size:12px">{[values.backup_tasks && values.backup_tasks.length > 0 ? " - "+_LABS("task_status", "backingup") : ""]}</span>', '<span style="font-size:12px">{[values.delete_tasks && values.delete_tasks.length > 0 ? " - "+_LABS("task_status", "deleting_target") : ""]}</span>', '<span style="font-size:12px">{[values.delete_versions && values.delete_versions.length > 0 ? " - "+_LABS("task_status", "deleting_version") : ""]}</span>', '<span style="font-size:12px">{[ this.getRelinkState(values.relink_state) ]}</span>', "</div>", '<div class="item-status">', '{[ values.vol_name === null ? _LABS("common", "error") : values.vol_name ]} ', '({[ values.fs_name === null ? _LABS("common", "error") : values.fs_name ]})', "</div>", "</div>", "</div>", '<div class="item-detail">', '<dl class="item-property">', '<dt>{[ _LABS("storage", "running_tasks") ]}:</dt>', "<dd>{[ this.getRunningTarget(values) ]}", "</dd>", "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', '<dt>{[ _LABS("storage", "device_count") ]}:</dt>', '<dd class="device-tip">{[ values.device_count === null ? _LABS("common", "error") : values.device_count ]}</dd>', "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', '<dt>{[ _LABS("storage", "dedup_rate") ]}:</dt>', '<dd class="storage-tip">{[ values.device_info === null || values.dedup_size === null ? _LABS("common", "error") : SYNO.SDS.ActiveBackup.Utils.renderDedupRate(values.device_info.pc_size + values.device_info.server_size + values.device_info.vm_size, values.dedup_size) ]}</dd>', "</dl>", '<div class="x-clear"></div>', '<dl class="item-property">', '<dt>{[ _LABS("storage", "compactable_size") ]}:</dt>', '<dd>{[ values.compactable_size === null ? _LABS("common", "error") : SYNO.SDS.ActiveBackup.Utils.renderSize(values.compactable_size) ]}</dd>', "</dl>", '<div class="x-clear"></div>', "</div>", "</div>", "</tpl>", '<div class="x-clear"></div>', {
            getShareError: function(b) {
                if (b === null) {
                    return ""
                } else {
                    if (b.code === SYNO.SDS.ActiveBackup.ErrorTable.REASON_DATA_CORRUPT) {
                        return " (" + _LABS("log_msg", "short_reason_data_corrupt") + ")"
                    } else {
                        return " (" + SYNO.ActiveBackup.Util.parseError(b) + ")"
                    }
                }
            },
            getRunningTarget: function(b) {
                if (b.backup_tasks === null || b.delete_tasks === null || b.delete_versions === null) {
                    return _LABS("common", "error")
                } else {
                    if (b.backup_tasks.length > 0) {
                        return b.backup_tasks.join(", ")
                    } else {
                        if (b.delete_tasks.length > 0) {
                            return b.delete_tasks.join(", ")
                        } else {
                            if (b.delete_versions.length > 0) {
                                return b.delete_versions.join(", ")
                            }
                        }
                    }
                }
                return _LABS("storage", "running_tasks_empty")
            },
            getRelinkState: function(b) {
                if (b === null) {
                    return ""
                }
                if (b.state === SYNO.SDS.ActiveBackup.RelinkState.Ready) {
                    if (b.owner) {
                        return ""
                    }
                    return String.format(' - <span class="re-relink">{0}</span>', _LABS("action", "relink"))
                }
                if (b.owner) {
                    if (b.alive) {
                        return " - " + _LABS("task_status", "relinking")
                    }
                    return String.format(' - {0} <span class="re-relink">{1}</span>', _LABS("task_status", "relink_error"), _LABS("common", "retry"))
                }
                return " - " + _LABS("task_status", "relink_disabled")
            }
        })
    },
    refresh: function() {
        this.callParent(arguments);
        this.oldRecords = [];
        var a = function(e, d, c) {
            for (var b = 0; b < c; b++) {
                e.push(d)
            }
        };
        this.store.each(function(e) {
            this.oldRecords.push(e);
            var c = Ext.get(this.getNode(e));
            if (c) {
                if (c.child(".storage-tip")) {
                    if (Ext.isDefined(SYNO.ux.AddWhiteTipWithItem)) {
                        var k = {
                            width: 448,
                            height: 278,
                            appWin: this.appWin,
                            owner: this.owner,
                            border: false,
                            layout: "fit",
                            storage_container: true,
                            listeners: {
                                afterrender: {
                                    fn: function() {
                                        this.loadData([e.data])
                                    },
                                    single: true
                                }
                            }
                        };
                        var i = new SYNO.ActiveBackup.StorageTipPanel(k);
                        var d = new Ext.Component({
                            applyTo: c.child(".storage-tip").dom.id
                        });
                        SYNO.ux.AddWhiteTipWithItem(d, [i])
                    } else {
                        var j = _LABS("overview", "device_vms") + "&nbsp" + SYNO.SDS.ActiveBackup.Utils.renderSize(e.get("device_info").vm_size) + "<p>" + _LABS("overview", "device_pcs") + "&nbsp" + SYNO.SDS.ActiveBackup.Utils.renderSize(e.get("device_info").pc_size) + "<p>" + _LABS("overview", "device_servers") + "&nbsp" + SYNO.SDS.ActiveBackup.Utils.renderSize(e.get("device_info").server_size) + "<p>" + _LABS("overview", "device_fs") + "&nbsp" + SYNO.SDS.ActiveBackup.Utils.renderSize(e.get("device_info").agentless_size) + "<p>" + _LABS("overview", "label_dedup_size") + "&nbsp" + SYNO.SDS.ActiveBackup.Utils.renderSize(e.get("dedup_size"));
                        SYNO.SDS.Utils.AddTip(c.child(".storage-tip"), j)
                    }
                }
                if (c.child(".device-tip")) {
                    if (Ext.isDefined(SYNO.ux.AddWhiteTipWithItem)) {
                        var h = [];
                        a(h, {
                            backup_type: SYNO.ActiveBackup.BackupType.VM
                        }, e.get("device_info").vm_count);
                        a(h, {
                            backup_type: SYNO.ActiveBackup.BackupType.PC
                        }, e.get("device_info").pc_count);
                        a(h, {
                            backup_type: SYNO.ActiveBackup.BackupType.SERVER
                        }, e.get("device_info").server_count);
                        a(h, {
                            backup_type: SYNO.ActiveBackup.BackupType.AGENTLESS
                        }, e.get("device_info").agentless_count);
                        var l = {
                            width: 448,
                            height: 298,
                            appWin: this.appWin,
                            owner: this.owner,
                            border: false,
                            layout: "fit",
                            storage_container: false,
                            listeners: {
                                afterrender: {
                                    fn: function() {
                                        this.loadData(h)
                                    },
                                    single: true
                                }
                            }
                        };
                        var f = new SYNO.ActiveBackup.StorageTipPanel(l);
                        var b = new Ext.Component({
                            applyTo: c.child(".device-tip").dom.id
                        });
                        SYNO.ux.AddWhiteTipWithItem(b, [f])
                    } else {
                        var g = _LABS("overview", "device_vms") + "&nbsp" + e.get("device_info").vm_count + "<p>" + _LABS("overview", "device_pcs") + "&nbsp" + e.get("device_info").pc_count + "<p>" + _LABS("overview", "device_servers") + "&nbsp" + e.get("device_info").server_count + "<p>" + _LABS("overview", "device_fs") + "&nbsp" + e.get("device_info").agentless_count;
                        SYNO.SDS.Utils.AddTip(c.child(".device-tip"), g)
                    }
                }
                if (c.child(".re-relink")) {
                    this.mon(c.child(".re-relink"), "click", function() {
                        this.owner.onDeactivate();
                        this.owner.maskWindow("polling");
                        this.sendWebAPI({
                            api: "SYNO.ActiveBackup.Share",
                            method: "relink",
                            version: 1,
                            params: {
                                share_name: e.get("share_name")
                            },
                            scope: this,
                            callback: function(n, m) {
                                this.owner.onActivate();
                                if (!n) {
                                    this.owner.reportError(m)
                                }
                            }
                        })
                    }, this)
                }
            }
        }, this)
    },
    needUpdate: function(a) {
        if (this.oldRecords.length != a.length) {
            return true
        }
        var c = false;
        var b = [];
        this.oldRecords.each(function(e) {
            var d = {};
            Ext.apply(d, e.get("device_info"));
            Ext.apply(d, e.get("relink_state"));
            d.share_name = e.get("share_name");
            var f = e.get("backup_tasks");
            d.backup_tasks = (f && f.length > 0) ? f.join(", ") : "";
            b.push(JSON.stringify(d))
        });
        a.each(function(e) {
            var d = {};
            Ext.apply(d, e.device_info);
            Ext.apply(d, e.relink_state);
            d.share_name = e.share_name;
            var f = e.backup_tasks;
            d.backup_tasks = (f && f.length > 0) ? f.join(", ") : "";
            d = JSON.stringify(d);
            if (b.indexOf(d) === -1) {
                c = true;
                return
            }
        });
        return c
    }
});
Ext.define("SYNO.ActiveBackup.View.LogDetailWindow.TaskHistoryPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.icon_panel = new SYNO.ux.Panel({
            owner: this,
            itemId: "icon_panel",
            region: "west",
            width: 176,
            autoFlexcroll: false,
            cls: "icon_panel",
            padding: 0
        });
        this.form_panel = new SYNO.ux.FormPanel({
            owner: this,
            itemId: "form_panel",
            autoFlexcroll: false,
            labelWidth: 230,
            region: "center",
            cls: "form_panel",
            items: [this.status_label = new Ext.form.DisplayField({
                hideLabel: true,
                cls: "status",
                itemId: "status",
                value: "--"
            }), this.process_label = new Ext.form.CompositeField({
                padding: 0,
                itemId: "processed_count",
                labelStyle: "line-height: 18px;",
                id: this.transfered_count_id = Ext.id(),
                cls: "processed_count",
                fieldLabel: _LABS("detail_info_window", "processed_file_count"),
                height: 22,
                items: [{
                    xtype: "panel",
                    hideLabel: true,
                    border: false,
                    padding: 0,
                    height: 22,
                    html: '<div class="icon_list"><div id="' + this.transfered_count_id + '.success_icon" class="success_icon">---</div><div id="' + this.transfered_count_id + '.warning_icon" class="warning_icon">---</div><div id="' + this.transfered_count_id + '.error_icon" class="error_icon">---</div></div>'
                }]
            }), this.duration_label = new Ext.form.DisplayField({
                cls: "duration",
                itemId: "duration",
                fieldLabel: _LABS("tasklist", "duration"),
                labelStyle: "line-height: 18px;",
                value: "--"
            }), this.transfered_label = new Ext.form.DisplayField({
                cls: "transfered_size",
                itemId: "transfered_size",
                fieldLabel: _LABS("detail_info_window", "transfered_size"),
                labelStyle: "line-height: 18px;",
                value: "--"
            })]
        });
        var a = {
            cls: "task_information",
            padding: "0 20px",
            autoFlexcroll: false,
            layout: "border",
            items: [this.icon_panel, this.form_panel]
        };
        return Ext.apply(a, b)
    },
    setData: function(a) {
        this.setStatusIcon(a);
        this.setStatus(a);
        this.setDuration(a);
        this.setTransferedSize(a);
        this.setProcessedCount(a);
        if (a.is_backup === false) {
            return
        }
        if (a.backup_type === SYNO.ActiveBackup.BackupType.VM) {
            this.process_label.label.update(_LABS("detail_info_window", "processed_vm_count"))
        } else {
            if (a.backup_type !== SYNO.ActiveBackup.BackupType.AGENTLESS) {
                this.process_label.setVisible(false)
            }
        }
    },
    setStatusIcon: function(b) {
        switch (b.status) {
            case SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS:
                var a = "0px -192px";
                break;
            case SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS:
                a = "0px -96px";
                break;
            default:
                a = "0px 0px"
        }
        this.icon_panel.getEl().setStyle({
            "background-position": a
        })
    },
    setStatus: function(c) {
        var a = SYNO.SDS.ActiveBackup.Utils.getResultStatusString(c.status);
        this.status_label.setValue(a);
        var b = SYNO.SDS.ActiveBackup.Utils.getResultStatusColor(c.status);
        this.status_label.getEl().setStyle({
            color: b
        })
    },
    setDuration: function(b) {
        var a = SYNO.SDS.ActiveBackup.Utils.renderDuration(b);
        this.duration_label.setValue(a)
    },
    setTransferedSize: function(b) {
        var a = SYNO.SDS.ActiveBackup.Utils.renderSize(b.transfered_bytes);
        this.transfered_label.setValue(a)
    },
    setProcessedCount: function(a) {
        Ext.get(this.process_label.id + ".success_icon").set({
            "ext:qtip": _LABS("detail_info_window", "success_processed_count")
        });
        Ext.get(this.process_label.id + ".warning_icon").set({
            "ext:qtip": _LABS("detail_info_window", "warning_processed_count")
        });
        Ext.get(this.process_label.id + ".error_icon").set({
            "ext:qtip": _LABS("detail_info_window", "error_processed_count")
        });
        Ext.get(this.process_label.id + ".success_icon").update(a.success_count.toString());
        Ext.get(this.process_label.id + ".warning_icon").update(a.warning_count.toString());
        Ext.get(this.process_label.id + ".error_icon").update(a.error_count.toString())
    }
});
Ext.define("SYNO.ActiveBackup.View.LogDetailWindow.LogGridPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    pageSize: 500,
    constructor: function(a) {
        this.owner = a.owner;
        this.result_id = a.result_id;
        this.callParent([this.fillConfig(a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this.getView(), "refresh", this.bindClickEventOnCell, this)
    },
    fillConfig: function(b) {
        var c = this.createStore(b);
        var a = {
            itemId: "log_tab",
            title: _LABS("log", "log"),
            cls: "log_grid",
            store: c,
            padding: "0 20px",
            colModel: this.createColumnModel(b),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            viewConfig: {
                rowOverCls: "log-over",
                getRowClass: function(d, e) {
                    if (d.data.status == SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS) {
                        return "success-type"
                    } else {
                        if (d.data.status == SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS) {
                            return "warning-type"
                        } else {
                            return "error-type"
                        }
                    }
                }
            }
        };
        return Ext.apply(a, b)
    },
    createColumnModel: function(c) {
        var b = [{
            header: _LABS("log", "log_type"),
            dataIndex: "log_level",
            width: 160,
            sortable: true,
            id: "type",
            align: "center",
            renderer: (function(k, h, d, f, j, e) {
                var i = d.data;
                var g = "";
                if (i.log_level == SYNO.ActiveBackup.LogLevel.INFO) {
                    g = _LABS("log", "info_type");
                    g = '<span class="info">' + g + "</span>"
                } else {
                    if (i.log_level == SYNO.ActiveBackup.LogLevel.ERROR) {
                        g = _LABS("log", "error_type");
                        g = '<span class="error">' + g + "</span>"
                    } else {
                        if (i.log_level == SYNO.ActiveBackup.LogLevel.WARNING) {
                            g = _LABS("log", "warning_type");
                            g = '<span class="warning">' + g + "</span>"
                        }
                    }
                }
                return g
            }).createDelegate(this)
        }, {
            header: _LABS("log", "log_description"),
            dataIndex: "log_type",
            width: 460,
            id: "description",
            sortable: false,
            renderer: (function(k, g, d, f, i, e) {
                var h = d.data;
                var j = SYNO.SDS.ActiveBackup.Utils.getLogString(h.log_type, h.other_params);
                if (g) {
                    g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"'
                }
                return j
            }).createDelegate(this)
        }, {
            header: _LABS("log", "log_time"),
            dataIndex: "log_time",
            id: "time",
            width: 200,
            sortable: true,
            align: "center",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    bindClickEventOnCell: function() {
        Ext.select(".script_result_path").on("click", function(b, a) {
            a = Ext.get(a);
            SYNO.SDS.AppLaunch("SYNO.SDS.App.FileStation3.Instance", {
                opendir: a.getAttribute("script_result_path")
            })
        }, this)
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Log",
            method: "list_result_detail",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: true,
            fields: ["log_level", "log_time", "log_type", "other_params"],
            totalProperty: "count",
            root: "result_detail_list",
            baseParams: {
                result_id: this.result_id,
                offset: 0,
                limit: this.pageSize
            },
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.ActiveBackup.View.LogDetailWindow.MainWindow", {
    extend: "SYNO.SDS.ModalWindow",
    panel_task_information: null,
    panel_log_grid: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.result_id = a.result_id;
        this.data = a.data;
        this.mon(this, "activate", this.activate, this)
    },
    fillConfig: function(b) {
        this.getTaskHistoryPanel(b);
        this.getLogGridPanel(b);
        var a = {
            itemId: "main_window",
            cls: "syno-activebackup-log_detail_window",
            closable: true,
            title: b.window_title,
            minWidth: b.width,
            minHeight: b.height,
            maximizable: true,
            resizable: true,
            padding: "0 20px",
            border: true,
            layout: "border",
            items: [this.panel_task_information, {
                xtype: "syno_panel",
                height: 8
            }, this.panel_log_grid],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                items: [{
                    xtype: "syno_panel",
                    height: 32
                }]
            }
        };
        return Ext.apply(a, b)
    },
    activate: function() {
        this.panel_task_information.setData(this.data)
    },
    getTaskHistoryPanel: function(a) {
        if (null === this.panel_task_information) {
            this.panel_task_information = new SYNO.ActiveBackup.View.LogDetailWindow.TaskHistoryPanel({
                itemId: "task_information",
                owner: this.owner,
                region: "north",
                height: 152,
                border: false
            })
        }
        return this.panel_task_information
    },
    getLogGridPanel: function(a) {
        if (null === this.panel_log_grid) {
            this.panel_log_grid = new SYNO.ActiveBackup.View.LogDetailWindow.LogGridPanel({
                itemId: "log_grid",
                owner: this.owner,
                region: "center",
                result_id: a.result_id
            })
        }
        return this.panel_log_grid
    }
});
Ext.define("SYNO.ActiveBackup.View.ResultPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.search_on_activate = false;
        this.restrict_time_search = false;
        this.initActions();
        this.callParent([this.fillConfig(a)])
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.actions.onSelectionChange(0);
        this.mon(this, "activate", this.onActivate, this);
        this.mon(this, "rowdblclick", this.onRowDblClick, this);
        this.mon(this.getSelectionModel(), "selectionchange", this.onSelectionChange, this);
        this.mon(this.searchPanel, "search", this.onSearch, this);
        return a
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            info: {
                text: _LABS("btn", "information"),
                scope: this,
                handler: this.openTaskHistory,
                select_type_enable: [false, true, false]
            }
        })
    },
    fillConfig: function(b) {
        this.pageSize = 200;
        var d = this.createStore();
        var c = [{
            name: "key_word",
            display_string: _T("log", "attr_keyword") + _T("common", "colon")
        }];
        var e = [{
            name: "status",
            display_string: _LABS("component", "task_status") + _T("common", "colon"),
            data: [
                [SYNO.SDS.ActiveBackup.ResultStatus.ALL, _LABS("task_status", "all_status")],
                [SYNO.SDS.ActiveBackup.ResultStatus.SUCCESS, _LABS("task_status", "success")],
                [SYNO.SDS.ActiveBackup.ResultStatus.PARTIAL_SUCCESS, _LABS("task_status", "partial_success")],
                [SYNO.SDS.ActiveBackup.ResultStatus.FAILURE, _LABS("task_status", "error")],
                [SYNO.SDS.ActiveBackup.ResultStatus.CANCEL, _LABS("task_status", "canceled")]
            ],
            default_value: SYNO.SDS.ActiveBackup.ResultStatus.ALL
        }, {
            name: "backup_type",
            display_string: _LABS("common", "backup_type") + _T("common", "colon"),
            data: [
                [SYNO.ActiveBackup.BackupType.ALL, _LABS("log", "all_type")],
                [SYNO.ActiveBackup.BackupType.VM, _LABS("common", "device_vms")],
                [SYNO.ActiveBackup.BackupType.PC, _LABS("common", "device_pcs")],
                [SYNO.ActiveBackup.BackupType.SERVER, _LABS("common", "device_servers")],
                [SYNO.ActiveBackup.BackupType.AGENTLESS, _LABS("common", "device_fs")]
            ],
            default_value: SYNO.ActiveBackup.BackupType.ALL
        }, {
            name: "job_action",
            display_string: _LABS("task_info", "task_type") + _T("common", "colon"),
            data: [
                [SYNO.SDS.ActiveBackup.JobAction.ALL, _LABS("log", "all_type")],
                [SYNO.SDS.ActiveBackup.JobAction.BACKUP, _LABS("job_action", "backup")],
                [SYNO.SDS.ActiveBackup.JobAction.RESTORE_DEVICE, _LABS("job_action", "restore")],
                [SYNO.SDS.ActiveBackup.JobAction.MIGRATE_DEVICE, _LABS("job_action", "migrate")],
                [SYNO.SDS.ActiveBackup.JobAction.DELETE_TARGET, _LABS("job_action", "delete_target")],
                [SYNO.SDS.ActiveBackup.JobAction.DELETE_VERSION, _LABS("job_action", "delete_version")],
                [SYNO.SDS.ActiveBackup.JobAction.DELETE_INVENTORY, _LABS("job_action", "delete_inventory")],
                [SYNO.SDS.ActiveBackup.JobAction.RELINK, _LABS("action", "relink")]
            ],
            default_value: SYNO.SDS.ActiveBackup.JobAction.ALL
        }];
        this.searchPanel = new SYNO.SDS.ActiveBackup.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-sds-fs-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            filter_inputfield: c,
            filter_combobox: e,
            hidden: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackup.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var f = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            itemId: "result_tab",
            title: _LABS("log", "task_history"),
            cls: "synoabk-result-panel",
            store: d,
            loadMask: true,
            tbar: new Ext.Toolbar({
                defaultType: "syno_button",
                items: [this.configButtons(), "->", this.findField]
            }),
            colModel: this.createColumnModel(b),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: f
        };
        return Ext.apply(a, b)
    },
    configButtons: function() {
        return [this.actions.get("info")]
    },
    createColumnModel: function(c) {
        var b = [{
            header: _LABS("component", "task_status"),
            dataIndex: "status",
            width: 100,
            sortable: false,
            id: "type",
            align: "center",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderResultStatus
        }, {
            header: _LABS("task_info", "task_type"),
            dataIndex: "job_action",
            id: "job_action",
            width: 70,
            sortable: false,
            align: "center",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderJobAction
        }, {
            header: _LABS("task_info", "task_name"),
            dataIndex: "task_name",
            id: "task_name",
            width: 170,
            sortable: false,
            align: "center",
            renderer: (function(f, d, e) {
                f = Ext.util.Format.htmlEncode(f);
                if (d) {
                    d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"'
                }
                return f
            }).createDelegate(this)
        }, {
            header: _LABS("log", "task_start_time"),
            dataIndex: "time_start",
            width: 170,
            id: "time_start",
            sortable: false,
            align: "center",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
        }, {
            header: _LABS("log", "task_finish_time"),
            dataIndex: "time_end",
            width: 170,
            id: "time_end",
            sortable: false,
            align: "center",
            renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
        }, {
            header: _LABS("component", "task_source"),
            dataIndex: "task_config",
            width: 210,
            id: "task_config",
            sortable: false,
            renderer: function(h, e, g) {
                var f = "";
                if (!h) {
                    return ""
                }
                var d = h;
                if (d.device_list) {
                    f = d.device_list.map(function(i) {
                        return i.host_name
                    }).join(", ")
                } else {
                    if (d.share_name) {
                        f = d.share_name
                    } else {
                        f = d.device_name
                    }
                }
                if (e) {
                    e.attr = 'ext:qtip="' + SYNO.SDS.ActiveBackup.Utils.htmlEncodeTip(f) + '"'
                }
                return Ext.util.Format.htmlEncode(f)
            }
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    setSearchingActivation: function(b) {
        var a = this.search_on_activate;
        this.search_on_activate = b;
        return a
    },
    setRestrictTimeSearch: function(b) {
        var a = this.restrict_time_search;
        this.restrict_time_search = b;
        return a
    },
    onActivate: function() {
        if (this.search_on_activate) {
            this.searchPanel.onSearch()
        } else {
            this.searchPanel.onReset();
            if (!this.getSelectionModel().getSelected()) {
                this.getSelectionModel().selectFirstRow()
            }
        }
    },
    onRowDblClick: function() {
        this.openTaskHistory()
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    openTaskHistory: function() {
        var a = this.getSelectionModel().getSelected();
        var b = new SYNO.ActiveBackup.View.LogDetailWindow.MainWindow({
            appWin: this.appWin,
            owner: this.owner,
            result_id: a.data.result_id,
            data: a.data,
            width: 696,
            height: 442
        });
        b.open()
    },
    onSelectionChange: function(b) {
        var a = b.getSelections();
        this.actions.onSelectionChange(a.length)
    },
    onSearch: function(a, b) {
        if (this.restrict_time_search) {
            b.filter.time_start = b.filter.from_timestamp;
            b.filter.time_end = b.filter.to_timestamp;
            delete b.filter.from_timestamp;
            delete b.filter.to_timestamp
        }
        this.getStore().baseParams = b;
        this.getBottomToolbar().moveFirst()
    },
    createStore: function() {
        var b = {};
        var a = new SYNO.API.JsonStore({
            api: "SYNO.ActiveBackup.Log",
            method: "list_result",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["result_id", "status", "task_name", "backup_type", "time_start", "time_end", "transfered_bytes", "task_config", "job_action", "success_count", "warning_count", "error_count"],
            totalProperty: "count",
            idProperty: "result_id",
            root: "results",
            baseParams: b,
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.ns("SYNO.SDS.ActiveBackup");
SYNO.SDS.ActiveBackup.CheckEmailService = function(a) {
    this.setStatusBusy();
    this.owner.sendWebAPI({
        api: "SYNO.Core.Notification.Mail.Conf",
        version: 1,
        method: "get",
        callback: function(c, b) {
            this.clearStatusBusy();
            if (!c) {
                this.owner.getMsgBox().alert(_LABS("app", "package_name"), SYNO.API.getErrorString(b.code));
                return
            }
            if (!b.enable_mail) {
                this.owner.getMsgBox().confirm(_LABS("app", "package_name"), _LABS("report", "report_task_enable_email"), function(d) {
                    if (d === "yes") {
                        SYNO.SDS.ActiveBackup.Utils.LaunchEmailServiceSetting()
                    }
                });
                return
            }
            a.apply(this)
        },
        scope: this
    })
};
Ext.define("SYNO.SDS.ActiveBackup.DialogReportSchedule", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "afterlayout", function() {
            new SYNO.ux.Utils.EnableCheckGroup(this.getForm(), "enable_schedule", ["interval", "custom_group", "email"])
        }, this.getComponent("main_panel"), {
            single: true
        });
        this.mon(this, "afterrender", this.onPageActivate, this, {
            single: true
        })
    },
    fillConfig: function(b) {
        var a = {
            height: 280,
            width: 600,
            layout: "fit",
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                handler: this.onOk,
                scope: this,
                text: _T("common", "commit")
            }, {
                xtype: "syno_button",
                btnStyle: "gray",
                handler: this.onCancel,
                scope: this,
                text: _LABS("btn", "cancel")
            }],
            items: [{
                xtype: "syno_formpanel",
                itemId: "main_panel",
                items: [{
                    xtype: "syno_checkbox",
                    boxLabel: _LABS("report", "schedule_checkbox"),
                    name: "enable_schedule"
                }, {
                    xtype: "syno_combobox",
                    name: "interval",
                    fieldLabel: _LABS("report", "duration_type"),
                    valueField: "value",
                    displayField: "display",
                    value: 1,
                    store: {
                        xtype: "arraystore",
                        fields: ["value", "display"],
                        data: [
                            [SYNO.SDS.ActiveBackup.ReportType.DAILY, _LABS("report", "duration_daily")],
                            [SYNO.SDS.ActiveBackup.ReportType.WEEKLY, _LABS("report", "duration_weekly")],
                            [SYNO.SDS.ActiveBackup.ReportType.MONTHLY, _LABS("report", "duration_monthly")],
                            [SYNO.SDS.ActiveBackup.ReportType.YEARLY, _LABS("report", "duration_year")]
                        ]
                    },
                    forceSelection: true,
                    listeners: {
                        scope: this,
                        select: this.comboSetListener
                    }
                }, {
                    xtype: "syno_compositefield",
                    fieldLabel: _LABS("report", "schedule"),
                    name: "custom_group",
                    items: [{
                        xtype: "syno_schedulefield",
                        width: 200,
                        name: "run_weekday",
                        indent: 0,
                        value: [0, 1, 2, 3, 4, 5, 6],
                        editable: false
                    }, {
                        xtype: "syno_combobox",
                        name: "start_month",
                        width: 100,
                        displayField: "display",
                        valueField: "value",
                        hidden: true,
                        value: 1,
                        store: this.createMonthStore()
                    }, {
                        xtype: "syno_combobox",
                        name: "start_day",
                        width: 100,
                        displayField: "display",
                        valueField: "value",
                        hidden: true,
                        value: 1,
                        store: this.createNumberStore(1, 32)
                    }, {
                        xtype: "syno_combobox",
                        name: "run_hour",
                        width: 60,
                        displayField: "display",
                        valueField: "value",
                        value: 0,
                        store: SYNO.SDS.Utils.createTimeItemStore("hour")
                    }, {
                        xtype: "syno_displayfield",
                        value: ":",
                        width: 6
                    }, {
                        xtype: "syno_combobox",
                        name: "run_min",
                        width: 60,
                        value: 0,
                        displayField: "display",
                        valueField: "value",
                        store: SYNO.SDS.Utils.createTimeItemStore("min")
                    }]
                }, {
                    xtype: "syno_textfield",
                    name: "email",
                    fieldLabel: _LABS("report", "email"),
                    validator: function(c) {
                        if (c) {
                            return Ext.form.VTypes.email(c)
                        }
                        return true
                    },
                    emptyText: "example@synology.com"
                }]
            }]
        };
        return Ext.apply(a, b)
    },
    comboSetListener: function(f) {
        var b = f.getValue();
        var a = this.getComponent("main_panel");
        var d = a.getForm().findField("run_weekday");
        var e = a.getForm().findField("start_month");
        var c = a.getForm().findField("start_day");
        Ext.each([d, e, c], function(g) {
            g.setVisible(false);
            g.setWidth(0)
        }, a);
        switch (parseInt(b, 10)) {
            case SYNO.SDS.ActiveBackup.ReportType.DAILY:
                d.setVisible(true);
                d.setWidth(200);
                break;
            case SYNO.SDS.ActiveBackup.ReportType.WEEKLY:
                d.setVisible(true);
                d.setWidth(200);
                break;
            case SYNO.SDS.ActiveBackup.ReportType.MONTHLY:
                c.setVisible(true);
                c.setWidth(100);
                break;
            case SYNO.SDS.ActiveBackup.ReportType.YEARLY:
                c.setVisible(true);
                c.setWidth(100);
                e.setVisible(true);
                e.setWidth(100);
                break
        }
        a.doLayout()
    },
    createNumberStore: function(d, c) {
        var b = [];
        for (var a = d; a < c; a++) {
            b.push([a, String(a)].splice(0))
        }
        return Ext.create({
            xtype: "arraystore",
            data: b,
            fields: ["value", "display"]
        })
    },
    createMonthStore: function() {
        return Ext.create({
            xtype: "arraystore",
            fields: ["value", "display"],
            data: SYNO.SDS.ActiveBackup.MonthData
        })
    },
    createWeekStore: function() {
        return Ext.create({
            xtype: "arraystore",
            fields: ["value", "display"],
            data: SYNO.SDS.ActiveBackup.WeekdayData
        })
    },
    onPageActivate: function() {
        this.setStatusBusy();
        this.owner.sendWebAPI({
            api: "SYNO.ActiveBackup.ReportConfig",
            version: 1,
            method: "get",
            callback: function(b, a) {
                this.clearStatusBusy();
                if (!b) {
                    this.owner.getMsgBox().alert(_LABS("app", "package_name"), SYNO.API.getErrorString(a.code));
                    return
                }
                if (a.configs) {
                    this.setConfigs(a.configs)
                }
            },
            scope: this
        })
    },
    setConfigs: function(c) {
        var b = c;
        var a = this.getComponent("main_panel");
        if (b.enable_schedule === "enable") {
            b.enable_schedule = "true"
        } else {
            b = {};
            b.enable_schedule = "false"
        }
        a.getForm().setValues(b);
        this.comboSetListener(a.getForm().findField("interval"));
        if (parseInt(b.interval, 10) === SYNO.SDS.ActiveBackup.ReportType.DAILY || parseInt(b.interval, 10) === SYNO.SDS.ActiveBackup.ReportType.WEEKLY) {
            var d = b.run_weekday.map(function(e) {
                return e.toString(10)
            }).join(",");
            a.getForm().findField("run_weekday").setValue(d)
        }
    },
    getConfigs: function() {
        var a = this.getComponent("main_panel");
        var b = a.getForm().getValues();
        if (b.enable_schedule === "false") {
            b.enable_schedule = "disable";
            return b
        }
        b.enable_schedule = "enable";
        b.run_weekday = a.getForm().findField("run_weekday").getValue().split(",").map(function(c) {
            return parseInt(c, 10)
        });
        return b
    },
    onOk: function() {
        var b = this.getConfigs();
        var a = this.getComponent("main_panel");
        if (!a.getForm().isValid()) {
            return
        }
        if ((b.enable_schedule == "enable") && (b.email !== "")) {
            SYNO.SDS.ActiveBackup.CheckEmailService.apply(this, [this.saveReport]);
            return
        }
        this.saveReport()
    },
    saveReport: function() {
        var a = this.getConfigs();
        this.setStatusBusy();
        this.owner.sendWebAPI({
            api: "SYNO.ActiveBackup.ReportConfig",
            version: 1,
            method: "set",
            params: {
                configs: a
            },
            callback: function(b, c) {
                this.clearStatusBusy();
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.ActiveBackup.DialogReportGenerate", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            height: 200,
            width: 460,
            layout: "fit",
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                handler: this.onGenerate,
                scope: this,
                text: _LABS("report", "generate")
            }, {
                xtype: "syno_button",
                btnStyle: "gray",
                handler: this.onCancel,
                scope: this,
                text: _LABS("btn", "cancel")
            }],
            items: [{
                xtype: "syno_formpanel",
                itemId: "main_panel",
                items: [{
                    xtype: "syno_combobox",
                    name: "interval",
                    fieldLabel: _LABS("report", "duration_type"),
                    valueField: "value",
                    displayField: "display",
                    value: 1,
                    store: {
                        xtype: "arraystore",
                        fields: ["value", "display"],
                        data: [
                            [SYNO.SDS.ActiveBackup.ReportType.DAILY, _LABS("report", "duration_daily")],
                            [SYNO.SDS.ActiveBackup.ReportType.WEEKLY, _LABS("report", "duration_weekly")],
                            [SYNO.SDS.ActiveBackup.ReportType.MONTHLY, _LABS("report", "duration_monthly")],
                            [SYNO.SDS.ActiveBackup.ReportType.YEARLY, _LABS("report", "duration_year")]
                        ]
                    },
                    forceSelection: true
                }, {
                    xtype: "syno_textfield",
                    name: "email",
                    fieldLabel: _LABS("report", "email"),
                    validator: function(c) {
                        if (c) {
                            return Ext.form.VTypes.email(c)
                        }
                        return true
                    },
                    emptyText: "example@synology.com"
                }]
            }]
        };
        return Ext.apply(a, b)
    },
    onGenerate: function() {
        var a = this.getComponent("main_panel");
        if (!a.getForm().isValid()) {
            return
        }
        var b = a.getForm().getValues();
        if (b.email !== "") {
            SYNO.SDS.ActiveBackup.CheckEmailService.apply(this, [this.generateReport]);
            return
        }
        this.generateReport()
    },
    generateReport: function() {
        var a = this.getComponent("main_panel");
        var b = a.getForm().getValues();
        this.setStatusBusy();
        this.owner.sendWebAPI({
            scope: this,
            api: "SYNO.ActiveBackup.Report",
            version: 1,
            method: "create",
            params: b,
            callback: function(c, d) {
                this.clearStatusBusy();
                this.fireEvent("aftergenerate", this);
                this.close()
            }
        })
    },
    onCancel: function() {
        this.close()
    }
});
Ext.define("SYNO.SDS.ActiveBackup.ReportPanel", {
    extend: "Ext.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.win = a.win;
        this.pageSize = 100;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        return Ext.apply({
            title: _LABS("report", "report"),
            layout: "fit",
            tbar: {
                xtype: "syno_toolbar",
                style: "border: none;",
                buttonAlign: "left",
                items: [{
                    xtype: "syno_button",
                    handler: this.onGenerateNow,
                    scope: this,
                    btnStyle: "gray",
                    text: _LABS("report", "generate_now")
                }, {
                    xtype: "syno_button",
                    handler: this.onScheduleReport,
                    scope: this,
                    btnStyle: "gray",
                    text: _LABS("report", "schedule")
                }]
            },
            items: [{
                xtype: "syno_gridpanel",
                viewConfig: {
                    forceFit: true
                },
                bbar: {
                    xtype: "syno_paging",
                    store: this.getGridStore(),
                    pageSize: this.pageSize,
                    showRefreshBtn: true,
                    displayInfo: true
                },
                loadMask: true,
                enableHdMenu: false,
                itemId: "report_log",
                colModel: new Ext.grid.ColumnModel({
                    defaults: {
                        hideable: false,
                        menuDisabled: true,
                        flex: 1
                    },
                    columns: [{
                        header: _LABS("report", "report_type"),
                        width: 100,
                        dataIndex: "report_interval",
                        renderer: function(c) {
                            var b;
                            if (c === SYNO.SDS.ActiveBackup.ReportType.DAILY) {
                                b = _LABS("report", "duration_daily")
                            } else {
                                if (c === SYNO.SDS.ActiveBackup.ReportType.WEEKLY) {
                                    b = _LABS("report", "duration_weekly")
                                } else {
                                    if (c === SYNO.SDS.ActiveBackup.ReportType.MONTHLY) {
                                        b = _LABS("report", "duration_monthly")
                                    } else {
                                        if (c === SYNO.SDS.ActiveBackup.ReportType.YEARLY) {
                                            b = _LABS("report", "duration_year")
                                        }
                                    }
                                }
                            }
                            return b
                        }
                    }, {
                        id: "report_time",
                        header: _T("time", "time_date"),
                        width: 100,
                        dataIndex: "report_time",
                        renderer: SYNO.SDS.ActiveBackup.Utils.renderTime
                    }, {
                        id: "uri",
                        width: 100,
                        header: "",
                        dataIndex: "uri_suffix",
                        renderer: function(c) {
                            var b = window.location.origin + "/ActiveBackupBusinessReport/" + c + "/report.html";
                            return '<a href="' + b + '" target="_blank">' + _LABS("report", "open") + "</a>"
                        }
                    }]
                }),
                ds: this.getGridStore(),
                flex: 1
            }]
        }, a)
    },
    getGridStore: function() {
        if (!this.grid_store) {
            this.grid_store = new SYNO.API.JsonStore({
                api: "SYNO.ActiveBackup.Report",
                version: 1,
                method: "list",
                appWindow: this.owner,
                root: "reports",
                totalProperty: "total",
                idProperty: "id",
                fields: ["report_time", "uri_suffix", "report_interval"],
                paramNames: {
                    start: "offset",
                    limit: "limit",
                    sort: "order_by",
                    dir: "direction"
                },
                baseParams: {
                    offset: 0,
                    limit: this.pageSize
                }
            })
        }
        return this.grid_store
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.mon(this, "activate", this.onPageActivate, this);
        return a
    },
    onPageActivate: function() {
        this.getGridStore().load()
    },
    onGenerateNow: function() {
        var a = new SYNO.SDS.ActiveBackup.DialogReportGenerate({
            title: _LABS("report", "generate_now"),
            owner: this.win || this.appWin || this.owner
        });
        a.toFront();
        a.open();
        this.mon(a, "aftergenerate", this.onPageActivate, this)
    },
    onScheduleReport: function() {
        var a = new SYNO.SDS.ActiveBackup.DialogReportSchedule({
            title: _LABS("report", "schedule"),
            owner: this.win || this.appWin || this.owner
        });
        a.toFront();
        a.open()
    }
});
Ext.define("SYNO.ActiveBackup.PageActivity", {
    extend: "SYNO.ux.TabPanel",
    constructor: function(a) {
        var c = Ext.copyTo({}, a, "appWin,owner");
        this.log_panel = new SYNO.ActiveBackup.View.LogPanel(c);
        this.result_panel = new SYNO.ActiveBackup.View.ResultPanel(c);
        this.report_panel = new SYNO.SDS.ActiveBackup.ReportPanel(c);
        var b = Ext.apply({
            activeTab: 0,
            items: [this.log_panel, this.result_panel, this.report_panel]
        }, a);
        return this.callParent([b])
    },
    getHelpParam: function() {
        return "activebackup_business_activities.html"
    }
});
Ext.namespace("SYNO.SDS.ActiveBackup");
SYNO.SDS.ActiveBackup.WebAPI = "SYNO.ActiveBackup";
SYNO.SDS.ActiveBackup.WinWidth = 1050;
SYNO.SDS.ActiveBackup.WinHeight = 580;
SYNO.SDS.ActiveBackup.MinWidth = 1050;
SYNO.SDS.ActiveBackup.MinHeight = 580;
SYNO.SDS.ActiveBackup.EmptyInventoryId = -9999;
SYNO.SDS.ActiveBackup.VmmEnv = {
    INSTALLED: "installed",
    INCLUSTER: "inCluster",
    SAME_VOLUME: "sameVolume",
    VMM_SUPPORTED: "vmmSupported",
    DSM_SUPPORTED: "dsmSupported"
};
SYNO.SDS.ActiveBackup.RestoreMode = {
    ORIGINAL: 0,
    NEW: 1
};
SYNO.SDS.ActiveBackup.AgentlessAuthPolicy = {
    SSH_PASSWORD: 0,
    SSH_KEY: 1,
    MODULE_PASSWORD: 2,
    MODULE_SSH_PASSWORD: 3,
    MODULE_SSH_KEY: 4
};
SYNO.SDS.ActiveBackup.AgentlessBackupPolicy = {
    INCREMENTAL: 0,
    MIRROR: 1,
    VERSION: 2
};
SYNO.SDS.ActiveBackup.ResultStatus = {
    ALL: -1,
    NONE: 0,
    INCOMPLETE: 1,
    SUCCESS: 2,
    PARTIAL_SUCCESS: 3,
    FAILURE: 4,
    CANCEL: 5
};
SYNO.SDS.ActiveBackup.VersionStatus = {
    BACKING_UP: 0,
    DELETING: 1,
    PAUSED: 2,
    COMPLETED: 3,
    FAILED: 4,
    PARTIAL: 5,
    CANCELED: 6,
    DELETE_FAILED: 7,
    CLONING: 8,
    WAITING_CONNECTION: 777
};
SYNO.SDS.ActiveBackup.DeviceStatus = {
    BACKING_UP: 0,
    DELETING: 1,
    PAUSED: 2,
    WAITING_CONNECTION: 3,
    COMPLETED: 4,
    FAILED: 5,
    PARTIAL: 6,
    DELETE_FAILED: 7
};
SYNO.SDS.ActiveBackup.EnableCbtMode = {
    DISABLE: 0,
    AUTO: 1
};
SYNO.SDS.ActiveBackup.OSType = {
    NONE: 0,
    WINDOWS: 1,
    LINUX: 2
};
SYNO.SDS.ActiveBackup.ScriptExecMode = {
    NONE: 0,
    REQUIRED_SUCCESS: 1,
    IGNORE_FAILURE: 2
};
SYNO.SDS.ActiveBackup.RestoreType = {
    INSTANT: 0,
    FULL: 1,
    FILE: 2,
    SYSTEM: 3,
    CUSTOM: 4,
    VMM: 5
};
SYNO.SDS.ActiveBackup.RelinkState = {
    Ready: 0,
    Relink1: 1,
    Relink2: 2,
    Relink3: 3,
    Relink4: 4,
    Relink5: 5
};
SYNO.SDS.ActiveBackup.JobAction = {
    ALL: -1,
    NONE: 0,
    BACKUP: Math.pow(2, 0),
    RESTORE_DEVICE: Math.pow(2, 7),
    MIGRATE_DEVICE: Math.pow(2, 8),
    VERIFY: Math.pow(2, 9),
    RESTORE_FILE: Math.pow(2, 10),
    RESTORE_PHYSICAL: Math.pow(2, 11),
    DELETE_TARGET: Math.pow(2, 16),
    DELETE_VERSION: Math.pow(2, 17),
    DELETE_INVENTORY: Math.pow(2, 18),
    RELINK: Math.pow(2, 21)
};
SYNO.SDS.ActiveBackup.JobStatus = {
    NONE: 0,
    WAITING_TASK: 1,
    WAITING_STORAGE: 2,
    RUNNING: 3,
    STOPPING: 4,
    DELEGATE: 8
};
SYNO.SDS.ActiveBackup.JobStage = {
    NONE: 0,
    PRE_ACTION: 1,
    DO_SUBJOB: 2,
    POST_ACTION: 3
};
SYNO.SDS.ActiveBackup.AgentRunningTaskStatus = {
    WAITING: 0,
    RUNNING: 1,
    PAUSING: 2,
    CANCELING: 3
};
SYNO.SDS.ActiveBackup.AgentRunningTaskDetailStatus = {
    NONE: 0,
    WAITING_TASK: 1,
    WAITING_STORAGE: 2,
    WAITING_DEVICE: 3,
    WAITING_PREPARING: 4,
    PAUSING_MANUAL: 5,
    PAUSING_OFFLINE: 6
};
SYNO.SDS.ActiveBackup.TemplateTargetType = {
    USER: 0,
    GROUP: 1,
    ALL: 2
};
SYNO.SDS.ActiveBackup.CreateMode = {
    SINGLE: 0,
    BATCH: 1
};
SYNO.SDS.ActiveBackup.AgentUpdateStatus = {
    NONE: 0,
    WAITING: 1,
    DOWNLOADING: 2,
    UPDATING: 3
};
SYNO.SDS.ActiveBackup.ReportType = {
    DAILY: 1,
    WEEKLY: 7,
    MONTHLY: 30,
    YEARLY: 365
};
SYNO.SDS.ActiveBackup.LogSpan = [
    [30, _LABS("log", "del_time_1_mon")],
    [3 * 30, _LABS("log", "del_time_3_mon")],
    [6 * 30, _LABS("log", "del_time_6_mon")],
    [365, _LABS("log", "del_time_1_year")]
];
SYNO.SDS.ActiveBackup.MaxLogCount = [
    [1000000, _LABS("log", "del_cnt_1_mil")],
    [3000000, _LABS("log", "del_cnt_3_mil")],
    [5000000, _LABS("log", "del_cnt_5_mil")],
    [10000000, _LABS("log", "del_cnt_10_mil")]
];
SYNO.SDS.ActiveBackup.MaxConcurrentDevices = [
    [1, 1],
    [2, 2],
    [3, 3],
    [4, 4],
    [5, 5],
    [6, 6],
    [7, 7],
    [8, 8],
    [9, 9],
    [10, 10]
];
SYNO.SDS.ActiveBackup.MonthData = [
    [1, _LABS("schedule", "month1")],
    [2, _LABS("schedule", "month2")],
    [3, _LABS("schedule", "month3")],
    [4, _LABS("schedule", "month4")],
    [5, _LABS("schedule", "month5")],
    [6, _LABS("schedule", "month6")],
    [7, _LABS("schedule", "month7")],
    [8, _LABS("schedule", "month8")],
    [9, _LABS("schedule", "month9")],
    [10, _LABS("schedule", "month10")],
    [11, _LABS("schedule", "month11")],
    [12, _LABS("schedule", "month12")]
];
SYNO.SDS.ActiveBackup.WeekdayData = [
    [0, _LABS("schedule", "sunday")],
    [1, _LABS("schedule", "monday")],
    [2, _LABS("schedule", "tuesday")],
    [3, _LABS("schedule", "wednesday")],
    [4, _LABS("schedule", "thursday")],
    [5, _LABS("schedule", "friday")],
    [6, _LABS("schedule", "saturday")]
];
SYNO.SDS.ActiveBackup.ScheduleTypeData = [
    ["Hourly", _LABS("schedule", "repeat_type_hourly")],
    ["Weekly", _LABS("schedule", "repeat_type_daily")]
];
SYNO.SDS.ActiveBackup.GetTemplateTargetString = function(b) {
    var a = "";
    if (b === SYNO.SDS.ActiveBackup.TemplateTargetType.USER) {
        a = _LABS("target_type", "user")
    } else {
        if (b === SYNO.SDS.ActiveBackup.TemplateTargetType.GROUP) {
            a = _LABS("target_type", "group")
        } else {
            if (b === SYNO.SDS.ActiveBackup.TemplateTargetType.ALL) {
                a = _LABS("target_type", "all")
            }
        }
    }
    return a
};
SYNO.SDS.ActiveBackup.GetTemplateTargetName = function(b, d, c, a) {
    if (d === -1) {
        if (c === 0) {
            b = _LABS("template", "template_target_user_not_found") + " (#" + a + ")"
        } else {
            b = _LABS("template", "template_target_group_not_found") + " (#" + a + ")"
        }
    } else {
        if (d === -2) {
            b = _LABS("template", "template_target_server_connection_failed") + " (#" + a + ")"
        }
    }
    return b
};
SYNO.SDS.ActiveBackup.GetTemplateTargetNameColor = function(a) {
    if (a === 0) {
        return ""
    } else {
        return "red"
    }
};
SYNO.SDS.ActiveBackup.GetBackupTypeString = function(b) {
    var a = "";
    if (b === SYNO.ActiveBackup.BackupType.NONE) {
        a = _LABS("common", "device_unknown")
    } else {
        if (b === SYNO.ActiveBackup.BackupType.VM) {
            a = _LABS("common", "device_vms")
        } else {
            if (b === SYNO.ActiveBackup.BackupType.PC) {
                a = _LABS("common", "device_pcs")
            } else {
                if (b === SYNO.ActiveBackup.BackupType.SERVER) {
                    a = _LABS("common", "device_servers")
                } else {
                    if (b === SYNO.ActiveBackup.BackupType.AGENTLESS) {
                        a = _LABS("common", "device_fs")
                    }
                }
            }
        }
    }
    return a
};
SYNO.SDS.ActiveBackup.TemplateTargetTypeChooser = [
    [SYNO.SDS.ActiveBackup.TemplateTargetType.USER, SYNO.SDS.ActiveBackup.GetTemplateTargetString(SYNO.SDS.ActiveBackup.TemplateTargetType.USER)],
    [SYNO.SDS.ActiveBackup.TemplateTargetType.GROUP, SYNO.SDS.ActiveBackup.GetTemplateTargetString(SYNO.SDS.ActiveBackup.TemplateTargetType.GROUP)],
    [SYNO.SDS.ActiveBackup.TemplateTargetType.ALL, SYNO.SDS.ActiveBackup.GetTemplateTargetString(SYNO.SDS.ActiveBackup.TemplateTargetType.ALL)]
];
SYNO.SDS.ActiveBackup.TemplateBackupTypeChooser = [
    [SYNO.ActiveBackup.BackupType.PC, SYNO.SDS.ActiveBackup.GetBackupTypeString(SYNO.ActiveBackup.BackupType.PC)],
    [SYNO.ActiveBackup.BackupType.SERVER, SYNO.SDS.ActiveBackup.GetBackupTypeString(SYNO.ActiveBackup.BackupType.SERVER)]
];
SYNO.SDS.ActiveBackup.LicenseWebPage = "https://www.synology.com/products/Active_Backup_for_Business_License";
Ext.define("SYNO.ActiveBackup.Template.IconCombo", {
    extend: "SYNO.ux.ComboBox",
    defaultValue: null,
    initComponent: function() {
        Ext.apply(this, {
            tpl: '<tpl for="."><div class="x-combo-list-item abkb-icon-combo-item ' + this.iconClsPrefix + "{" + this.iconClsField + '}" role="option" aria-label="{' + this.displayField + '}" id="{[Ext.id()]}">{' + this.displayField + "}</div></tpl>"
        });
        SYNO.ActiveBackup.Template.IconCombo.superclass.initComponent.call(this)
    },
    onRender: function(b, a) {
        SYNO.ActiveBackup.Template.IconCombo.superclass.onRender.call(this, b, a);
        this.el.addClass("abkb-icon-combo-input")
    },
    onFocus: function(b, a) {
        this.el.removeClass("input-invalid");
        this.trigger.removeClass("trigger-invalid");
        SYNO.ActiveBackup.Template.IconCombo.superclass.onFocus.call(this, b, a);
        if (this.getRawValue() === this.valueNotFoundText) {
            this.clearValue();
            this.clearIconCls()
        }
    },
    clearIconCls: function() {
        if (null !== this.iconCls) {
            this.removeClass("abkb-icon-combo-icon");
            this.removeClass(this.iconCls);
            this.iconCls = null
        }
    },
    setIconCls: function(a) {
        this.clearIconCls();
        this.addClass("abkb-icon-combo-icon");
        this.iconCls = this.iconClsPrefix + a;
        this.addClass(this.iconCls)
    },
    setValue: function(a) {
        SYNO.ActiveBackup.Template.IconCombo.superclass.setValue.call(this, a);
        var b = this.store.query(this.valueField, this.getValue()).itemAt(0);
        if (!this.valueNotFound() && b) {
            this.setIconCls(b.get(this.iconClsField))
        } else {
            this.clearIconCls();
            this.clearValue();
            this.el.addClass("input-invalid");
            this.trigger.addClass("trigger-invalid")
        }
    },
    setDefaultValue: function(a, b, d, e) {
        var c = this.valueField;
        this.valueField = null;
        SYNO.ActiveBackup.Template.IconCombo.superclass.setValue.call(this, a);
        if (e !== 0) {
            this.addClass("abkb-combo-item-error");
            this.mon(this, "select", function() {
                this.removeClass("abkb-combo-item-error")
            }, this, {
                single: true
            })
        }
        this.setIconCls(b);
        this.defaultValue = a;
        this.value = d;
        this.valueField = c
    },
    assertValue: function() {
        if (this.getRawValue() !== this.defaultValue) {
            SYNO.ActiveBackup.Template.IconCombo.superclass.assertValue.call(this)
        }
    },
    valueNotFound: function() {
        if (this.lastSelectionText === this.valueNotFoundText) {
            return true
        }
        return false
    }
});
Ext.define("SYNO.ActiveBackup.Template.UserGrpCombo", {
    extend: "SYNO.ActiveBackup.Template.IconCombo",
    labelStyle: "margin-left: 0px; width: 180px;",
    displayField: "name",
    iconClsField: "type",
    iconClsPrefix: "abkb-combo-item-",
    valueField: "value",
    triggerAction: "all",
    mode: "remote",
    pageSize: 50,
    editable: true,
    emptyText: _LABS("warning", "error_invalid_user_or_group"),
    valueNotFoundText: _LABS("warning", "error_invalid_user_or_group"),
    grow: true,
    maxHeight: 360,
    minChars: 1,
    typeAhead: true
});
Ext.define("SYNO.ActiveBackup.Template.TargetPanel", {
    extend: "SYNO.ux.Panel",
    mode: null,
    constructor: function(a) {
        this.mode = a.mode;
        this.batch_edit = (a.batch_edit === undefined) ? false : a.batch_edit;
        var b = [{
            xtype: "syno_compositefield",
            hideLabel: true,
            style: "margin-left: 10px",
            hidden: this.batch_edit,
            items: [{
                xtype: "syno_displayfield",
                value: _LABS("template", "template_name_label") + _T("common", "colon"),
                width: 150
            }, {
                id: "template_name_filed",
                xtype: "syno_textfield",
                vtype: "taskname",
                vtypeText: _LABS("warning", "bad_templatename"),
                name: "template_name",
                bodyStyle: "margin-left: 32px; padding-left: 8px;",
                width: 305,
                enableKeyEvents: true,
                allowBlank: false,
                hideLabel: true
            }]
        }, {
            xtype: "panel",
            hidden: this.batch_edit,
            border: false,
            height: 20
        }, this.createTargetChooser(), {
            xtype: "panel",
            hidden: this.batch_edit,
            border: false,
            height: 20
        }, this.createAssignment("backup_type", SYNO.ActiveBackup.BackupType.PC), {
            xtype: "panel",
            border: false,
            height: 20
        }];
        var c = Ext.apply({
            items: b
        }, a);
        return this.callParent([c])
    },
    createTargetChooser: function() {
        var a = function(c, b) {
            return b.type + ":" + b.name + ":0"
        };
        return {
            xtype: "syno_compositefield",
            style: "margin-left: 10px",
            hidden: this.batch_edit,
            items: [{
                xtype: "syno_displayfield",
                value: _LABS("template", "template_target_condition") + _T("common", "colon"),
                width: 150
            }, new SYNO.ActiveBackup.Template.UserGrpCombo({
                id: "target_chooser",
                queryParam: "prefix",
                width: 305,
                listWidth: 305,
                store: new Ext.data.Store({
                    autoDestroy: true,
                    proxy: new SYNO.API.Proxy({
                        api: "SYNO.Core.ACL",
                        method: "list_owners",
                        version: 1,
                        appWindow: this
                    }),
                    reader: new Ext.data.JsonReader({
                        root: "owners",
                        totalProperty: "total",
                        id: "value"
                    }, [{
                        name: "type"
                    }, {
                        name: "name"
                    }, {
                        name: "value",
                        convert: a
                    }]),
                    paramNames: {
                        start: "offset",
                        limit: "limit"
                    },
                    remoteSort: true,
                    baseParams: {
                        include_everyone: false,
                        include_owner: false
                    },
                    pruneModifiedRecords: true
                })
            })]
        }
    },
    createAssignment: function(b, a) {
        var c = SYNO.SDS.ActiveBackup.TemplateBackupTypeChooser;
        return {
            xtype: "syno_compositefield",
            style: "margin-left: 10px",
            itemId: b + "_panel",
            items: [{
                xtype: "syno_displayfield",
                value: _LABS("template", "template_device_type") + _T("common", "colon"),
                width: 150
            }, {
                xtype: "syno_combobox",
                id: b + "_chooser",
                valueField: "value",
                displayField: "display",
                allowBlank: false,
                store: new Ext.data.SimpleStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: c
                }),
                forceSelection: true,
                value: (a !== null) ? a : undefined,
                hideLabel: false,
                selectOnFocus: true,
                triggerAction: "all",
                editable: false,
                hidden: false,
                width: 305
            }]
        }
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(Ext.getCmp("template_name_filed"), "keyup", this.fireCheckValid, this);
        this.mon(Ext.getCmp("target_chooser"), "select", this.fireCheckValid, this);
        this.mon(Ext.getCmp("backup_type_chooser"), "blur", this.fireCheckValid, this)
    },
    fireCheckValid: function(a) {
        if (Ext.getCmp("template_name_filed").validate()) {
            Ext.getCmp("template_name_filed").clearInvalid()
        } else {
            if (Ext.getCmp("backup_type_chooser").getValue() === "") {
                Ext.getCmp("template_name_filed").markInvalid(_LABS("common", "error_empty_input"))
            }
        }
        if (Ext.getCmp("backup_type_chooser").value === "") {
            Ext.getCmp("backup_type_chooser").markInvalid(_LABS("common", "error_empty_input"))
        } else {
            Ext.getCmp("backup_type_chooser").clearInvalid()
        }
        this.fireEvent("checkvalid", this)
    },
    clearTargetChooserValue: function() {
        Ext.getCmp("target_chooser").setValue()
    },
    clearAllValue: function() {
        Ext.getCmp("backup_type_chooser").clearValue();
        Ext.getCmp("target_chooser").clearValue()
    },
    setDefaultValue: function(c) {
        Ext.getCmp("backup_type_chooser").setValue(c.backup_type);
        Ext.getCmp("template_name_filed").setValue(c.template_name);
        var a = SYNO.SDS.ActiveBackup.GetTemplateTargetName(c.target_name, c.target_errorcode, c.target_type, c.target_id);
        var b = (c.target_type === 0 ? "user" : (c.target_type === 1 ? "group" : "all"));
        var d = c.target_errorcode;
        Ext.getCmp("target_chooser").setDefaultValue(a, b, b + ":" + a + ":" + d, d);
        if (c.is_default === true) {
            Ext.getCmp("template_name_filed").disable();
            Ext.getCmp("target_chooser").disable()
        }
    },
    validate: function() {
        var a = false;
        var b = this.getParams();
        if (b !== null) {
            if (b.target_errorcode === 0) {
                a = true
            } else {
                this.owner.getMsgBox().alert("", SYNO.ActiveBackup.Util.parseError({
                    code: 403,
                    errors: {}
                }) || _T("common", "commfail"))
            }
        }
        return a
    },
    getParams: function() {
        if (Ext.getCmp("template_name_filed").getValue() === undefined || Ext.getCmp("template_name_filed").getValue() === "" || Ext.getCmp("template_name_filed").getEl().hasClass("x-form-invalid") === true) {
            return null
        }
        if (Ext.getCmp("target_chooser").value === undefined || Ext.getCmp("backup_type_chooser").value === undefined || "" === Ext.getCmp("target_chooser").value || Ext.getCmp("target_chooser").valueNotFound() || "" === Ext.getCmp("backup_type_chooser").value) {
            return null
        }
        var b = Ext.getCmp("target_chooser").value;
        var a = {
            template_name: Ext.getCmp("template_name_filed").value,
            backup_type: Ext.getCmp("backup_type_chooser").value,
            target_type: b.substr(0, b.indexOf(":")),
            target_name: b.substring(b.indexOf(":") + 1, b.lastIndexOf(":")),
            target_errorcode: parseInt(b.substr(b.lastIndexOf(":") + 1), 10)
        };
        if (this.mode === "create" && this.target_type_id !== undefined && this.target_id !== undefined) {
            a.target_type_id = this.target_type_id;
            a.target_id = this.target_id
        }
        return a
    },
    setTemplateTargetId: function(a) {
        this.target_type_id = a.target_type;
        this.target_id = a.target_id
    }
});
Ext.define("SYNO.ActiveBackup.Template.SummaryPanel", {
    extend: "SYNO.ActiveBackup.TaskSummaryPanel",
    activate: function() {
        var c = this.owner.getParams();
        var b = this.getItemConfig(c);
        var a = [];
        Ext.each(b, function(d) {
            if (!d.show || d.show.call(this, c)) {
                a.push({
                    item: d.label,
                    value: d.getValue.call(this, c)
                })
            }
        }, this);
        this.getStore().loadData(a)
    },
    getItemConfig: function(b) {
        var a = [{
            label: _LABS("template", "template_name_label"),
            getValue: function(c) {
                return c.template_name
            }
        }, {
            label: _LABS("template", "template_target_condition"),
            getValue: function(c) {
                return c.target_name
            }
        }, {
            label: _LABS("template", "template_device_type"),
            getValue: function(c) {
                return SYNO.SDS.ActiveBackup.GetBackupTypeString(c.backup_type)
            }
        }, {
            label: _LABS("task_info", "local_path"),
            getValue: function(c) {
                return "/" + c.share_name
            }
        }, {
            label: _LABS("common", "settings_sourceType"),
            getValue: function(c) {
                switch (c.source_type) {
                    case SYNO.ActiveBackup.SourceType.BARE_METAL:
                        return _LABS("agentbk", "source_bare_metal");
                    case SYNO.ActiveBackup.SourceType.SYSVOL:
                        return _LABS("agentbk", "source_sysvol");
                    case SYNO.ActiveBackup.SourceType.CUSVOL:
                        return _LABS("agentbk", "source_cusvol") + ": " + c.cus_vols.join(", ");
                    default:
                        SYNO.Debug.error("unknown source type: " + c.source_type);
                        return ""
                }
            }
        }, {
            label: _LABS("task_info", "enable_compress"),
            getValue: function(c) {
                return this.getEnableString(c.enable_compress_transfer)
            }
        }, {
            label: _LABS("component", "task_data_encryption"),
            getValue: function(c) {
                return this.getEnableString(c.enable_encrypt_transfer)
            }
        }, {
            label: _LABS("common", "transfer_setting_app_aware"),
            show: function(c) {
                return this.backup_type === SYNO.ActiveBackup.BackupType.SERVER
            },
            getValue: function(c) {
                return this.getEnableString(c.enable_app_aware_bkp)
            }
        }, {
            label: _LABS("common", "enable_verification"),
            show: function(c) {
                return c.backup_type !== SYNO.ActiveBackup.BackupType.PC
            },
            getValue: function(c) {
                return this.getEnableString(c.enable_verification)
            }
        }, {
            label: _LABS("task_info", "enable_schedule"),
            getValue: function(c) {
                return this.getEnableString(c.sched_content.enable_schedule === "enable")
            }
        }, {
            label: _LABS("retention", "enable_backup_retention"),
            getValue: function(c) {
                return this.getEnableString(!c.retention_policy.keep_all)
            }
        }, {
            label: _LABS("task_info", "backup_privilege"),
            show: function(c) {
                return c.backup_type !== SYNO.ActiveBackup.BackupType.PC
            },
            getValue: function(e) {
                var c = this.owner.getPrivilege();
                if (!c) {
                    return ""
                }
                var d = c.users.map(function(g) {
                    return g.name
                });
                var f = c.groups.map(function(g) {
                    return g.name
                });
                return d.concat(f).join(", ")
            }
        }];
        return a
    }
});
Ext.define("SYNO.ActiveBackup.Template.CreateWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    constructor: function(a) {
        function c(d) {
            var e = [new SYNO.ActiveBackup.Template.TargetPanel({
                headline: _LABS("template", "select_target_headline"),
                description: _LABS("template", "select_target_desc"),
                appWin: d.appWin,
                owner: d.owner,
                mode: "create",
                itemId: "template_condition",
                nextId: "template_share"
            }), new SYNO.ActiveBackup.TargetSelector({
                headline: _LABS("vmbk", "select_repository_headline"),
                description: _LABS("vmbk", "select_repository_desc"),
                appWin: d.appWin,
                owner: d.owner,
                itemId: "template_share",
                nextId: "template_source_type"
            }), new SYNO.ActiveBackup.Agent.SourceTypeWizardPanel({
                headline: _LABS("agentbk", "select_source_type_headline"),
                description: _LABS("agentbk", "select_source_type_desc"),
                appWin: d.appWin,
                backup_type: d.backup_type,
                mode: SYNO.SDS.ActiveBackup.CreateMode.BATCH,
                itemId: "template_source_type",
                nextId: "template_schedule"
            }), new SYNO.ActiveBackup.ScheduleSetterPaenl({
                headline: _LABS("agentbk", "select_schedule_headline"),
                description: _LABS("agentbk", "select_schedule_desc"),
                appWin: d.appWin,
                hide_instant_backup_checkbox: false,
                itemId: "template_schedule",
                nextId: "template_retention"
            }), new SYNO.ActiveBackup.RetentionEditPanel({
                headline: _LABS("agentbk", "select_retention_policy_headline"),
                description: _LABS("agentbk", "select_retention_policy_desc"),
                appWin: d.appWin,
                itemId: "template_retention",
                nextId: "template_priviledge"
            }), new SYNO.ActiveBackup.PrivilegePanel({
                headline: _LABS("agentbk", "select_privilege_headline"),
                description: _LABS("agentbk", "select_privilege_desc"),
                owner: d.owner,
                appWin: d.appWin,
                itemId: "template_priviledge",
                nextId: "template_summary"
            }), new SYNO.ActiveBackup.Template.SummaryPanel({
                headline: _LABS("template", "summary_header"),
                description: _LABS("template", "summary_description"),
                appWin: d.appWin,
                owner: d.owner,
                itemId: "template_summary",
                nextId: null
            })];
            return e
        }
        var b = Ext.apply({
            title: _LABS("template", "template_create_wizard"),
            cls: "syno-template-create-wizard",
            banner: true,
            width: 700,
            height: 580,
            steps: c(a)
        }, a);
        return this.callParent([b])
    },
    validateTargetId: function(a) {
        this.setStatusBusy();
        var b = this.getParams();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.TaskTemplate",
            method: "translate_target_id",
            version: 1,
            params: {
                target_type: b.target_type,
                target_name: b.target_name
            },
            callback: function(f, e, d, c) {
                this.clearStatusBusy();
                if (!f) {
                    this.getStep("template_condition").clearTargetChooserValue();
                    this.reportError(e);
                    return
                }
                this.getStep("template_condition").setTemplateTargetId(e);
                SYNO.ActiveBackup.Template.CreateWizard.superclass.goNext.call(this, a)
            },
            scope: this
        })
    },
    goNext: function(a, b) {
        if (!this.validate()) {
            return false
        }
        if (a === "template_share") {
            this.validateTargetId(a);
            this.getStep(a).backup_type = this.getParams().backup_type;
            return false
        }
        if (a === "template_source_type") {
            if (this.getParams().backup_type === SYNO.ActiveBackup.BackupType.PC) {
                this.getStep("template_source_type").taskSettingPanel.setAppAware(true, false);
                this.getStep("template_source_type").taskSettingPanel.setVerificationVisiable(false)
            } else {
                this.getStep("template_source_type").taskSettingPanel.setAppAware(false, true);
                this.getStep("template_source_type").taskSettingPanel.setVerificationVisiable(true)
            }
        }
        if (a === "template_retention") {
            if (this.getParams().backup_type == SYNO.ActiveBackup.BackupType.PC) {
                this.getButton("next").setText(_T("common", "commit"));
                this.getStep(a).nextId = "template_summary"
            } else {
                this.getButton("next").setText(_T("common", "next"));
                this.getStep(a).nextId = "template_priviledge"
            }
        }
        if (a !== null) {
            return this.callParent(arguments)
        }
        this.onApply();
        return false
    },
    onApply: function() {
        var a = this.getParams();
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.TaskTemplate",
            method: "create",
            version: 1,
            params: a,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onApplyDone: function(d, a, c, b) {
        this.clearStatusBusy();
        if (!d) {
            this.reportError(a);
            return
        }
        this.fireEvent("need_reload");
        this.close()
    },
    getPrivilege: function() {
        if (this.getParams().backup_type === SYNO.ActiveBackup.BackupType.PC) {
            return null
        } else {
            return this.getStep("template_priviledge").getPrivilege()
        }
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Template.EditWizard", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.records = a.records;
        this.record = a.records[0];
        this.panels = {
            general: this.createGeneralPanel(a),
            source: this.createSourceTypePanel(a),
            schedule: this.createSchedulePanel(a),
            retention: this.creatRetentionPanel(a),
            permission: this.creatPermissionPanel(a)
        };
        var b = Ext.apply({
            title: _LABS("template", "template_edit_wizard"),
            cls: "syno-template-edit-wizard",
            banner: true,
            resizable: false,
            layout: "fit",
            width: 700,
            height: 580,
            items: this.createTabPanel(),
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _LABS("btn", "ok"),
                scope: this,
                handler: this.onOKClick
            }, {
                xtype: "syno_button",
                text: _LABS("btn", "cancel"),
                scope: this,
                handler: this.onCancelClick
            }]
        }, a);
        this.callParent([b]);
        var c = Ext.getCmp("backup_type_chooser");
        this.mon(this, "activate", this.initPrivilege, this);
        this.mon(c, "select", this.onBackupTypeUpdate, this);
        this.mon(this.panels.general.getComponent("target_edit_box").getComponent("batch_edit_checkbox"), "check", this.onTargetTypeBatchBoxChecked, this)
    },
    onTargetTypeBatchBoxChecked: function() {
        if (this.panels.general.batch_edit_box.getComponent("batch_edit_checkbox").checked === true) {
            this.onBackupTypeUpdate();
            return
        }
        var b = false;
        var a = false;
        Ext.each(this.records, function(c) {
            if (c.data.backup_type == SYNO.ActiveBackup.BackupType.PC) {
                b = true;
                return
            } else {
                a = true
            }
        }, this);
        this.panels.source.task_setting_panel.setAppAwareVisible(!b);
        this.panels.source.task_setting_panel.setVerificationVisiable(!b);
        this.panels.source.setBackupTypeShare(b);
        this.setBackupTypePrivilege(b, a)
    },
    initEvents: function() {
        this.callParent(arguments)
    },
    createGeneralPanel: function(a) {
        return new SYNO.ActiveBackup.Template.GeneralEditPanel({
            title: _LABS("common", "settings_general"),
            itemId: "settings_general",
            appWin: a.appWin,
            owner: a.owner,
            record: this.record,
            batch_edit: a.batch_edit,
            batch_type: "template"
        })
    },
    createSourceTypePanel: function(a) {
        return new SYNO.ActiveBackup.Template.SourceTypePanel({
            title: _LABS("common", "source_destination"),
            itemId: "settings_sourceType",
            record: this.record,
            batch_edit: a.batch_edit,
            owner: a.owner,
            batch_type: "template",
            appWin: a.appWin
        })
    },
    createSchedulePanel: function(a) {
        return new SYNO.ActiveBackup.ScheduleSetterPaenl({
            title: _LABS("common", "settings_schedule"),
            itemId: "settings_schedule",
            hide_instant_backup_checkbox: false,
            batch_edit: a.batch_edit,
            batch_type: "template",
            appWin: a.appWin
        })
    },
    creatRetentionPanel: function(a) {
        var b = [];
        b.push(this.record);
        return new SYNO.ActiveBackup.RetentionEditPanel({
            title: _LABS("component", "Retention_tab_title"),
            itemId: "settings_retention",
            batch_edit: a.batch_edit,
            batch_type: "template",
            records: b,
            mode: "edit",
            appWin: a.appWin,
            owner: a.owner
        })
    },
    creatPermissionPanel: function(a) {
        var b = [];
        b.push(this.record);
        return new SYNO.ActiveBackup.PrivilegePanel({
            itemId: "settings_permission",
            records: b,
            batch_edit: a.batch_edit,
            batch_type: "template",
            appWin: a.appWin,
            owner: a.owner,
            mode: "edit"
        })
    },
    validatePanels: function() {
        var a = true;
        Object.values(this.panels).each(function(b) {
            if (!b.validate()) {
                a = false;
                return false
            }
        });
        return a
    },
    createTabPanel: function() {
        return new SYNO.ux.TabPanel({
            activeTab: "settings_general",
            items: Object.values(this.panels),
            deferredRender: false
        })
    },
    initPrivilege: function() {
        var b = false;
        var a = false;
        Ext.each(this.records, function(c) {
            if (c.data.backup_type == SYNO.ActiveBackup.BackupType.PC) {
                b = true
            } else {
                a = true
            }
        }, this);
        this.setBackupTypePrivilege(b, a);
        this.panels.source.task_setting_panel.setAppAwareVisible(!b);
        this.panels.source.task_setting_panel.setVerificationVisiable(!b);
        this.panels.source.setBackupTypeShare(b)
    },
    onBackupTypeUpdate: function() {
        var c = Ext.getCmp("backup_type_chooser").value;
        var b = false;
        var a = false;
        if (c == SYNO.ActiveBackup.BackupType.PC) {
            b = true
        } else {
            a = true
        }
        var d = b || !a;
        this.setBackupTypePrivilege(b, a);
        this.panels.source.task_setting_panel.setAppAwareVisible(!d);
        this.panels.source.task_setting_panel.setVerificationVisiable(!d);
        this.panels.source.setBackupTypeShare(b)
    },
    setBackupTypePrivilege: function(b, a) {
        var d = this.items.items[0].getComponent("settings_permission");
        var c = d.getComponent("user_group_grid");
        d.setTargetType(b, a);
        if (b) {
            c.setDataDisable()
        } else {
            c.onDataLoad()
        }
    },
    onOpen: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.TaskTemplate",
            method: "list",
            params: {
                filter: {
                    template_id: this.record.id
                }
            },
            version: 1,
            callback: function(d, b, c, a) {
                this.clearStatusBusy();
                if (!d) {
                    this.reportError(b);
                    return
                }
                Object.values(this.panels).each(function(e) {
                    e.fireEvent("setting", b.template_list[0])
                })
            },
            scope: this
        });
        this.callParent(arguments)
    },
    onOKClick: function() {
        if (this.validatePanels() === false) {
            return
        }
        this.setStatusBusy();
        var a = Object.values(this.panels).reduce(function(c, b) {
            return Ext.apply(c, b.getParams())
        }, {});
        a.template_ids = [];
        Ext.each(this.records, function(b) {
            a.template_ids.push(b.id)
        }, this);
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.TaskTemplate",
            method: "set",
            params: a,
            version: 1,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onCancelClick: function() {
        this.close()
    },
    onApplyDone: function(d, b, c, a) {
        this.clearStatusBusy();
        if (!d) {
            this.reportError(b);
            return
        }
        this.fireEvent("need_reload");
        this.close()
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Template.GeneralEditPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        var c = (a.batch_edit === undefined) ? false : a.batch_edit;
        this.batch_edit_box = new SYNO.ActiveBackup.Agent.BatchEditBox({
            id: "target_edit_box",
            batch_edit: c,
            batch_type: a.batch_type
        });
        this.target_panel = new SYNO.ActiveBackup.Template.TargetPanel({
            id: "target_panel",
            headline: _LABS("template", "select_target_headline"),
            description: _LABS("template", "select_target_desc"),
            appWin: a.appWin,
            batch_edit: c,
            owner: a.owner,
            record: a.record,
            mode: "edit"
        });
        var b = Ext.apply({
            height: 500,
            items: [this.batch_edit_box, this.target_panel]
        }, a);
        return this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "setting", this.onSetting, this);
        this.mon(this, "activate", this.initBatchEdit, this);
        this.mon(this.batch_edit_box.getComponent("batch_edit_checkbox"), "check", this.checkBatchEdit, this)
    },
    initBatchEdit: function() {
        if (this.batch_edit_box.hidden === false) {
            this.checkBatchEdit()
        }
        this.mun(this, "activate", this.initBatchEdit, this)
    },
    checkBatchEdit: function() {
        var a = this.batch_edit_box.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.target_panel.enable();
            Ext.getCmp("backup_type_chooser").fireEvent("select")
        } else {
            this.target_panel.disable()
        }
    },
    onSetting: function(a) {
        Ext.getCmp("target_panel").setDefaultValue(a)
    },
    validate: function() {
        return this.target_panel.validate()
    },
    getParams: function() {
        if (this.batch_edit_box.hidden === false && this.batch_edit_box.getComponent("batch_edit_checkbox").checked === false) {
            return {}
        }
        var a = this.target_panel.getParams();
        if (this.batch_edit_box.getComponent("batch_edit_checkbox").checked) {
            return {
                backup_type: a.backup_type,
                license_type: a.license_type
            }
        } else {
            return a
        }
    }
});
Ext.define("SYNO.ActiveBackup.Template.SourceTypePanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.batch_edit = (a.batch_edit === undefined) ? false : a.batch_edit;
        this.share_name = "---";
        this.record = a.record;
        this.has_pc = false;
        this.batch_edit_source = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: this.batch_edit,
            batch_type: a.batch_type
        });
        this.batch_edit_setting = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: this.batch_edit,
            batch_type: a.batch_type
        });
        this.batch_edit_dst = new SYNO.ActiveBackup.Agent.BatchEditBox({
            batch_edit: this.batch_edit,
            batch_type: a.batch_type
        });
        this.source_type_panel = new SYNO.ActiveBackup.Agent.SourceTypePanel({
            source_type: a.record.json.source_type,
            batch_edit: this.batch_edit,
            batch_type: a.batch_type,
            appWin: a.appWin,
            owner: a.owner,
            mode: SYNO.SDS.ActiveBackup.CreateMode.BATCH
        });
        this.task_setting_panel = new SYNO.ActiveBackup.Agent.TaskSettingPanel({
            appWin: a.appWin,
            backup_type: a.record.json.backup_type,
            owner: a.owner
        });
        this.dst_type_panel = new SYNO.ux.Panel({
            border: false,
            fieldLabel: _LABS("component", "destination_label"),
            labelStyle: "line-height: 28px; padding: 0px 0px 0px 10px",
            style: "margin-left: 10px",
            itemId: "target_name_field",
            items: [{
                xtype: "syno_displayfield",
                id: "target_name_label",
                value: this.share_name
            }, {
                xtype: "syno_button",
                id: "target_select_btn",
                text: _LABS("btn", "browse"),
                handler: this.onShareSelectClick,
                scope: this
            }]
        });
        var b = Ext.apply({
            height: 500,
            layout: "form",
            labelWidth: 180,
            items: [this.batch_edit_source, this.source_type_panel, this.batch_edit_setting, this.task_setting_panel, this.batch_edit_dst, this.dst_type_panel]
        }, a);
        this._mask_owner = [];
        return this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "setting", this.initDefaultValue, this);
        this.mon(this, "activate", this.initBatchEdit, this);
        this.mon(this.batch_edit_source.getComponent("batch_edit_checkbox"), "check", this.checkBatchEditSource, this);
        this.mon(this.batch_edit_setting.getComponent("batch_edit_checkbox"), "check", this.checkBatchEditSetting, this);
        this.mon(this.batch_edit_dst.getComponent("batch_edit_checkbox"), "check", this.checkBatchEditDst, this);
        this.mon(this.task_setting_panel, "mask", this.maskWindow, this);
        this.mon(this.task_setting_panel, "unmask", this.unmaskWindow, this)
    },
    initBatchEdit: function() {
        if (this.isBatchMode()) {
            this.checkBatchEditSource();
            this.checkBatchEditSetting();
            this.checkBatchEditDst();
            this.source_type_panel.getComponent("source_type_spacer").setHeight(10);
            this.task_setting_panel.getComponent("task_setting_spacer").setHeight(10)
        }
        this.mun(this, "activate", this.initBatchEdit, this)
    },
    checkBatchEditSource: function() {
        var a = this.batch_edit_source.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.source_type_panel.enable();
            this.source_type_panel.label.removeClass("x-item-disabled")
        } else {
            this.source_type_panel.disable();
            this.source_type_panel.label.addClass("x-item-disabled")
        }
    },
    checkBatchEditSetting: function() {
        var a = this.batch_edit_setting.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.task_setting_panel.enable();
            this.task_setting_panel.label.removeClass("x-item-disabled")
        } else {
            this.task_setting_panel.disable();
            this.task_setting_panel.label.addClass("x-item-disabled")
        }
    },
    checkBatchEditDst: function() {
        var a = this.batch_edit_dst.getComponent("batch_edit_checkbox").checked;
        if (a) {
            this.dst_type_panel.enable();
            this.dst_type_panel.label.removeClass("x-item-disabled")
        } else {
            this.dst_type_panel.disable();
            this.dst_type_panel.label.addClass("x-item-disabled")
        }
    },
    initDefaultValue: function(a) {
        this.source_type_panel.setDefaultValue(a);
        this.task_setting_panel.setDefaultOption(a);
        this.onSetSelectTarget(a)
    },
    setBackupTypeShare: function(a) {
        this.has_pc = a
    },
    onShareSelectClick: function() {
        this.shareSelector = new SYNO.ActiveBackup.Template.TargetSelectWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.has_pc ? SYNO.ActiveBackup.BackupType.PC : SYNO.ActiveBackup.BackupType.SERVER,
            width: 650,
            height: 500
        });
        this._openModalWindow(this.shareSelector)
    },
    _openModalWindow: function(a) {
        a.on("close", function() {
            this.onSetSelectTarget(a.params)
        }, this);
        a.open()
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    onSetSelectTarget: function(b) {
        var a = this.share_name;
        if (b && b.share_name && b.share_name !== "") {
            this.share_name = b.share_name;
            Ext.getCmp("target_name_label").update(this.share_name)
        }
        if (a !== this.share_name && !this.has_pc) {
            this.task_setting_panel.templateShareNameChanged(this.share_name)
        }
    },
    isBatchMode: function() {
        return (this.batch_edit === true)
    },
    validate: function() {
        if (this.task_setting_panel.getEnableVerification() && !this.task_setting_panel.isVerificationPolicyValid() && Ext.getCmp("backup_type_chooser").getValue() === SYNO.ActiveBackup.BackupType.SERVER) {
            this.owner.getMsgBox().alert("", _LABS("warning", "verification_policy_invalid"));
            return false
        }
        if (this.getParams()) {
            return true
        }
        return false
    },
    getParams: function() {
        if (this.isBatchMode() === false) {
            var a = this.task_setting_panel.getAppAware();
            var c = this.task_setting_panel.getEnableVerification();
            if (Ext.getCmp("backup_type_chooser").getValue() === SYNO.ActiveBackup.BackupType.PC) {
                a = false;
                c = false
            }
            return {
                share_name: this.share_name,
                source_type: this.source_type_panel.getValue(),
                enable_compress_transfer: this.task_setting_panel.getCompress(),
                enable_encrypt_transfer: this.task_setting_panel.getEncrypt(),
                enable_verification: c,
                verification_policy: this.task_setting_panel.getVerificationPolicy(),
                enable_app_aware_bkp: a
            }
        }
        var b = {};
        if (this.batch_edit_source.getComponent("batch_edit_checkbox").checked) {
            b.source_type = this.source_type_panel.getValue()
        }
        if (this.batch_edit_dst.getComponent("batch_edit_checkbox").checked) {
            b.share_name = this.share_name
        }
        if (this.batch_edit_setting.getComponent("batch_edit_checkbox").checked) {
            b.enable_compress_transfer = this.task_setting_panel.getCompress();
            b.enable_encrypt_transfer = this.task_setting_panel.getEncrypt();
            if (this.task_setting_panel.isVerificationVisible()) {
                b.enable_verification = this.task_setting_panel.getEnableVerification();
                b.verification_policy = this.task_setting_panel.getVerificationPolicy()
            }
            if (this.task_setting_panel.getComponent("appaware").hidden === false) {
                b.enable_app_aware_bkp = this.task_setting_panel.getAppAware()
            }
        }
        if (Ext.getCmp("target_edit_box").getComponent("batch_edit_checkbox").checked && Ext.getCmp("backup_type_chooser").getValue() === SYNO.ActiveBackup.BackupType.PC) {
            b.enable_app_aware_bkp = false
        }
        return b
    }
});
Ext.define("SYNO.ActiveBackup.Template.TargetSelectWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    backup_type: null,
    constructor: function(a) {
        this.backup_type = a.backup_type;
        this.appWin = a.appWin;
        this.owner = a.owner;
        this.target_selector = new SYNO.ActiveBackup.TargetSelector({
            headline: _LABS("vmbk", "select_repository_headline"),
            description: _LABS("vmbk", "select_repository_desc"),
            itemId: "task_target",
            nextId: null,
            backup_type: a.backup_type,
            appWin: a.appWin,
            owner: a.owner
        });
        var b = Ext.apply({
            title: _LABS("agentbk", "task_create_wizard"),
            cls: "syno-vmbk-task-create-wizard",
            banner: true,
            width: 650,
            height: 500,
            steps: [this.target_selector]
        }, a);
        return this.callParent([b])
    },
    onApply: function() {
        this.params = this.target_selector.getParams();
        this.close()
    }
});
Ext.define("SYNO.ActiveBackup.PageSetting", {
    extend: "SYNO.ux.TabPanel",
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin, owner");
        var b = Ext.apply({
            deferredRender: false,
            items: [this.getGeneralSettingTab(a), this.getTemplateSettingTab(a)]
        }, a);
        return this.callParent([b])
    },
    getGeneralSettingTab: function(a) {
        return new SYNO.ActiveBackup.GeneralSettingPanel({
            appWin: a.appWin,
            owner: a.owner,
            title: _LABS("component", "general_setting_title")
        })
    },
    getTemplateSettingTab: function(a) {
        return new SYNO.ActiveBackup.TemplateSettingPanel({
            appWin: a.appWin,
            owner: a.owner,
            title: _LABS("component", "template_setting_title")
        })
    },
    getHelpParam: function() {
        return "activebackup_business_settings.html"
    }
});
Ext.define("SYNO.ActiveBackup.GeneralSettingPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        Ext.copyTo(this, a, "appWin, owner");
        this._mask_owner = [];
        var b = Ext.apply({
            items: [{
                xtype: "syno_fieldset",
                title: _LABS("settings_tab_panel", "concurrent_task_label"),
                collapsible: false,
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("settings_tab_panel", "concurrent_task_desc")
                }, {
                    xtype: "panel",
                    height: 8,
                    border: false
                }, {
                    xtype: "syno_displayfield",
                    value: _LABS("settings_tab_panel", "max_concurrent_devices") + _T("common", "colon")
                }, {
                    xtype: "syno_compositefield",
                    hideLabel: true,
                    items: [{
                        id: "max_concurrent_devices",
                        xtype: "syno_combobox",
                        valueField: "value",
                        displayField: "display",
                        value: 5,
                        store: new Ext.data.SimpleStore({
                            autoDestroy: true,
                            fields: ["value", "display"],
                            data: SYNO.SDS.ActiveBackup.MaxConcurrentDevices
                        }),
                        width: 150
                    }]
                }, {
                    xtype: "panel",
                    height: 8,
                    border: false
                }, {
                    xtype: "syno_displayfield",
                    hidden: true,
                    value: _LABS("settings_tab_panel", "memory_usage_limit_percentage")
                }, {
                    xtype: "syno_compositefield",
                    hidden: true,
                    hideLabel: true,
                    items: [{
                        xtype: "syno_numberfield",
                        id: "memory_usage_limit_percentage",
                        minValue: 0,
                        maxValue: 100,
                        value: 80,
                        width: 150
                    }, {
                        xtype: "syno_displayfield",
                        value: "%"
                    }]
                }]
            }, {
                xtype: "syno_fieldset",
                title: _LABS("settings_tab_panel", "delay_release_label"),
                collapsible: false,
                items: [{
                    xtype: "syno_displayfield",
                    htmlEncode: false,
                    value: _LABS("settings_tab_panel", "delay_release_desc")
                }, {
                    xtype: "panel",
                    height: 8,
                    border: false
                }, {
                    xtype: "syno_displayfield",
                    value: _LABS("settings_tab_panel", "delay_release_space") + _T("common", "colon")
                }, {
                    xtype: "syno_compositefield",
                    hideLabel: true,
                    items: [{
                        id: "delay_release_space",
                        xtype: "syno_numberfield",
                        value: 10,
                        minValue: 0,
                        maxValue: 100,
                        width: 150
                    }, {
                        xtype: "syno_displayfield",
                        value: "GB",
                        width: 70
                    }]
                }, {
                    xtype: "syno_displayfield",
                    htmlEncode: false,
                    value: '<font class="note-font">' + _T("common", "note") + _T("common", "colon") + "</font>" + _LABS("settings_tab_panel", "delay_release_note")
                }]
            }, {
                xtype: "panel",
                height: 20,
                border: false
            }, {
                xtype: "syno_compositefield",
                hideLabel: true,
                style: "margin-left: 10px",
                hidden: true,
                items: [{
                    id: "chk_creation_server_usergroup",
                    name: "creation_server_desc",
                    boxLabel: _LABS("settings_tab_panel", "limit_creation_label"),
                    xtype: "syno_checkbox"
                }, {
                    id: "names_creation_server_usergroup",
                    name: "creation_server_usergroup",
                    xtype: "syno_displayfield",
                    value: "admin"
                }]
            }, {
                xtype: "syno_button",
                text: "Edit",
                style: "margin-left: 40px",
                hidden: true
            }],
            buttons: [{
                xtype: "syno_button",
                btnStyle: "blue",
                text: _LABS("common", "apply"),
                scope: this,
                handler: this.onOKClick
            }, {
                xtype: "syno_button",
                text: _LABS("common", "reset"),
                scope: this,
                handler: this.onResetClick
            }]
        }, a);
        return this.callParent([b])
    },
    initEvents: function() {
        this.mon(this, "activate", this.onActivate, this)
    },
    onActivate: function() {
        this.getGeneralSetting();
        this.doLayout()
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    onOKClick: function() {
        if (!this.validate()) {
            this.appWin.getMsgBox().alert("", _LABS("settings_tab_panel", "setting_error"))
        } else {
            this.setGeneralSetting()
        }
    },
    validate: function() {
        return this.getForm().isValid()
    },
    onResetClick: function() {
        this.getGeneralSetting()
    },
    getGeneralSetting: function() {
        this.maskWindow("get_general_setting");
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Setting",
            method: "list",
            version: 1,
            callback: function(b, a) {
                this.unmaskWindow("get_general_setting");
                if (!b) {
                    this.reportError(a)
                } else {
                    Ext.each(a.settings, function(d) {
                        var c = Ext.getCmp(d.name);
                        if (c) {
                            c.setValue(d.value)
                        }
                    })
                }
            },
            scope: this
        })
    },
    setGeneralSetting: function() {
        this.maskWindow("set_general_setting");
        var a = {
            settings: [{
                name: "max_concurrent_devices",
                value: Ext.getCmp("max_concurrent_devices").getValue().toString()
            }, {
                name: "memory_usage_limit_percentage",
                value: Ext.getCmp("memory_usage_limit_percentage").getValue().toString()
            }, {
                name: "delay_release_space",
                value: Ext.getCmp("delay_release_space").getValue().toString()
            }]
        };
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Setting",
            method: "set",
            version: 1,
            params: a,
            callback: function(c, b) {
                this.unmaskWindow("set_general_setting");
                if (!c) {
                    this.reportError(b)
                }
            },
            scope: this
        })
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.TemplateSettingPanel", {
    extend: "SYNO.ux.DDGridPanel",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.owner = a.owner;
        this.initActions();
        this._mask_owner = [];
        var b = Ext.apply({
            title: _LABS("component", "task_view_title"),
            itemId: "synoabk-task-template-view",
            loadMask: true,
            isHighCell: true,
            enableDragDrop: true,
            stateId: "SYNO.ActiveBackup.TemplateSettingPanel",
            plugins: [new SYNO.SDS.ActiveBackup.GridStatePlugin()],
            store: this.createStore(),
            colModel: this.createColumnModel(),
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            tbar: new Ext.Toolbar({
                defaultType: "syno_button",
                items: this.configButtons()
            }),
            viewConfig: {
                markDirty: false,
                ddGroup: "PolicyDDGroup",
                onCreateDragZone: function() {
                    this.dragZone = new Ext.grid.GridDragZone(this.grid, {
                        ddGroup: this.ddGroup || "DefaultDDGroup",
                        onBeforeDrag: function(f, g) {
                            var d = this.view.grid;
                            if (!d.getEl().hasClass(d.DDClass)) {
                                return false
                            }
                            for (var c = 0; c < f.selections.length; c++) {
                                if (f.selections[c].data.is_default === true) {
                                    return false
                                }
                            }
                            return true
                        },
                        endDrag: function() {
                            if (this.view.grid.has_changed) {
                                this.view.grid.setPriority();
                                this.view.grid.has_changed = false
                            }
                        }
                    })
                }
            },
            listeners: {
                rowclick: function(d, c, f) {
                    if (f && c >= 0 && !f.hasModifier()) {
                        d.getSelectionModel().selectRow(c)
                    }
                    this.updateButtons()
                },
                scope: this
            }
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.updateButtons();
        this.mon(this, "activate", this.onActivate, this)
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            create: {
                text: _LABS("component", "btn_create"),
                scope: this,
                handler: this.onTemplateCreate,
                select_type_enable: [true, true, true]
            },
            edit: {
                text: _LABS("component", "btn_edit"),
                scope: this,
                handler: this.onTemplateEdit,
                select_type_enable: [false, true, true]
            },
            remove: {
                text: _LABS("component", "btn_delete"),
                scope: this,
                handler: this.onTemplateRemove,
                select_type_enable: [false, true, true]
            }
        })
    },
    createStore: function() {
        var a = ["priority_order", "target_name", "backup_type", "bandwidth", "enable_compress_transfer", "enable_encrypt_transfer", "enable_app_aware_bkp", "enable_notify", "groups", "retention_policy", "share_name", "license_type", "schedule_id", "source_type", "target_id", "target_type", "template_id", "template_name", "users", "is_default"];
        var b = new SYNO.API.Store({
            pruneModifiedRecords: true,
            autoLoad: false,
            proxy: new SYNO.API.Proxy({
                api: "SYNO.ActiveBackup.TaskTemplate",
                method: "list",
                version: 1,
                appWindow: this.owner
            }),
            sortInfo: {
                field: "priority_order",
                direction: "DESC"
            },
            reader: new Ext.data.JsonReader({
                root: "template_list",
                totalProperty: "total",
                id: "template_id"
            }, a),
            remoteSort: false,
            listeners: {
                scope: this,
                beforeload: function() {
                    this.maskWindow("load")
                },
                load: function() {
                    this.unmaskWindow("load")
                },
                exception: function(e, f, g, c, d) {
                    this.unmaskWindow("load");
                    if (d && d.code) {
                        this.reportError(d, "alert")
                    }
                }
            }
        });
        return b
    },
    renderTargetName: function(d, e, a) {
        var b = SYNO.SDS.ActiveBackup.GetTemplateTargetNameColor(a.json.target_errorcode);
        var c = SYNO.SDS.ActiveBackup.GetTemplateTargetName(a.json.target_name, a.json.target_errorcode, a.json.target_type, a.json.target_id);
        return String.format('<font color="{0}">{1}</font>', b, c)
    },
    renderTemplateDescription: function(g, i, c) {
        var d = _LABS("common", "settings_sourceType") + ": " + SYNO.SDS.ActiveBackup.Utils.renderSourceType(c.json.source_type);
        var j = "";
        if (c.json.enable_compress_transfer === true || c.json.enable_encrypt_transfer === true || c.json.enable_app_aware_bkp === true) {
            j += _LABS("common", "transfer_setting") + ": ";
            var a = [];
            if (c.json.enable_compress_transfer === true) {
                a.push(_LABS("common", "transfer_setting_compressed"))
            }
            if (c.json.enable_encrypt_transfer === true) {
                a.push(_LABS("common", "transfer_setting_encrypted"))
            }
            if (c.json.enable_app_aware_bkp === true) {
                a.push(_LABS("common", "transfer_setting_app_aware"))
            }
            j += a.join("; ") + "<br/>"
        }
        j += _LABS("common", "settings_schedule") + ": ";
        if (c.json.sched_content.enable_schedule === "disable") {
            j += _LABS("schedule", "disable") + "<br/>"
        } else {
            j += _LABS("schedule", "backup_on") + " " + SYNO.SDS.ActiveBackup.Utils.getWeekdayStr(c.json.sched_content.run_weekday) + "; ";
            if (c.json.sched_content.repeat_type === "Hourly") {
                j += _LABS("schedule", "repeat_type_hourly") + "; "
            } else {
                if (c.json.sched_content.repeat_type === "Weekly") {
                    j += _LABS("schedule", "repeat_type_daily") + "; "
                }
            }
            var h = c.json.sched_content.run_hour.toString();
            var f = c.json.sched_content.run_min.toString();
            if (h.length < 2) {
                h = "0" + h
            }
            if (f.length < 2) {
                f = "0" + f
            }
            j += _LABS("schedule", "run_on") + " " + h + ":" + f + ";<br/>"
        }

        function b(k) {
            var l = [];
            k.each(function(m) {
                l.push(m)
            });
            return l.join(", ")
        }
        var e;
        if (c.json.backup_type === SYNO.ActiveBackup.BackupType.SERVER) {
            if (c.json.groups.length !== 0 || c.json.users.length !== 0) {
                j += _LABS("common", "restore_permission") + ": <br/>";
                if (c.json.groups.length !== 0) {
                    e = b(c.json.groups_name);
                    j += _LABS("target_type", "group") + ": " + e + "<br/>"
                }
                if (c.json.users.length !== 0) {
                    e = b(c.json.users_name);
                    j += _LABS("target_type", "user") + ": " + e + "<br/>"
                }
            }
        }
        if (i) {
            i.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"';
            d = d + "..."
        }
        return d
    },
    createColumnModel: function() {
        return new Ext.grid.ColumnModel({
            columns: [{
                header: _LABS("component", "template_type"),
                width: 100,
                dataIndex: "target_type",
                renderer: SYNO.SDS.ActiveBackup.GetTemplateTargetString
            }, {
                header: _LABS("component", "template_condition"),
                dataIndex: "target_name",
                renderer: this.renderTargetName
            }, {
                header: _LABS("component", "template_name"),
                dataIndex: "template_name"
            }, {
                header: _LABS("component", "template_device_type"),
                renderer: SYNO.SDS.ActiveBackup.GetBackupTypeString,
                dataIndex: "backup_type"
            }, {
                header: _LABS("component", "template_dsecription"),
                renderer: this.renderTemplateDescription
            }]
        })
    },
    onActivate: function() {
        this.store.load()
    },
    maskWindow: function(a) {
        if (this._mask_owner.length === 0) {
            this.getEl().mask(_T("common", "loading"), "x-mask-loading")
        }
        if (this._mask_owner.indexOf(a) === -1) {
            this._mask_owner.push(a)
        }
    },
    unmaskWindow: function(a) {
        this._mask_owner.remove(a);
        if (this._mask_owner.length === 0) {
            this.getEl().unmask()
        }
    },
    configButtons: function() {
        return [this.actions.get("create"), this.actions.get("edit"), this.actions.get("remove")]
    },
    onTemplateCreate: function() {
        var a = new SYNO.ActiveBackup.Template.CreateWizard({
            appWin: this.appWin,
            owner: this.owner
        });
        this.mon(a, "need_reload", function() {
            this.store.reload()
        }, this);
        a.open()
    },
    onTemplateEdit: function() {
        var a = this.getSelectionModel().getSelections();
        var c = (a.length > 1) ? true : false;
        var b = new SYNO.ActiveBackup.Template.EditWizard({
            appWin: this.appWin,
            owner: this.owner,
            records: a,
            batch_edit: c
        });
        this.mon(b, "need_reload", function() {
            this.store.reload()
        }, this);
        b.open()
    },
    onTemplateRemove: function() {
        var a = this.getSelectionModel().getSelections();
        var b = new SYNO.SDS.MessageBoxV5({
            owner: this.owner
        });
        b.confirmDelete(_LABS("component", "task_view_title"), _LABS("warning", "confirm_delete_template"), function(c) {
            if (c == "yes") {
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.TaskTemplate",
                    method: "remove",
                    params: {
                        template_ids: a.map(function(d) {
                            return d.id
                        })
                    },
                    version: 1,
                    callback: function() {
                        this.store.reload();
                        this.mon(this.store, "load", function() {
                            this.updateButtons()
                        }, this, {
                            single: true
                        })
                    },
                    scope: this
                })
            }
        }, this)
    },
    setPriority: function() {
        var b = [];
        var a = this.store.getRange();
        a.each(function(c) {
            b.push({
                template_name: c.get("template_name"),
                template_id: c.get("template_id"),
                priority_order: c.get("priority_order"),
                is_default: c.get("is_default")
            })
        });
        b.reverse();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.TaskTemplate",
            version: 1,
            method: "set_priority",
            params: {
                templates: b
            },
            callback: function() {
                this.store.reload()
            },
            scope: this
        })
    },
    onGridAfterRender: function(a) {
        if (!this.dropTarget) {
            this.dropTarget = new SYNO.ActiveBackup.TemplateGridDropTarget(a, {
                ddGroup: this.viewConfig.ddGroup || "DefaultDDGroup"
            })
        }
    },
    updateButtons: function() {
        var a = this.view.grid.getSelectionModel().getSelections();
        this.actions.onSelectionChange(a.length);
        Ext.each(a, function(b) {
            if (b.get("is_default") === true) {
                this.actions.get("remove").disable()
            }
        }, this)
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.TemplateGridDropTarget", {
    extend: "SYNO.ux.DDGridPanel.DropTarget",
    notifyDrop: function(a, c, b) {
        this.ddTarget.view.el.removeClass(this.grabbingCls);
        return true
    },
    notifyOver: function(i, d, c) {
        var f = this.ddTarget.view;
        var b = f.findRowIndex(d.getTarget());
        var g = c.rowIndex;
        f.el.addClass(this.grabbingCls);
        if (false === b || !Ext.isNumber(b) || b === this.store.getCount() - 1) {
            return false
        }
        if (g === b) {
            return this.dropAllowed
        }
        var j = c.selections;
        var a = b;
        var h = this.store;
        j.sort(function(k, e) {
            return h.indexOf(k) - h.indexOf(e)
        });
        j.each(function(k) {
            if (h.indexOf(k) < g) {
                a--
            } else {
                return false
            }
        });
        if (a < 0 || a + j.length >= h.getCount()) {
            return false
        }
        this.store.suspendEvents();
        this.store.remove(j);
        this.store.insert(a, j);
        this.ddTarget.has_changed = true;
        c.rowIndex = b;
        this.store.resumeEvents();
        f.refresh();
        this.ddTarget.selModel.selectRecords(j);
        return this.dropAllowed
    }
});
Ext.define("SYNO.ActiveBackup.AppInstance", {
    extend: "SYNO.SDS.AppInstance",
    appWindowName: "SYNO.ActiveBackup.AppWindow"
});
Ext.define("SYNO.ActiveBackup.AppWindow", {
    extend: "SYNO.SDS.PageListAppWindow",
    activePage: "SYNO.ActiveBackup.PageOverview",
    constructor: function(a) {
        return this.callParent([Ext.apply({
            cls: "synoabk-appwin",
            height: 580,
            width: 1184,
            minHeight: 580,
            minWidth: 1184,
            listItems: [{
                text: _LABS("app", "page_overview"),
                fn: "SYNO.ActiveBackup.PageOverview",
                iconCls: "page-icon-overview"
            }, {
                text: _LABS("app", "page_pc_backup"),
                fn: "SYNO.ActiveBackup.PagePcBackup",
                iconCls: "page-icon-pc-backup"
            }, {
                text: _LABS("app", "page_server_backup"),
                fn: "SYNO.ActiveBackup.PageServerBackup",
                iconCls: "page-icon-server-backup"
            }, {
                text: _LABS("app", "page_agentless_backup"),
                fn: "SYNO.ActiveBackup.PageAgentlessBackup",
                iconCls: "page-icon-agentless-backup"
            }, {
                text: _LABS("app", "page_vm_backup"),
                fn: "SYNO.ActiveBackup.PageVmBackup",
                iconCls: "page-icon-vm-backup"
            }, {
                text: _LABS("app", "page_storage"),
                fn: "SYNO.ActiveBackup.PageStorage",
                iconCls: "page-icon-storage"
            }, {
                text: _LABS("app", "page_restore"),
                fn: "SYNO.ActiveBackup.PageRestore",
                iconCls: "page-icon-restore"
            }, {
                text: _LABS("app", "page_activity"),
                fn: "SYNO.ActiveBackup.PageActivity",
                iconCls: "page-icon-activity"
            }, {
                text: _LABS("app", "page_setting"),
                fn: "SYNO.ActiveBackup.PageSetting",
                iconCls: "page-icon-setting"
            }]
        }, a)])
    },
    onOpen: function() {
        this.callParent(arguments);
        this.mask();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Activation",
            method: "get",
            version: 1,
            scope: this,
            callback: function(c, a) {
                this.unmask();
                if (!c) {
                    SYNO.ActiveBackup.Util.reportError.call(this, a);
                    return
                }
                if (!a.activated) {
                    var b = new SYNO.ActiveBackup.Activation.Wizard({
                        appWin: this,
                        owner: this,
                        requestId: a.serial_number
                    });
                    b.open()
                }
            }
        })
    }
});
Ext.define("SYNO.ActiveBackup.PrivilegeAppInstance", {
    extend: "SYNO.SDS.AppInstance"
});
Ext.define("SYNO.ActiveBackup.Storage.Relink.ShareSelectorStep", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.appWin = a.appWin;
        var b = Ext.apply({
            layout: "card",
            activeItem: "share_list",
            items: [{
                xtype: "container",
                itemId: "share_list",
                layout: {
                    type: "vbox",
                    align: "stretch",
                    pack: "start"
                },
                items: [{
                    xtype: "syno_displayfield",
                    value: _LABS("relink_wizard", "select_repository_desc")
                }, {
                    xtype: "spacer",
                    cls: "desc_spacer",
                    height: 12
                }, {
                    xtype: "container",
                    flex: 1,
                    layout: "fit",
                    items: [this.getListView()]
                }]
            }, {
                xtype: "container",
                itemId: "white"
            }, this.createEmptyPage()]
        }, a);
        this.callParent([b])
    },
    initEvents: function() {
        this.callParent(arguments);
        var a = this.getStore();
        this.mon(a, "beforeload", this.owner.setStatusBusy, this.owner);
        this.mon(a, "load", this.owner.clearStatusBusy, this.owner);
        this.mon(a, "loadexception", this.owner.clearStatusBusy, this.owner);
        this.mon(this, "afterlayout", function() {
            this.layout.setActiveItem("white")
        }, this, {
            single: true
        })
    },
    getStore: function() {
        if (!this.store) {
            this.store = new SYNO.API.JsonStore({
                api: "SYNO.ActiveBackup.Share",
                method: "list",
                version: 1,
                autoLoad: true,
                root: "shares",
                idProperty: "name",
                appWindow: this.appWin,
                listeners: {
                    scope: this,
                    load: function(c, b) {
                        if (0 === b.length) {
                            this.layout.setActiveItem("empty")
                        } else {
                            var a = this.getListView();
                            a.toggleDetail(Ext.fly(a.getNode(b[0])));
                            this.layout.setActiveItem("share_list")
                        }
                    }
                },
                baseParams: {
                    backupable: true,
                    relinkable: true
                },
                fields: [{
                    name: "title",
                    convert: function(b, a) {
                        var c = a.name;
                        if (a.readonly) {
                            c += " (" + _LABS("common", "readonly") + ")"
                        }
                        return c
                    },
                    sortType: Ext.util.Format.uppercase
                }, {
                    name: "status",
                    convert: function(b, a) {
                        if (0 === a.last_backup_time) {
                            return _LABS("component", "task_not_backup")
                        } else {
                            return _LABS("overview", "label_last_bkp_time") + ": " + SYNO.SDS.ActiveBackup.Utils.renderTime(a.last_backup_time)
                        }
                    }
                }, {
                    name: "task_names",
                    convert: function(b, a) {
                        if (!a.task_names) {
                            return "--"
                        }
                        var c = a.task_names.join(", ");
                        return String.format('<span ext:qtip="{0}">{1}</span>', c, c)
                    }
                }, {
                    name: "device_names",
                    convert: function(c, a) {
                        if (!a.device_names) {
                            return "--"
                        }
                        var b = [];
                        if (a.device_names[SYNO.ActiveBackup.BackupType.VM]) {
                            b.push(String.format('{0} <span class="link-font" ext:qtip="{1}">({2})</span> ', _LABS("common", "device_virtual_machine"), a.device_names[SYNO.ActiveBackup.BackupType.VM].join(", "), a.device_names[SYNO.ActiveBackup.BackupType.VM].length))
                        }
                        if (a.device_names[SYNO.ActiveBackup.BackupType.PC]) {
                            b.push(String.format('{0} <span class="link-font" ext:qtip="{1}">({2})</span> ', _LABS("common", "device_personal_computer"), a.device_names[SYNO.ActiveBackup.BackupType.PC].join(", "), a.device_names[SYNO.ActiveBackup.BackupType.PC].length))
                        }
                        if (a.device_names[SYNO.ActiveBackup.BackupType.SERVER]) {
                            b.push(String.format('{0} <span class="link-font" ext:qtip="{1}">({2})</span> ', _LABS("common", "device_physical_server"), a.device_names[SYNO.ActiveBackup.BackupType.SERVER].join(", "), a.device_names[SYNO.ActiveBackup.BackupType.SERVER].length))
                        }
                        if (a.device_names[SYNO.ActiveBackup.BackupType.AGENTLESS]) {
                            b.push(String.format('{0} <span class="link-font" ext:qtip="{1}">({2})</span> ', _LABS("common", "device_file_server"), a.device_names[SYNO.ActiveBackup.BackupType.AGENTLESS].join(", "), a.device_names[SYNO.ActiveBackup.BackupType.AGENTLESS].length))
                        }
                        return b.join(", ")
                    }
                }],
                sortInfo: {
                    field: "title",
                    direction: "ASC"
                }
            })
        }
        return this.store
    },
    getListView: function() {
        if (!this.listView) {
            this.listView = new SYNO.ux.ExpandableListView({
                cls: "syno-admincenter-share-listview",
                multiSelect: false,
                singleSelect: true,
                store: this.getStore(),
                innerTpl: this.getTpl(),
                listeners: {
                    scope: this,
                    selectionchange: function(a, b) {
                        if (0 < b.length) {
                            this.owner.getButton("next").setDisabled(false)
                        } else {
                            this.owner.getButton("next").setDisabled(true)
                        }
                    }
                }
            })
        }
        return this.listView
    },
    createEmptyPage: function() {
        return new SYNO.ux.Panel({
            itemId: "empty",
            anchor: "0 100%",
            border: false,
            cls: "empty_storage",
            layout: {
                type: "vbox",
                align: "center"
            },
            items: [{
                xtype: "spacer",
                flex: 1
            }, {
                border: false,
                html: "<div class=type_storage></div>"
            }, {
                xtype: "spacer",
                height: 20
            }, {
                cls: "text",
                border: false,
                html: _LABS("relink_wizard", "no_storage")
            }, {
                xtype: "spacer",
                flex: 1
            }]
        })
    },
    getTpl: function() {
        var a = new Ext.XTemplate('<div class="share-list">', '<div class="share-attribute"><span class="title">', _LABS("task_info", "source_device"), '</span><span class="content">{device_names}</span></div>', '<div class="share-attribute"><span class="title">', _LABS("task_info", "task_name"), '</span><span class="content clamp">{task_names}</span></div>', "</div>");
        return a
    },
    getParams: function() {
        var b = this.listView.getSelectedItemIds()[0];
        var a = this.getStore();
        return {
            share_name: b,
            readonly: a.getById(b).json.readonly
        }
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Storage.Relink.Wizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    constructor: function(a) {
        var b = [new SYNO.ActiveBackup.Storage.Relink.ShareSelectorStep({
            itemId: "share-selector",
            cls: "share-selector-step",
            appWin: a.appWin,
            nextId: null
        })];
        var c = Ext.apply({
            cls: "syno-activebackup-relink-wizard",
            title: _LABS("relink_wizard", "task_relink_wizard"),
            banner: false,
            closable: false,
            width: 700,
            height: 540,
            steps: b
        }, a);
        this.callParent([c])
    },
    onOpen: function() {
        this.callParent(arguments);
        this.getButton("next").setDisabled(true);
        this.getButton("next").setText(_LABS("action", "relink"))
    },
    onApply: function() {
        var a = this.getParams();
        if (a.readonly) {
            this.getMsgBox().alert("", _LABS("error", "relink_readonly"))
        } else {
            this.getMsgBox().alert("", _LABS("relink_wizard", "relink_note"), this.doRelink, this)
        }
    },
    doRelink: function() {
        var a = this.getParams();
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Share",
            method: "relink",
            version: 1,
            params: a,
            callback: function(c, b) {
                this.clearStatusBusy();
                if (!c) {
                    this.reportError(b);
                    return
                }
                this.close()
            },
            scope: this
        })
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agentless.DeviceSelectPanel", {
    extend: "SYNO.SDS.ActiveBackup.StateGridPanel",
    backup_type: null,
    device: null,
    constructor: function(b) {
        this.backup_type = b.backup_type;

        function f() {
            return new SYNO.API.JsonStore({
                api: "SYNO.ActiveBackup.Device",
                method: "list",
                version: 1,
                appWindow: b.appWin,
                baseParams: {
                    filter: {
                        backup_type: b.backup_type
                    }
                },
                autoLoad: true,
                root: "devices",
                idProperty: "device_id",
                fields: ["device_id", "host_name", "login_user", "host_ip"]
            })
        }

        function a() {
            return new Ext.grid.ColumnModel({
                defaults: {
                    sortable: true
                },
                columns: [{
                    header: _LABS("agentbk", "device_name"),
                    dataIndex: "host_name"
                }, {
                    header: _LABS("agentbk", "user_name"),
                    dataIndex: "login_user"
                }]
            })
        }
        var d = f();

        function e() {
            return new SYNO.ux.TextFilter({
                iconStyle: "filter",
                itemId: "search",
                width: 300,
                localFilter: true,
                localFilterField: ["host_name"],
                blOr: true,
                emptyText: _LABS("agentbk", "search_share"),
                store: d
            })
        }
        var c = Ext.apply({
            store: d,
            colModel: a(),
            sm: new Ext.grid.RowSelectionModel({
                singleSelect: true
            }),
            tbar: [e()],
            viewConfig: {
                markDirty: false
            }
        }, b);
        return this.callParent([c])
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.mon(this.getSelectionModel(), "selectionchange", this.onSelectChange, this);
        this.mon(this.getStore(), "load", this.onStoreLoad, this);
        return a
    },
    onStoreLoad: function() {
        this.getSelectionModel().selectFirstRow()
    },
    onSelectChange: function(a) {
        var b = a.getSelected();
        this.device = (b) ? b.json : this.device;
        this.fireEvent("device_select")
    },
    getNext: function() {
        if (!this.getSelectionModel().getSelected()) {
            this.owner.getMsgBox().alert("", _LABS("warning", "no_select_server"));
            return false
        }
        return this.nextId
    },
    getParams: function() {
        return {
            device: this.device,
            device_id: this.device.device_id
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.BackupPolicyPanel", {
    extend: "SYNO.ux.Panel",
    policy: null,
    activated: null,
    constructor: function(a) {
        this.appWin = a.appWin;
        return this.callParent([Ext.apply(this.createConfig(), a)])
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.onActivate, this)
    },
    onActivate: function() {
        if (!this.activated) {
            var a = this.getComponent("version").getComponent("version");
            this.onClickPolicy(a);
            this.activated = true
        }
    },
    createConfig: function() {
        function a(c, b, d) {
            return {
                xtype: "panel",
                hideBorders: true,
                border: false,
                cls: "icon-container",
                itemId: c,
                items: [{
                    xtype: "panel",
                    hideBorders: true,
                    border: false,
                    itemId: c,
                    cls: "icon-buffer",
                    layout: "fit",
                    items: [{
                        xtype: "panel",
                        hideBorders: true,
                        border: false,
                        cls: b
                    }],
                    listeners: {
                        render: function(e) {
                            e.body.on("click", Ext.createDelegate(function() {
                                this.onClickPolicy(e)
                            }, this))
                        },
                        scope: this
                    }
                }, {
                    xtype: "panel",
                    html: '<div class="title-wrapper">' + d + "</div>"
                }]
            }
        }
        return {
            hideLabel: true,
            hideBorders: true,
            border: false,
            header: false,
            autoFlexcroll: false,
            cls: "data-management",
            layout: "fit",
            items: [{
                xtype: "panel",
                cls: "top-buffer"
            }, {
                xtype: "panel",
                cls: "left-right-buffer"
            }, a.createDelegate(this)("version", "version-icon", _LABS("backup_policy", "version")), {
                xtype: "panel",
                cls: "middle-buffer"
            }, a.createDelegate(this)("mirror", "mirror-icon", _LABS("backup_policy", "mirror")), {
                xtype: "panel",
                cls: "middle-buffer"
            }, a.createDelegate(this)("incremental", "incremental-icon", _LABS("backup_policy", "incremental")), {
                xtype: "panel",
                cls: "left-right-buffer"
            }, {
                xtype: "panel",
                cls: "buttom-buffer",
                itemId: "learn_more",
                html: '<div class="tooltip-wrapper">' + _LABS("create_wizard", "learn_more") + "</div>",
                listeners: {
                    render: function(b) {
                        b.body.on("click", Ext.createDelegate(function(c, d) {
                            this.onClickLearnMore(c, d)
                        }, this))
                    },
                    scope: this
                }
            }]
        }
    },
    onClickLearnMore: function(c, d) {
        var b = Ext.fly(d);
        if (b && b.hasClass("tooltip-wrapper")) {
            var a = new SYNO.ActiveBackup.Agentless.LearnMoreBackupPolicy({
                owner: this.owner,
                title: _LABS("create_wizard", "data_management_header"),
                width: 650,
                height: 495
            });
            a.show()
        }
    },
    onClickPolicy: function(a) {
        if (this.policy) {
            this.policy.removeClass("icon-buffer-selected")
        }
        a.addClass("icon-buffer-selected");
        this.policy = a
    },
    getNext: function() {
        return this.nextId
    },
    getParams: function() {
        var a = {
            incremental: 0,
            mirror: 1,
            version: 2
        };
        return {
            agentless_backup_policy: a[this.policy.itemId]
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.SourceSelectPanel", {
    extend: "SYNO.ux.Panel",
    device: null,
    selective_panel: null,
    activated: null,
    init_remote_session_list: [],
    constructor: function(a) {
        this.appWin = a.appWin;
        this.device = (a.device) ? a.device : this.device;
        this.panel_height = (a.height) ? a.height : 360;
        this.panel_width = (a.width) ? a.width : 660;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            hideLabel: true,
            hideBorders: true,
            border: false,
            header: false,
            autoFlexcroll: false,
            cls: "backup-folder",
            layout: "fit",
            height: this.panel_height,
            width: this.panel_width,
            items: [{
                xtype: "panel",
                hideBorders: true,
                border: false,
                header: false,
                autoFlexcroll: false,
                itemId: "remote_info",
                cls: "remote-info",
                items: [this.getRemoteInfoHeader(), this.getRemoteInfoBody()]
            }]
        };
        return Ext.apply(a, b)
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.activate, this);
        this.mon(this, "setting", this.onSetting, this)
    },
    activate: function() {
        if (this.owner) {
            if (!this.activated) {
                this.device = this.owner.getDevice();
                this.onSetting({
                    remote_sessions_list: this.init_remote_session_list
                })
            }
        } else {
            if (!this.activated) {
                this.onSetting({
                    remote_sessions_list: this.init_remote_session_list
                })
            }
        }
        this.activated = true
    },
    getRemoteInfoHeader: function() {
        this.server_label = new SYNO.ux.DisplayField({
            xtype: "syno_displayfield",
            itemId: "remote_info_header_label",
            cls: "label",
            hideLabel: true,
            value: ""
        });
        return {
            xtype: "panel",
            itemId: "remote_info_header",
            hideBorders: true,
            border: false,
            header: false,
            autoFlexcroll: false,
            cls: "remote-info-header",
            items: [{
                xtype: "panel",
                itemId: "remote_info_header_icon",
                cls: "icon"
            }, this.server_label, {
                xtype: "syno_button",
                itemId: "remote_info_header_btn",
                width: 26,
                height: 24,
                cls: "btn",
                hidden: true,
                iconCls: "refresh_icon",
                hideLabel: true
            }]
        }
    },
    getRemoteInfoBody: function() {
        if (null === this.selective_panel) {
            var a = {
                itemId: "remote_selective_folder",
                height: this.panel_height - 34,
                width: this.panel_width,
                appWin: this.appWin,
                rootVisible: true
            };
            this.selective_panel = new SYNO.SDS.ActiveBackup.Agentless.SelectiveFolderPanel(a)
        }
        return this.selective_panel
    },
    onSetting: function(a) {
        var c = this.device;
        var b = {
            root_text: "/",
            path: "",
            directFn: function(d, e) {
                SYNO.API.Request({
                    api: "SYNO.ActiveBackup.Agentless",
                    version: 1,
                    method: "list_device_folder",
                    params: {
                        path: d.path,
                        remote_connection_info: Ext.apply(c, {
                            is_password_encrypted: true
                        })
                    },
                    callback: function(j, i, h, g) {
                        var f = {};
                        f.status = (j) ? true : false;
                        e(i.childrens, f)
                    }
                })
            }
        };
        this.server_label.setValue(c.host_ip);
        this.init_remote_session_list = a.remote_sessions_list;
        this.selective_panel.setRootVisible((c.agentless_auth_policy === SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD || c.agentless_auth_policy === SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY));
        this.selective_panel.setRemoteFolderFilter(a.remote_sessions_list);
        this.selective_panel.setRootNode(b);
        this.selective_panel.drawPanel()
    },
    validate: function() {
        return true
    },
    validateValue: function() {
        return this.selective_panel.validate()
    },
    getNext: function() {
        if (this.selective_panel.validate()) {
            return this.nextId
        }
        this.appWin.getMsgBox().alert("", _LABS("warning", "no_select_folder"));
        return false
    },
    isDirty: function() {
        var b = false;
        var a = this.getModified();
        Ext.each(Object.keys(a), function(c) {
            if (Ext.isArray(a[c]) && a[c].length !== 0) {
                b = true;
                return false
            }
        });
        return b
    },
    getParams: function() {
        var b = this.getModified();
        var a = [];
        this.selective_panel.getFolderList(a);
        return Ext.apply({
            remote_session_list: a
        }, b)
    },
    getModified: function() {
        var f = [];
        var e = [];
        var c = [];
        var b = [];

        function a(i, h) {
            if (i.length !== h.length) {
                return true
            }
            var g = false;
            Ext.each(i, function(j) {
                var k = false;
                Ext.each(h, function(l) {
                    if (j === l) {
                        k = true;
                        return true
                    }
                });
                if (!k) {
                    g = true;
                    return true
                }
            });
            return g
        }
        this.selective_panel.getFolderList(f);
        var d = this;
        Ext.each(f, function(h) {
            var g = false;
            Ext.each(d.init_remote_session_list, function(i) {
                if (h.selected_path === i.selected_path) {
                    g = true;
                    if (a(h.filtered_paths, i.filtered_paths)) {
                        c.push(h)
                    }
                    return true
                }
            });
            if (!g) {
                e.push(h)
            }
        });
        Ext.each(this.init_remote_session_list, function(h) {
            var g = false;
            Ext.each(f, function(i) {
                if (i.selected_path === h.selected_path) {
                    g = true;
                    return true
                }
            });
            if (!g) {
                b.push(h)
            }
        });
        return {
            added_session_list: e,
            modified_session_list: c,
            removed_session_list: b
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.ScheduleWizard", {
    extend: "SYNO.ux.FormPanel",
    title: null,
    border: false,
    sched_content: null,
    constructor: function(b) {
        var a = this.fillConfig(b);
        this.callParent([a])
    },
    hSwitchType: function(d, c) {
        if (!d) {
            return
        }
        if (d.getGroupValue() === "disable_id") {
            Ext.getCmp(this.week_name_id).setDisabled(true);
            Ext.getCmp(this.date_id).setDisabled(true);
            Ext.getCmp(this.repeat_id).setDisabled(true);
            Ext.getCmp(this.hour_id).setDisabled(true);
            Ext.getCmp(this.min_id).setDisabled(true);
            Ext.getCmp(this.repeat_hour_id).setDisabled(true);
            Ext.getCmp(this.last_work_hour_id).setDisabled(true)
        } else {
            if (d.getGroupValue() === "per_week_id") {
                Ext.getCmp(this.week_name_id).setDisabled(false);
                Ext.getCmp(this.date_id).setDisabled(true);
                Ext.getCmp(this.repeat_id).setDisabled(true);
                Ext.getCmp(this.hour_id).setDisabled(false);
                Ext.getCmp(this.min_id).setDisabled(false);
                Ext.getCmp(this.repeat_hour_id).setDisabled(false);
                Ext.getCmp(this.last_work_hour_id).setDisabled(false)
            } else {
                if (d.getGroupValue() === "by_date_id") {
                    Ext.getCmp(this.week_name_id).setDisabled(true);
                    Ext.getCmp(this.date_id).setDisabled(false);
                    Ext.getCmp(this.repeat_id).setDisabled(false);
                    Ext.getCmp(this.hour_id).setDisabled(false);
                    Ext.getCmp(this.min_id).setDisabled(false);
                    Ext.getCmp(this.repeat_hour_id).setDisabled(false);
                    Ext.getCmp(this.last_work_hour_id).setDisabled(false)
                }
            }
        }
    },
    initEvents: function() {
        this.mon(this, "setting", this.onSetting, this)
    },
    onSetting: function(a) {
        this.sched_content = a.sched_content;
        if (a.sched_content.enable_schedule === "disable") {
            Ext.getCmp(this.disable_id).setValue(true);
            Ext.getCmp(this.per_week_id).setValue(false);
            Ext.getCmp(this.by_date_id).setValue(false)
        } else {
            if (a.sched_content.repeat_type === "Weekly") {
                Ext.getCmp(this.disable_id).setValue(false);
                Ext.getCmp(this.per_week_id).setValue(true);
                Ext.getCmp(this.by_date_id).setValue(false);
                Ext.getCmp(this.repeat_id).setValue("Once")
            } else {
                Ext.getCmp(this.disable_id).setValue(false);
                Ext.getCmp(this.per_week_id).setValue(false);
                Ext.getCmp(this.by_date_id).setValue(true);
                Ext.getCmp(this.repeat_id).setValue(a.sched_content.repeat_type)
            }
        }
        Ext.getCmp(this.week_name_id).setValue(a.sched_content.run_weekday.toString());
        Ext.getCmp(this.date_id).setValue(a.sched_content.date);
        Ext.getCmp(this.hour_id).setValue(a.sched_content.run_hour);
        Ext.getCmp(this.min_id).setValue(a.sched_content.run_min);
        Ext.getCmp(this.repeat_hour_id).setValue(a.sched_content.repeat_hour)
    },
    isDirty: function() {
        var c = false;
        var b = this.getParams().sched_content;
        var a = this.sched_content;
        if (b.enable_schedule === "disable" && b.enable_schedule === a.enable_schedule) {
            return false
        }
        if (JSON.stringify(b.run_weekday) !== JSON.stringify(a.run_weekday)) {
            return true
        }
        delete b.run_weekday;
        Ext.each(Object.keys(b), function(d) {
            if (b[d] !== a[d]) {
                c = true;
                return false
            }
        });
        return c
    },
    getParams: function() {
        var a = {
            enable_schedule: (Ext.getCmp(this.disable_id).getValue()) ? "disable" : "enable",
            repeat_type: (Ext.getCmp(this.per_week_id).getValue()) ? "Weekly" : Ext.getCmp(this.repeat_id).getValue(),
            run_hour: Ext.getCmp(this.hour_id).getValue(),
            run_min: Ext.getCmp(this.min_id).getValue(),
            date: Ext.getCmp(this.date_id).getValue().format("Y/n/j"),
            repeat_hour: Ext.getCmp(this.repeat_hour_id).getValue()
        };
        if (a.repeat_type == "Weekly") {
            a.run_weekday = JSON.parse("[" + Ext.getCmp(this.week_name_id).getValue() + "]")
        } else {
            a.run_weekday = []
        }
        return {
            sched_content: a
        }
    },
    validate: function() {
        return true
    },
    updateRepeatHourStore: function(d, h) {
        var l = Ext.getCmp(this.hour_id).getValue();
        var f = [];
        var a = 0;
        var k = [];
        var c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
        var e = 0,
            b = 0;
        if (h && h === "script") {
            k = [1, 5, 10, 15, 20, 30]
        }
        if (d && d.repeat_min_store_config) {
            k = d.repeat_min_store_config
        }
        if (d && d.repeat_hour_store_config) {
            c = d.repeat_hour_store_config
        }
        this.MinInterval = this.MinInterval ? this.MinInterval : k;
        this.HourInterval = this.HourInterval ? this.HourInterval : c;
        f.push([_T("schedule", "schedule_every_once"), 0]);
        for (e = 0; e < this.MinInterval.length; e++) {
            f.push([String.format(_T("schedule", "every_x_minutes"), this.MinInterval[e]), this.MinInterval[e] * 100])
        }
        for (e = 0; e < 24; e++) {
            if (e > l) {
                a = e - l;
                for (b = 0; b < this.HourInterval.length; b++) {
                    if (a === this.HourInterval[b]) {
                        var g = String.format(_T("schedule", "every_x_hours"), a);
                        f.push([g, a]);
                        break
                    }
                }
            }
        }
        this.repeat_hour_store.loadData(f);
        var m = Ext.getCmp(this.repeat_hour_id).getValue();
        if (m > a) {
            Ext.getCmp(this.repeat_hour_id).setValue(0)
        }
    },
    updateLastWorkTimeStore: function() {
        var j = Ext.getCmp(this.hour_id).getValue();
        var h = Ext.getCmp(this.min_id).getValue();
        var d = parseInt(Ext.getCmp(this.repeat_hour_id).getValue() / 100, 10);
        var b = Ext.getCmp(this.repeat_hour_id).getValue() % 100;
        var e = Ext.getCmp(this.last_work_hour_id).getValue();
        var a = -1;
        var f = [];
        if (d > 0) {
            if (h !== 0) {
                Ext.getCmp(this.min_id).setValue(0);
                h = Ext.getCmp(this.min_id).getValue()
            }
            b = 1
        }
        for (var c = j; c < 24; c += b) {
            var g = String.leftPad(String(c), 2, "0") + ":";
            if (d > 0) {
                g += String.leftPad(String(60 - d), 2, "0")
            } else {
                g += String.leftPad(String(h), 2, "0")
            }
            f.push([g, c]);
            if (c === e) {
                a = c
            }
            if (b === 0) {
                break
            }
        }
        this.last_work_hour_store.loadData(f);
        if (-1 === a) {
            Ext.getCmp(this.last_work_hour_id).setValue(f[0][1])
        } else {
            Ext.getCmp(this.last_work_hour_id).setValue(a)
        }
        if (d > 0) {
            Ext.getCmp(this.last_work_hour_id).setValue(f[0][1])
        }
    },
    fillConfig: function(a) {
        var d;
        var k = this;
        var e;
        var f = [];
        var c = [];
        for (d = 0; d < 24; ++d) {
            f.push([String.leftPad(String(d), 2, "0"), d])
        }
        var g = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: f
        });
        this.addManagedComponent(g);
        for (d = 0; d < 60; ++d) {
            c.push([String.leftPad(String(d), 2, "0"), d])
        }
        var j = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: c
        });
        this.addManagedComponent(j);
        var h = new Ext.data.ArrayStore({
            fields: ["display", "value"],
            data: [
                [_T("schedule", "no_repeat"), "Once"],
                [_T("schedule", "repeat_monthly"), "Monthly"],
                [_T("schedule", "repeat_yearly"), "Yearly"],
                [_T("schedule", "repeat_half_year"), "HalfYearly"]
            ]
        });
        this.addManagedComponent(h);
        this.repeat_hour_store = new Ext.data.ArrayStore({
            fields: ["display", "value"]
        });
        this.repeat_hour_store.loadData([
            [_LABS("schedule", "run_once"), 0],
            [_LABS("schedule", "run_every_hour"), 1]
        ]);
        this.addManagedComponent(this.repeat_hour_store);
        this.last_work_hour_store = new Ext.data.ArrayStore({
            fields: ["display", "value"]
        });
        this.addManagedComponent(this.last_work_hour_store);
        if (true === a.needTitle) {
            this.title = _T("common", "schedule")
        }
        if (true === a.needBorder) {
            this.border = true
        }
        if (a.isWizard) {
            e = {
                xtype: "syno_compositefield",
                indent: 1,
                fieldLabel: _T("schedule", "run_on_days"),
                items: [{
                    xtype: "syno_schedulefield",
                    id: this.week_name_id = Ext.id(),
                    hideLabel: true,
                    allowBlank: false,
                    editable: false,
                    width: 295
                }]
            }
        } else {
            e = {
                xtype: "syno_schedulefield",
                id: this.week_name_id = Ext.id(),
                hideLabel: true,
                allowBlank: false,
                editable: false,
                width: 220,
                indent: 1
            }
        }
        var b = {
            height: 70,
            title: this.title,
            border: this.border,
            cls: "syno-activebackup-edit-schedule",
            labelWidth: 300,
            fieldWidth: 300,
            items: [{
                xtype: "syno_radio",
                hidden: a.isWizard,
                id: this.disable_id = Ext.id(),
                boxLabel: _LABS("settings_tab_panel", "disable_schedule"),
                name: "date",
                width: 300,
                inputValue: "disable_id",
                hideLabel: true,
                scope: this,
                listeners: {
                    check: k.hSwitchType.createDelegate(this)
                }
            }, {
                xtype: "syno_radio",
                hidden: a.isWizard,
                id: this.per_week_id = Ext.id(),
                boxLabel: _T("schedule", "run_on_days"),
                name: "date",
                width: 300,
                inputValue: "per_week_id",
                hideLabel: true,
                scope: this,
                listeners: {
                    check: k.hSwitchType.createDelegate(this)
                }
            }, e, {
                xtype: "syno_radio",
                hidden: a.isWizard,
                name: "date",
                hideLabel: true,
                id: this.by_date_id = Ext.id(),
                boxLabel: _T("schedule", "by_date"),
                width: 300,
                inputValue: "by_date_id",
                listeners: {
                    check: k.hSwitchType.createDelegate(this)
                }
            }, {
                xtype: "syno_datefield",
                hidden: a.isWizard,
                fieldLabel: "",
                id: this.date_id = Ext.id(),
                width: 220,
                indent: 1,
                format: "Y/n/j",
                hideLabel: true,
                allowBlank: false,
                editable: false,
                value: new Date().format("Y/m/d"),
                maxValue: "2037/12/31",
                minValue: "2005/1/1"
            }, {
                xtype: "syno_combobox",
                hidden: a.isWizard,
                store: h,
                hideLabel: true,
                value: "Once",
                indent: 1,
                displayField: "display",
                valueField: "value",
                id: this.repeat_id = Ext.id(),
                triggerAction: "all",
                width: 220,
                mode: "local",
                editable: false
            }, {
                xtype: "syno_fieldset",
                title: _T("time", "time_time"),
                hidden: a.isWizard,
                labelWidth: 150
            }, {
                xtype: "syno_compositefield",
                indent: (a.isWizard) ? 1 : 0,
                fieldLabel: _T("schedule", "run_time_first"),
                items: [{
                    xtype: "syno_combobox",
                    store: g,
                    displayField: "display",
                    id: this.hour_id = Ext.id(),
                    valueField: "value",
                    triggerAction: "all",
                    mode: "local",
                    width: (a.isWizard) ? 138 : 93,
                    editable: false,
                    listeners: {
                        select: {
                            fn: function() {
                                this.updateLastWorkTimeStore()
                            },
                            scope: this
                        }
                    }
                }, {
                    xtype: "syno_displayfield",
                    value: ":",
                    width: (a.isWizard) ? 9 : 5,
                    tabindex: -1
                }, {
                    xtype: "syno_combobox",
                    store: j,
                    displayField: "display",
                    valueField: "value",
                    id: this.min_id = Ext.id(),
                    triggerAction: "all",
                    width: (a.isWizard) ? 138 : 93,
                    mode: "local",
                    editable: false,
                    listeners: {
                        select: {
                            fn: function() {
                                this.updateLastWorkTimeStore()
                            },
                            scope: this
                        }
                    }
                }]
            }, {
                xtype: "syno_combobox",
                hidden: a.isWizard,
                store: this.repeat_hour_store,
                value: 0,
                fieldLabel: _T("schedule", "schedule_every"),
                labelStyle: "width: 150px;",
                displayField: "display",
                valueField: "value",
                id: this.repeat_hour_id = Ext.id(),
                triggerAction: "all",
                width: 200,
                mode: "local",
                editable: false,
                listeners: {
                    select: {
                        fn: function() {
                            this.updateLastWorkTimeStore()
                        },
                        scope: this
                    }
                }
            }, {
                xtype: "syno_combobox",
                hidden: !(!a.isWizard && a.isLicensed),
                store: this.last_work_hour_store,
                value: 0,
                labelStyle: "width: 150px;",
                fieldLabel: _T("schedule", "run_time_last"),
                displayField: "display",
                valueField: "value",
                id: this.last_work_hour_id = Ext.id(),
                triggerAction: "all",
                width: 200,
                mode: "local",
                editable: false
            }]
        };
        Ext.apply(b, a);
        return b
    },
    isValid: function() {
        return true
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.TaskSettingPanel", {
    extend: "SYNO.ux.Panel",
    device: null,
    advanced_setting: null,
    activated: null,
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.task_name = new SYNO.ux.TextField({
            xtype: "syno_textfield",
            itemId: "task_name",
            fieldLabel: _LABS("task_info", "task_name"),
            allowBlank: false,
            maxLength: 64,
            vtype: "taskname"
        });
        this.destination = new SYNO.ux.TextField({
            xtype: "syno_textfield",
            itemId: "sync_folder_path",
            cls: "destination",
            allowBlank: false,
            region: "center",
            margins: "0 3 3 0",
            readOnly: true,
            value: ""
        });
        this.enable_volume_shadow_copy = new SYNO.ux.Checkbox({
            itemId: "enable_volume_shadow_copy",
            boxLabel: _LABS("task_info", "enable_volume_shadow_copy"),
            checked: false,
            initEvents: function() {
                SYNO.SDS.Utils.AddTip(this.getEl(), _LABS("tool_tip", "volulme_shadow_copy_desc"))
            }
        });
        this.enable_schedule = new SYNO.ux.Checkbox({
            xtype: "syno_checkbox",
            itemId: "enable_schedule",
            boxLabel: _LABS("task_info", "enable_schedule"),
            checked: false,
            listeners: {
                check: this._onEnableScheduleCheck,
                scope: this
            }
        });
        this.destination_tooltip = new SYNO.ux.DisplayField({
            xtype: "syno_displayfield",
            itemId: "destination_tooltip",
            width: 1,
            value: ""
        });
        this.formpanel = new SYNO.ux.FormPanel({
            border: false,
            frame: false,
            region: "center",
            itemId: "formpanel",
            cls: "formpanel",
            labelWidth: 300,
            fieldWidth: 295,
            autoFlexcroll: false,
            items: [this.task_name, {
                xtype: "syno_compositefield",
                itemId: "container_sync_folder_path",
                fieldLabel: _LABS("task_info", "local_path"),
                width: 295 + 30,
                items: [{
                    xtype: "syno_panel",
                    layout: "border",
                    width: 295,
                    height: 31,
                    margins: "-3 0 0 0",
                    border: false,
                    itemId: "panel",
                    items: [this.destination, {
                        xtype: "syno_button",
                        itemId: "sync_folder_path_btn",
                        region: "east",
                        margins: "3 0 0 0",
                        text: _LABS("btn", "browse"),
                        handler: this.onClickChooseDestination,
                        scope: this
                    }]
                }, this.destination_tooltip]
            }, this.enable_volume_shadow_copy, this.enable_schedule]
        });
        this.formpanel_optional = new SYNO.ux.Panel({
            hideBorders: true,
            disabled: true,
            height: 68,
            width: 615,
            itemId: "formpanel_optional",
            border: false,
            region: "south",
            items: [new SYNO.ActiveBackup.Agentless.ScheduleWizard({
                itemId: "schedule_panel",
                isWizard: true,
                isLicensed: false,
                owner: this
            })]
        });
        this.advanced_setting_btn = new SYNO.ux.Button({
            text: _LABS("common", "advance_setting"),
            xtype: "syno_button",
            cls: "btn_normal",
            itemId: "advance_setting",
            listeners: {
                click: this.onClickAdvancedSetting,
                scope: this
            }
        });
        var a = {
            hideBorders: true,
            border: false,
            autoFlexcroll: false,
            cls: "task-settings",
            items: [{
                xtype: "syno_panel",
                itemId: "panel",
                items: [this.formpanel, this.formpanel_optional, this.advanced_setting_btn]
            }]
        };
        return Ext.apply(a, b)
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.onActivate)
    },
    onActivate: function() {
        if (this.activated) {
            return
        }
        this.device = this.owner.getDevice();
        this.enable_volume_shadow_copy.setVisible(this.device.os_name == "smb");
        this.formpanel_optional.getComponent("schedule_panel").fireEvent("setting", {
            sched_content: {
                enable_schedule: "enable",
                run_weekday: [0, 1, 2, 3, 4, 5, 6],
                date: new Date().format("Y/m/d"),
                repeat_type: "Weekly",
                repeat_hour: 0,
                run_hour: 0,
                run_min: 0
            }
        });
        this.enable_schedule.setValue(false);
        this.enable_volume_shadow_copy.setValue(false);
        this.task_name.reset();
        this.destination.reset();
        this.advanced_setting = {
            file_filter: {
                black_list: {
                    extensions: [],
                    file_names: [],
                    pattern: []
                },
                customized: []
            },
            agentless_enable_block_transfer: false,
            enable_compress_transfer: false,
            bandwidth: 0
        };
        SYNO.SDS.Utils.AddTip(this.destination_tooltip.getEl(), _LABS("agentlessbk", "bkp_dest_note"));
        this.activated = true
    },
    getNext: function() {
        if (!this.task_name.validate() || !this.destination.validate()) {
            this.owner.getMsgBox().alert(_LABS("app", "package_name"), _T("common", "forminvalid"));
            return
        }
        this.owner.setStatusBusy();
        var a = this.owner.getParams();
        Ext.apply(a, {
            device: this.device
        });
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "test_task_settings",
            version: 1,
            params: a,
            callback: function(f, e, d, b) {
                this.owner.clearStatusBusy();
                if (f) {
                    this.nextId = (d.agentless_backup_policy === SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION) ? "task_retention" : "task_summary";
                    this.owner.goNext(this.nextId);
                    return
                }
                var c = SYNO.ActiveBackup.Util.parseError(e);
                if (e.errors.params.not_support_vss_shares) {
                    c += "</br>";
                    c += '<span style="color: navy;">' + Ext.util.Format.htmlEncode(e.errors.params.not_support_vss_shares.join(", ")) + "</span"
                }
                this.owner.getMsgBox().alert("", c)
            },
            scope: this
        });
        return false
    },
    getParams: function() {
        var e = this.destination.getValue();
        var c = e.indexOf("/", 1);
        var a;
        var d;
        if (c == -1) {
            a = e.substr(1);
            d = ""
        } else {
            a = e.substr(1, c - 1);
            d = e.substr(c + 1)
        }
        var b = this.formpanel_optional.getComponent("schedule_panel").getParams();
        if (this.enable_schedule.getValue()) {
            b.sched_content.enable_schedule = "enable"
        } else {
            b.sched_content.enable_schedule = "disable";
            b.sched_content.repeat_type = "Once";
            delete b.sched_content.run_weekday
        }
        return Ext.apply({
            task_name: this.task_name.getValue(),
            share_name: a,
            target_dir: d,
            agentless_enable_dedup: false,
            agentless_enable_windows_vss: this.enable_volume_shadow_copy.getValue()
        }, this.advanced_setting, b)
    },
    onClickChooseDestination: function() {
        var a = new SYNO.SDS.Utils.FileChooser.Chooser({
            owner: this.owner,
            enumCluster: true,
            needrw: false,
            usage: {
                type: "chooseDir"
            },
            title: _T("common", "choose"),
            folderToolbar: true,
            listeners: {
                choose: function(c, b) {
                    c.close();
                    this.destination.setValue(b.path)
                },
                scope: this
            }
        });
        a.show()
    },
    _onEnableScheduleCheck: function(b, a) {
        this.formpanel_optional.setDisabled(!a)
    },
    onClickAdvancedSetting: function() {
        var b = Ext.createDelegate(this.onApplyAdvancedSetting, this);
        var a = new SYNO.ActiveBackup.Agentless.AdvancedSettingPanel({
            appWin: this.appWin,
            owner: this.owner,
            device: this.device,
            defaultsettings: this.advanced_setting,
            width: 560,
            height: 530,
            onApply: b,
            onCancel: null
        });
        a.show()
    },
    onApplyAdvancedSetting: function(a) {
        Ext.apply(this.advanced_setting, a)
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.TaskSummaryPanel", {
    extend: "SYNO.ActiveBackup.TaskSummaryPanel",
    activate: function() {
        var d = Ext.apply(this.owner.getParams(), {
            device: this.owner.getDevice()
        });
        var a = (d.device.os_name == "rsync") ? 1 : 2;
        var c = this.getItemConfig(d);
        var b = [];
        Ext.each(c, function(e) {
            if (e.show & a) {
                b.push({
                    item: e.label,
                    value: e.getValue(d)
                })
            }
        });
        this.getStore().loadData(b)
    },
    getItemConfig: function(c) {
        var b = {
            rsync: 1,
            smb: 2,
            both: 1 ^ 2
        };
        var a = [{
            label: _LABS("task_info", "backup_policy"),
            show: b.both,
            getValue: function(d) {
                switch (d.agentless_backup_policy) {
                    case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.INCREMENTAL:
                        return _LABS("backup_policy", "incremental");
                    case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.MIRROR:
                        return _LABS("backup_policy", "mirror");
                    case SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION:
                        return _LABS("backup_policy", "version")
                }
            }
        }, {
            label: _LABS("task_info", "local_path"),
            show: b.both,
            getValue: function(d) {
                if (d.target_dir) {
                    return "/" + d.share_name + "/" + d.target_dir
                } else {
                    return "/" + d.share_name
                }
            }
        }, {
            label: _LABS("task_info", "task_name"),
            show: b.both,
            getValue: function(d) {
                return d.task_name
            }
        }, {
            label: _LABS("task_info", "bandwidth"),
            show: b.rsync,
            getValue: function(d) {
                return d.bandwidth
            }
        }, {
            label: _LABS("task_info", "enable_compress"),
            show: b.rsync,
            getValue: function(d) {
                return (d.enable_compress_transfer) ? _LABS("common", "enable") : _LABS("common", "disable")
            }
        }, {
            label: _LABS("task_info", "enable_block_transfer"),
            show: b.rsync,
            getValue: function(d) {
                return (d.agentless_enable_block_transfer) ? _LABS("common", "enable") : _LABS("common", "disable")
            }
        }, {
            label: _LABS("task_info", "enable_volume_shadow_copy"),
            show: b.smb,
            getValue: function(d) {
                return (d.agentless_enable_windows_vss) ? _LABS("common", "enable") : _LABS("common", "disable")
            }
        }, {
            label: _LABS("task_info", "enable_schedule"),
            show: b.both,
            getValue: function(d) {
                return (d.sched_content.enable_schedule === "enable") ? _LABS("common", "enable") : _LABS("common", "disable")
            }
        }];
        if (c.agentless_backup_policy == SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION) {
            a.push({
                label: _LABS("retention", "enable_backup_retention"),
                show: b.both,
                getValue: function(d) {
                    return (d.retention_policy.keep_all) ? _LABS("common", "disable") : _LABS("common", "enable")
                }
            })
        }
        return a
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.TaskCreateWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    device: null,
    backup_type: null,
    stepId: null,
    constructor: function(a) {
        this.backup_type = a.backup_type;
        this.device = (a.device) ? a.device : null;

        function d() {
            var e = [];
            if (!a.device) {
                e.push(new SYNO.ActiveBackup.Agentless.DeviceSelectPanel({
                    headline: _LABS("agentlessbk", "device_select_headline"),
                    description: _LABS("agentlessbk", "device_select_desc"),
                    appWin: a.appWin,
                    owner: a.owner,
                    backup_type: a.backup_type,
                    itemId: "device_select",
                    nextId: "backup_policy"
                }))
            }
            e = e.concat([new SYNO.ActiveBackup.Agentless.BackupPolicyPanel({
                headline: _LABS("agentlessbk", "backup_policy_headline"),
                description: _LABS("agentlessbk", "backup_policy_desc"),
                appWin: a.appWin,
                itemId: "backup_policy",
                nextId: "source_select"
            }), new SYNO.ActiveBackup.Agentless.SourceSelectPanel({
                headline: _LABS("agentlessbk", "source_select_headline"),
                description: _LABS("agentlessbk", "source_select_desc"),
                appWin: a.appWin,
                itemId: "source_select",
                nextId: "task_setting",
                height: 356
            }), new SYNO.ActiveBackup.Agentless.TaskSettingPanel({
                headline: _LABS("agentlessbk", "task_setting_headline"),
                description: _LABS("agentlessbk", "task_setting_desc"),
                appWin: a.appWin,
                itemId: "task_setting",
                nextId: "task_retention"
            }), new SYNO.ActiveBackup.RetentionEditPanel({
                headline: _LABS("agentbk", "select_retention_policy_headline"),
                description: _LABS("agentbk", "select_retention_policy_desc"),
                appWin: a.appWin,
                itemId: "task_retention",
                nextId: "task_summary"
            }), new SYNO.ActiveBackup.Agentless.TaskSummaryPanel({
                headline: _LABS("create_wizard", "summary_header"),
                description: _LABS("create_wizard", "summary_description"),
                appWin: a.appWin,
                owner: a.owner,
                itemId: "task_summary",
                nextId: null
            })]);
            return e
        }
        var b = d();
        this.stepId = b[0].itemId;
        var c = Ext.apply({
            title: _LABS("agentlessbk", "task_create_wizard"),
            cls: "syno-vmbk-task-create-wizard",
            banner: true,
            width: 700,
            height: 580,
            steps: b
        }, a);
        return this.callParent([c])
    },
    onActivate: function() {
        this.callParent(arguments);
        var a = this.getComponent("steps").getComponent("device_select");
        if (a) {
            a.mon(a, "device_select", this._onDeviceSelect, this)
        }
    },
    _onDeviceSelect: function() {
        Ext.each(this.getComponent("steps").items.items, function(a) {
            a.activated = false;
            if (Ext.isFunction(a.resetValue)) {
                a.resetValue()
            }
        }, this)
    },
    getDevice: function() {
        try {
            return this.getStep("device_select").getParams().device
        } catch (a) {
            return this.device
        }
    },
    onApply: function() {
        var a = this.getParams();
        a.backup_type = this.backup_type;
        a.device_id = (this.device) ? this.device.device_id : a.device_id;
        if (a.agentless_backup_policy !== 2) {
            a.retention_policy = {
                keep_all: true
            }
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "create_agentless",
            version: 1,
            params: a,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onApplyDone: function(d, a, c, b) {
        this.clearStatusBusy();
        if (!d) {
            this.reportError(a);
            return
        }
        this.getMsgBox().confirm(this.title, _LABS("warning", "confirm_instant_backup"), function(e) {
            if (e === "yes") {
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.Task",
                    method: "backup",
                    version: 1,
                    params: {
                        task_ids: [a.task_id]
                    },
                    callback: function(i, f, h, g) {
                        if (!i) {
                            this.reportError(f, "alert", this.close, this);
                            return
                        }
                        this.close()
                    },
                    scope: this
                })
            } else {
                this.close()
            }
        }, this);
        this.appWin.selectTab("synoabk-task-view")
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agentless.MachineTypePanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.appWin = a.appWin;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            items: [{
                xtype: "syno_radio",
                name: "server_type",
                itemId: "server_type_smb",
                checked: true,
                boxLabel: _LABS("server_type", "smb"),
                inputValue: "smb"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _LABS("agentlessbk", "smb_description")
            }, {
                xtype: "syno_radio",
                name: "server_type",
                itemId: "server_type_rsync",
                checked: false,
                boxLabel: _LABS("server_type", "rsync"),
                inputValue: "rsync"
            }, {
                xtype: "syno_displayfield",
                indent: 1,
                value: _LABS("agentlessbk", "rsync_description")
            }]
        };
        return Ext.apply(a, b)
    },
    validate: function() {
        var a = this.getComponent("server_type_smb").getGroupValue();
        if (a) {
            this.owner.getStep("remote_infomation").setOSName(a);
            return true
        }
        return false
    },
    activate: function() {},
    validateValue: function() {
        return true
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.RemoteInfomationPanel", {
    extend: "SYNO.ux.Panel",
    remote_info: {
        os_name: "smb",
        host_name: "",
        host_ip: "",
        host_port: 0,
        login_user: "",
        login_password: "",
        agentless_auth_policy: SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD,
        ssh_key_file_path: "",
        is_password_encrypted: false
    },
    constructor: function(a) {
        this.appWin = a.appWin;
        this.callParent([this.fillConfig(a)]);
        Ext.getCmp(this.rsync_connection_method_id).addListener("select", Ext.createDelegate(this.onSelectRsyncConnectionMethod, this));
        Ext.getCmp(this.rsync_auth_policy_id).addListener("select", Ext.createDelegate(this.onSelectRsyncAuthPolicy, this))
    },
    fillConfig: function(b) {
        var c = new SYNO.SDS.Utils.FormPanel({
            itemId: "form_panel",
            fileUpload: true,
            webapi: {
                api: "SYNO.ActiveBackup.Agentless",
                version: 1,
                method: "upload_ssh_key"
            },
            border: false,
            frame: false,
            labelWidth: 300,
            fieldWidth: 347,
            height: 324,
            autoFlexcroll: true,
            items: [{
                xtype: "syno_textfield",
                regex: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-\_]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-\_]*[A-Za-z0-9\-\_])(\/.[^\/]*)*$/,
                regexText: _LABS("error", "error_no_address_or_hostname"),
                id: this.server_address_id = Ext.id(),
                itemId: "server_address",
                fieldLabel: _LABS("task_info", "server_address"),
                allowBlank: false,
                width: 341
            }, {
                xtype: "syno_combobox",
                id: this.rsync_connection_method_id = Ext.id(),
                itemId: "rsync_connection_method",
                fieldLabel: _LABS("task_info", "connection_method"),
                allowBlank: false,
                scope: this,
                displayField: "display",
                valueField: "value",
                store: new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["shell", _LABS("task_info", "rsync_shell_mode")],
                        ["module_ssh", _LABS("task_info", "rsync_module_mode_ssh")],
                        ["module", _LABS("task_info", "rsync_module_mode")]
                    ]
                }),
                width: 341
            }, {
                xtype: "syno_numberfield",
                id: this.port_id = Ext.id(),
                itemId: "port",
                fieldLabel: _LABS("task_info", "port"),
                regex: /^\d+$/,
                allowBlank: false,
                allowNegative: false,
                maxlength: 5,
                minValue: 0,
                maxValue: 65535,
                width: 341
            }, {
                xtype: "syno_textfield",
                id: this.account_id = Ext.id(),
                itemId: "account",
                fieldLabel: _LABS("task_info", "account"),
                regex: /^[^\ ](.*[^\ ])*$/,
                regexText: _T("user", "error_badname"),
                allowBlank: false,
                maxLength: 64,
                width: 341
            }, {
                xtype: "syno_combobox",
                id: this.rsync_auth_policy_id = Ext.id(),
                itemId: "rsync_auth_policy",
                fieldLabel: _LABS("task_info", "agentless_auth_policy"),
                allowBlank: false,
                scope: this,
                displayField: "display",
                valueField: "value",
                store: new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["password", _LABS("create_wizard", "auth_by_password")],
                        ["ssh_key", _LABS("create_wizard", "auth_by_ssh_key")]
                    ]
                }),
                width: 341
            }, {
                xtype: "syno_compositefield",
                id: this.ssh_key_id = Ext.id(),
                itemId: "ssh_key",
                hideLabel: true,
                items: [{
                    xtype: "syno_panel",
                    width: 300,
                    height: 28,
                    padding: 0,
                    border: false,
                    items: [{
                        xtype: "syno_displayfield",
                        id: this.ssh_key_label_id = Ext.id(),
                        itemId: "ssh_key_label",
                        height: 28,
                        style: "padding: 0px",
                        value: _LABS("task_info", "ssh_key") + ":"
                    }]
                }, {
                    xtype: "syno_filebutton",
                    name: "ssh_key",
                    id: this.ssh_key_upload_button_id = Ext.id(),
                    itemId: "ssh_key_upload_button",
                    allowBlank: true,
                    buttonText: _LABS("common", "upload"),
                    buttonOnly: false,
                    textConfig: {
                        width: 228
                    },
                    buttonConfig: {
                        width: 104
                    }
                }]
            }, {
                xtype: "syno_textfield",
                id: this.password_id = Ext.id(),
                itemId: "password",
                fieldLabel: _LABS("task_info", "password"),
                allowBlank: false,
                textType: "password",
                maxLength: 64,
                width: 341
            }, {
                xtype: "box",
                id: this.protocol_help_id = Ext.id(),
                itemId: "protocol_help",
                tpl: '<div class="remote-information protocol_help"><div class="content">{description}</div></div>'
            }]
        });
        var a = {
            hideBorders: true,
            border: false,
            cls: "remote-information",
            items: [c]
        };
        return Ext.apply(a, b)
    },
    activate: function() {
        this.setAllComponentInit()
    },
    setAllComponentInit: function() {
        var a;
        Ext.getCmp(this.server_address_id).reset();
        Ext.getCmp(this.account_id).reset();
        Ext.getCmp(this.password_id).reset();
        Ext.getCmp(this.rsync_connection_method_id).setValue("shell");
        Ext.getCmp(this.rsync_auth_policy_id).setValue("password");
        Ext.getCmp(this.ssh_key_upload_button_id).reset();
        if (!this.activated) {
            SYNO.SDS.Utils.AddTip(Ext.getCmp(this.ssh_key_label_id).getEl(), _LABS("tool_tip", "ssh_key_no_passphrase_desc"));
            this.activated = true
        }
        if (this.remote_info.os_name === "smb") {
            Ext.getCmp(this.port_id).setValue(0);
            Ext.getCmp(this.password_id).setVisible(true);
            Ext.getCmp(this.password_id).reset();
            Ext.getCmp(this.port_id).setVisible(false);
            Ext.getCmp(this.port_id).setDisabled(false);
            Ext.getCmp(this.rsync_connection_method_id).setVisible(false);
            Ext.getCmp(this.rsync_auth_policy_id).setVisible(false);
            Ext.getCmp(this.ssh_key_id).setVisible(false);
            a = _LABS("task_info", "cifs_description")
        } else {
            Ext.getCmp(this.port_id).setValue(22);
            Ext.getCmp(this.port_id).setVisible(true);
            Ext.getCmp(this.port_id).setDisabled(false);
            Ext.getCmp(this.rsync_connection_method_id).setVisible(true);
            Ext.getCmp(this.rsync_auth_policy_id).setVisible(true);
            this.setAuthComponentByAuthPolicyValue("password");
            a = _LABS("task_info", "rsync_description")
        }
        Ext.getCmp(this.protocol_help_id).update({
            description: a
        })
    },
    onSelectRsyncConnectionMethod: function(h, b, d, e) {
        var g = b.data.value;
        var c = (g == "module") ? 873 : 22;
        var f = "password";
        var a = [];
        Ext.getCmp(this.port_id).setValue(c);
        if (g == "module") {
            a = new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    ["password", _LABS("create_wizard", "auth_by_password")]
                ]
            })
        } else {
            a = new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    ["password", _LABS("create_wizard", "auth_by_password")],
                    ["ssh_key", _LABS("task_info", "ssh_key")]
                ]
            })
        }
        this.setAuthComponentByAuthPolicyValue("password");
        Ext.getCmp(this.rsync_auth_policy_id).bindStore(a);
        Ext.getCmp(this.rsync_auth_policy_id).setValue(f)
    },
    onSelectRsyncAuthPolicy: function(d, a, b, c) {
        this.setAuthComponentByAuthPolicyValue(a.data.value)
    },
    setAuthComponentByAuthPolicyValue: function(a) {
        if (a == "password") {
            Ext.getCmp(this.ssh_key_id).setVisible(false);
            Ext.getCmp(this.password_id).setVisible(true);
            Ext.getCmp(this.password_id).reset();
            Ext.getCmp(this.password_id).allowBlank = false
        } else {
            Ext.getCmp(this.ssh_key_upload_button_id).reset();
            Ext.getCmp(this.ssh_key_id).setVisible(true);
            Ext.getCmp(this.password_id).setVisible(false);
            Ext.getCmp(this.password_id).allowBlank = true
        }
    },
    setOSName: function(a) {
        this.remote_info.os_name = a
    },
    getAuthPolicy: function() {
        var b = Ext.getCmp(this.rsync_connection_method_id).getValue();
        var a = Ext.getCmp(this.rsync_auth_policy_id).getValue();
        if (b === "shell") {
            if (a === "password") {
                return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD
            } else {
                if (a === "ssh_key") {
                    return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY
                }
            }
        } else {
            if (b === "module_ssh") {
                if (a === "password") {
                    return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_PASSWORD
                } else {
                    if (a === "ssh_key") {
                        return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_KEY
                    }
                }
            } else {
                if (b === "module") {
                    return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_PASSWORD
                }
            }
        }
        return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD
    },
    getAllComponentValue: function() {
        this.remote_info.host_name = Ext.getCmp(this.server_address_id).getValue().replace(/ |\t/g, "");
        this.remote_info.host_ip = Ext.getCmp(this.server_address_id).getValue().replace(/ |\t/g, "");
        this.remote_info.login_user = Ext.getCmp(this.account_id).getValue();
        this.remote_info.login_password = Ext.getCmp(this.password_id).getValue();
        this.remote_info.host_port = Ext.getCmp(this.port_id).getValue();
        this.remote_info.agentless_auth_policy = this.getAuthPolicy()
    },
    validateValue: function() {
        if (!Ext.getCmp(this.server_address_id).validate()) {
            this.owner.getMsgBox().alert("", _LABS("error", "error_no_address_or_hostname"));
            return false
        }
        if (!Ext.getCmp(this.account_id).validate()) {
            this.owner.getMsgBox().alert("", _T("common", "forminvalid"));
            return false
        }
        if (this.remote_info.os_name === "smb") {
            if (!Ext.getCmp(this.password_id).validate()) {
                this.owner.getMsgBox().alert("", _T("common", "forminvalid"));
                return false
            }
        } else {
            if (!Ext.getCmp(this.port_id).validate()) {
                this.owner.getMsgBox().alert("", _T("common", "forminvalid"));
                return false
            }
            var a = Ext.getCmp(this.server_address_id).getValue();
            var c = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-\_]*[a-zA-Z0-9\-\_])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-\_]*[A-Za-z0-9\-\_])$/;
            if (!c.test(a)) {
                this.owner.getMsgBox().alert("", _T("common", "forminvalid"));
                return false
            }
            var b = this.getAuthPolicy();
            if (b === SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_KEY || b === SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY) {
                var d = Ext.getCmp(this.ssh_key_upload_button_id).getValue();
                if (d.length === 0) {
                    this.owner.getMsgBox().alert("", _LABS("error", "fs_not_select_ssh_key"));
                    return false
                }
            } else {
                if (!Ext.getCmp(this.password_id).validate()) {
                    this.owner.getMsgBox().alert("", _T("common", "forminvalid"));
                    return false
                }
            }
        }
        return true
    },
    getParams: function() {
        this.getAllComponentValue();
        return {
            remote_connection_info: this.remote_info
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.DeviceCreateWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    constructor: function(a) {
        function c(e) {
            var d = [new SYNO.ActiveBackup.Agentless.MachineTypePanel({
                headline: _LABS("create_wizard", "server_type_header"),
                description: _LABS("create_wizard", "server_type_description"),
                appWin: a.appWin,
                itemId: "machine_type",
                nextId: "remote_infomation"
            }), new SYNO.ActiveBackup.Agentless.RemoteInfomationPanel({
                headline: _LABS("create_wizard", "remote_information_header"),
                description: _LABS("create_wizard", "remote_information_description"),
                appWin: a.appWin,
                itemId: "remote_infomation",
                nextId: null
            })];
            return d
        }
        var b = Ext.apply({
            title: _LABS("agentlessbk", "add_device_title"),
            banner: true,
            width: 715,
            height: 550,
            steps: c()
        }, a);
        return this.callParent([b])
    },
    onCreateTask: Ext.emptyFn,
    onApply: function() {
        var b = true;
        var a = this.getActiveStep();
        Ext.each(this.stepStack.concat(a.itemId), function(e) {
            var d = this.getStep(e);
            if (Ext.isFunction(d.validateValue) && !d.validateValue()) {
                b = false;
                return false
            }
        }, this);
        if (!b) {
            return
        }
        var c = this.getParams();
        if (c.remote_connection_info.agentless_auth_policy === SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY || c.remote_connection_info.agentless_auth_policy === SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_KEY) {
            this._validateSshKeyFile(c)
        } else {
            this._testConnection(c)
        }
    },
    _testConnection: function(a) {
        this.setStatusBusy({
            text: _LABS("loading", "fs_test_connection"),
            clear: true
        });
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "test_connection",
            version: 1,
            params: a,
            callback: this.onTestConnectionDone,
            scope: this
        })
    },
    onTestConnectionDone: function(e, a, d, b) {
        if (!e) {
            this.clearStatusBusy();
            var c = SYNO.ActiveBackup.Util.parseError(a);
            c += "<br/>(" + a.errors.params.raw_error + ")";
            this.getMsgBox().alert("", c);
            return
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "create_device",
            version: 1,
            params: d,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onApplyDone: function(f, a, c, b) {
        this.clearStatusBusy();
        if (!f) {
            this.reportError(a);
            return
        }
        var e = new Ext.XTemplate(_LABS("warning", "confirm_create_task_by_device"));
        var d = e.apply(a || {});
        this.getMsgBox().confirm("", d, function(g) {
            this.close();
            if ("no" === g) {
                return
            }
            if (Ext.isFunction(this.onCreateTask)) {
                this.onCreateTask(a)
            }
        }, this)
    },
    _validateSshKeyFile: function(a) {
        this.setStatusBusy();
        this._removeSshKeyFile(this.ssh_key_path, Ext.createDelegate(function(b) {
            this.getStep("remote_infomation").getComponent("form_panel").getForm().doAction("apply", {
                success: function(c, d) {
                    if (d.result) {
                        this.clearStatusBusy();
                        this.ssh_key_path = d.result.data.ssh_key_tmp;
                        a.remote_connection_info.ssh_key_file_path = d.result.data.ssh_key_tmp;
                        this._testConnection(a)
                    } else {
                        this.clearStatusBusy();
                        this.getMsgBox().alert("", _LABS("error", "fs_ssh_key_upload_failed"))
                    }
                },
                failure: function(c, d) {
                    this.clearStatusBusy();
                    this.reportError(d.result.error)
                },
                scope: this
            })
        }, this))
    },
    _removeSshKeyFile: function(a, b) {
        if (!a || a.empty()) {
            if (b) {
                b(false)
            }
            return
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "remove_ssh_key_tmp_file",
            version: 1,
            params: {
                ssh_key_file_path: a
            },
            callback: function(f, e, d, c) {
                this.ssh_key_path = "";
                if (b) {
                    b(f)
                }
            },
            scope: this
        })
    },
    onDestroy: function() {
        this._removeSshKeyFile(this.ssh_key_path)
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agentless.AuthTypeMsgBox", {
    extend: "SYNO.SDS.ModalWindow",
    ssh_key_file_path: "",
    device: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.onApplyDone = a.onApplyDone;
        this.device = a.device;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.apply_btn = new SYNO.ux.Button({
            btnStyle: "blue",
            text: _T("common", "apply"),
            itemId: "apply_button",
            handler: this.onApply,
            scope: this
        });
        this.cancel_btn = new SYNO.ux.Button({
            btnStyle: "gray",
            text: _T("common", "cancel"),
            itemId: "cancel_button",
            handler: function() {
                this.close()
            },
            scope: this
        });
        this.form_panel = this.getFormPanel(b);
        var a = {
            itemId: "main_window",
            closable: true,
            title: _LABS("task_info", "agentless_auth_policy"),
            resizable: false,
            border: true,
            layout: "fit",
            items: [this.form_panel],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [this.apply_btn, this.cancel_btn]
            }
        };
        return Ext.apply(a, b)
    },
    initEvents: function() {
        this.callParent(arguments);
        SYNO.SDS.Utils.AddTip(Ext.getCmp(this.ssh_key_label_id).getEl(), _LABS("tool_tip", "ssh_key_no_passphrase_desc"))
    },
    getAuthPolicy: function() {
        var a = ("password" === Ext.getCmp(this.rsync_auth_policy_id).getValue());
        switch (this.device.agentless_auth_policy) {
            case SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_SSH_KEY:
            case SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_SSH_PASSWORD:
                return (a) ? SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_SSH_PASSWORD : SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_SSH_KEY;
            case SYNO.SDS.ActiveBackup.AuthPolicy.SSH_KEY:
            case SYNO.SDS.ActiveBackup.AuthPolicy.SSH_PASSWORD:
                return (a) ? SYNO.SDS.ActiveBackup.AuthPolicy.SSH_PASSWORD : SYNO.SDS.ActiveBackup.AuthPolicy.SSH_KEY;
            case SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_PASSWORD:
                return SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_PASSWORD;
            default:
                return SYNO.SDS.ActiveBackup.AuthPolicy.MODULE_PASSWORD
        }
    },
    getFormPanel: function(b) {
        var a = {
            fileUpload: true,
            webapi: {
                api: "SYNO.ActiveBackup.Agentless",
                version: 1,
                method: "upload_ssh_key"
            },
            labelWidth: 200,
            fieldWidth: 255,
            id: this.auth_policy_panel_id = Ext.id(),
            itemId: "auth_policy_panel",
            autoFlexcroll: false,
            items: [{
                xtype: "syno_combobox",
                id: this.rsync_auth_policy_id = Ext.id(),
                itemId: "rsync_auth_policy",
                fieldLabel: _LABS("task_info", "agentless_auth_policy"),
                allowBlank: false,
                displayField: "display",
                valueField: "value",
                value: "password",
                store: (b.secure_transfer) ? new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["password", _LABS("create_wizard", "auth_by_password")],
                        ["ssh_key", _LABS("create_wizard", "auth_by_ssh_key")]
                    ]
                }) : new Ext.data.ArrayStore({
                    autoDestroy: true,
                    fields: ["value", "display"],
                    data: [
                        ["password", _LABS("create_wizard", "auth_by_password")]
                    ]
                }),
                listeners: {
                    select: this.onSelectRsyncAuthPolicy,
                    destroy: this.onDestroy,
                    scope: this
                }
            }, {
                xtype: "syno_textfield",
                id: this.password_id = Ext.id(),
                itemId: "password",
                fieldLabel: _LABS("task_info", "password"),
                allowBlank: false,
                textType: "password"
            }, {
                xtype: "syno_compositefield",
                id: this.ssh_key_id = Ext.id(),
                itemId: "ssh_key",
                hideLabel: true,
                height: 28,
                width: 461,
                hidden: true,
                items: [{
                    xtype: "syno_panel",
                    width: 200,
                    height: 28,
                    padding: 0,
                    border: false,
                    items: [{
                        xtype: "syno_displayfield",
                        id: this.ssh_key_label_id = Ext.id(),
                        height: 28,
                        style: "padding: 0px",
                        itemId: "ssh_key_label",
                        value: _LABS("task_info", "ssh_key") + ":"
                    }]
                }, {
                    xtype: "syno_panel",
                    layout: "border",
                    width: 261,
                    height: 28,
                    border: false,
                    items: [{
                        xtype: "syno_filebutton",
                        region: "center",
                        name: "ssh_key",
                        id: this.ssh_key_upload_button_id = Ext.id(),
                        itemId: "ssh_key_upload_button",
                        allowBlank: true,
                        buttonText: _LABS("btn", "browse"),
                        buttonOnly: false,
                        textConfig: {
                            width: 147
                        },
                        buttonConfig: {
                            width: 98
                        }
                    }]
                }]
            }]
        };
        return new SYNO.SDS.Utils.FormPanel(a)
    },
    validateValue: function() {
        var b = this.getFooterToolbar();
        var a = (Ext.getCmp(this.rsync_auth_policy_id).getValue() === "password");
        if (a) {
            if (!Ext.getCmp(this.password_id).validate()) {
                this.setStatusError({
                    text: _T("common", "forminvalid"),
                    clear: true
                }, b);
                return false
            }
        } else {
            if (0 === Ext.getCmp(this.ssh_key_upload_button_id).getValue().length) {
                this.setStatusError({
                    text: _LABS("error", "fs_not_select_ssh_key"),
                    clear: true
                }, b);
                return false
            }
        }
        return true
    },
    setStatusError: function(b, a) {
        b = b || {};
        Ext.applyIf(b, {
            text: _T("common", "error_system"),
            iconCls: this.owner.isV5Style() ? "syno-ux-statusbar-error" : "x-status-error"
        });
        a.setStatus(b)
    },
    onApply: function() {
        if (!this.validateValue()) {
            return false
        }
        var a = (Ext.getCmp(this.rsync_auth_policy_id).getValue() === "password");
        var b = {
            use_password: a,
            ssh_key_file_path: "",
            password: Ext.getCmp(this.password_id).getValue()
        };
        if (a) {
            this._onApplyDone(b)
        } else {
            this._validateSshKeyFile(b)
        }
    },
    _validateSshKeyFile: function(a) {
        this.setStatusBusy({
            text: _LABS("loading", "fs_validating_ssh_key"),
            clear: true
        });
        this._removeSshKeyFile(this.ssh_key_file_path, Ext.createDelegate(function(b) {
            this.form_panel.getForm().doAction("apply", {
                success: function(c, d) {
                    if (d.result) {
                        this.clearStatusBusy();
                        this.ssh_key_file_path = d.result.data.ssh_key_tmp;
                        a.ssh_key_file_path = d.result.data.ssh_key_tmp;
                        this._onApplyDone(a)
                    } else {
                        this.clearStatusBusy();
                        this.setStatusError({
                            text: _LABS("error", "fs_ssh_key_upload_failed"),
                            clear: true
                        }, this.getFooterToolbar())
                    }
                },
                failure: function(c, d) {
                    this.clearStatusBusy();
                    this.setStatusError({
                        text: SYNO.ActiveBackup.Util.parseError(d.result.error),
                        clear: true
                    }, this.getFooterToolbar())
                },
                scope: this
            })
        }, this))
    },
    _onApplyDone: function(a) {
        this.onApplyDone(a);
        this.close()
    },
    _removeSshKeyFile: function(a, b) {
        if (!a || a.empty()) {
            if (b) {
                b(false)
            }
            return
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "remove_ssh_key_tmp_file",
            version: 1,
            params: {
                ssh_key_file_path: a
            },
            callback: function(f, e, d, c) {
                this.ssh_key_file_path = "";
                if (b) {
                    b(f)
                }
            },
            scope: this
        })
    },
    onSelectRsyncAuthPolicy: function(e, a, b, c) {
        var d = a.data.value;
        if (d == "password") {
            Ext.getCmp(this.password_id).reset();
            Ext.getCmp(this.ssh_key_id).setVisible(false);
            Ext.getCmp(this.password_id).setVisible(true);
            Ext.getCmp(this.password_id).allowBlank = false
        } else {
            Ext.getCmp(this.ssh_key_upload_button_id).reset();
            Ext.getCmp(this.ssh_key_id).setVisible(true);
            Ext.getCmp(this.password_id).setVisible(false);
            Ext.getCmp(this.password_id).allowBlank = true
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.DeviceEditWizard", {
    extend: "SYNO.ActiveBackup.Util.Wizard",
    device: null,
    new_rsync_password: null,
    new_ssh_key_file_path: "",
    constructor: function(a) {
        this.device = a.device;
        var b = Ext.apply({
            title: _LABS("common", "device_edit"),
            banner: true,
            width: 650,
            height: 500,
            steps: [new SYNO.SDS.Utils.FormPanel({
                headline: _LABS("create_wizard", "remote_information_header"),
                description: _LABS("create_wizard", "remote_information_description"),
                border: false,
                frame: false,
                labelWidth: 300,
                fieldWidth: 295,
                height: 324,
                autoFlexcroll: true,
                fileUpload: true,
                itemId: "form_panel",
                nextId: null,
                activate: Ext.createDelegate(this.onActivate, this),
                webapi: {
                    api: "SYNO.ActiveBackup.Agentless",
                    version: 1,
                    method: "upload_ssh_key"
                },
                items: this.getDeviceItems(a.device)
            })]
        }, a);
        return this.callParent([b])
    },
    getDeviceItems: function(a) {
        this.server_address = new SYNO.ux.TextField({
            itemId: "server_address",
            fieldLabel: _LABS("task_info", "server_address"),
            width: 287,
            value: a.host_ip,
            allowBlank: false,
            regex: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-\_]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-\_]*[A-Za-z0-9\-\_])(\/.[^\/]*)*$/,
            regexText: _LABS("error", "error_no_address_or_hostname")
        });
        this.account = new SYNO.ux.TextField({
            itemId: "account",
            fieldLabel: _LABS("task_info", "account"),
            width: 287,
            value: a.login_user,
            allowBlank: false,
            maxLength: 64,
            regex: /^[^\ ](.*[^\ ])*$/,
            regexText: _T("user", "error_badname")
        });
        this.password = new SYNO.ux.TextField({
            itemId: "password",
            fieldLabel: _LABS("task_info", "password"),
            width: 287,
            value: a.login_password,
            allowBlank: false,
            textType: "password",
            maxLength: 64
        });
        if (this.device.os_name == "smb") {
            return [this.server_address, this.account, this.password]
        }
        this.rsync_connection_type = new SYNO.ux.ComboBox({
            itemId: "rsync_connection_method",
            fieldLabel: _LABS("task_info", "connection_method"),
            width: 287,
            value: this.getConnectionTypeValue(a.agentless_auth_policy),
            allowBlank: false,
            displayField: "display",
            valueField: "value",
            store: ("shell" === this.getConnectionTypeValue(a.agentless_auth_policy)) ? new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    ["shell", _LABS("task_info", "rsync_shell_mode")]
                ]
            }) : new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    ["module_ssh", _LABS("task_info", "rsync_module_mode_ssh")],
                    ["module", _LABS("task_info", "rsync_module_mode")]
                ]
            }),
            listeners: {
                select: function(e, b, c, d) {
                    if (b.data.value === "module") {
                        this.port.setValue(873)
                    } else {
                        this.port.setValue(22)
                    }
                },
                scope: this
            }
        });
        this.port = new SYNO.ux.NumberField({
            itemId: "port",
            fieldLabel: _LABS("task_info", "port"),
            width: 287,
            value: a.host_port,
            allowBlank: false,
            allowNegative: false,
            maxlength: 5,
            minValue: 0,
            maxValue: 65535,
            regex: /^\d+$/
        });
        this.rsync_auth_display = new SYNO.ux.DisplayField({
            itemId: "displayfield",
            value: ("ssh_key" === this.getAuthTypeValue(a.agentless_auth_policy)) ? _LABS("create_wizard", "auth_by_ssh_key") : _LABS("create_wizard", "auth_by_password")
        });
        this.rsync_auth_method = new SYNO.ux.CompositeField({
            fieldLabel: _LABS("task_info", "agentless_auth_policy"),
            items: [this.rsync_auth_display, {
                xtype: "syno_button",
                itemId: "update_button",
                text: _LABS("common", "update"),
                handler: this.onClickUpdateAuthMethod,
                scope: this
            }]
        });
        return [this.server_address, this.rsync_connection_type, this.port, this.account, this.rsync_auth_method]
    },
    onActivate: function() {
        var a = this.getFooterToolbar().getComponent("cancel");
        a.setHandler(function() {
            this.onCancel()
        }, this)
    },
    getConnectionTypeValue: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD:
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY:
                return "shell";
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_PASSWORD:
                return "module";
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_PASSWORD:
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_KEY:
                return "module_ssh";
            default:
                return "shell"
        }
    },
    getAuthTypeValue: function(a) {
        switch (a) {
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD:
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_PASSWORD:
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_PASSWORD:
                return "password";
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_KEY:
            case SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY:
                return "ssh_key";
            default:
                return "password"
        }
    },
    getAuthPolicy: function(b, a) {
        if (b === "shell") {
            if (a === "password") {
                return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD
            } else {
                if (a === "ssh_key") {
                    return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_KEY
                }
            }
        } else {
            if (b === "module_ssh") {
                if (a === "password") {
                    return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_PASSWORD
                } else {
                    if (a === "ssh_key") {
                        return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_SSH_KEY
                    }
                }
            } else {
                if (b === "module") {
                    return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.MODULE_PASSWORD
                }
            }
        }
        return SYNO.SDS.ActiveBackup.AgentlessAuthPolicy.SSH_PASSWORD
    },
    onClickUpdateAuthMethod: function(b, c) {
        var a = new SYNO.ActiveBackup.Agentless.AuthTypeMsgBox({
            width: 500,
            height: 174,
            owner: this,
            device: this.device,
            secure_transfer: (this.rsync_connection_type.getValue() === "shell" || this.rsync_connection_type.getValue() === "module_ssh"),
            onApplyDone: Ext.createDelegate(function(d) {
                if (this.new_ssh_key_file_path.length !== 0) {
                    this.sendWebAPI({
                        api: "SYNO.ActiveBackup.Agentless",
                        method: "remove_ssh_key_tmp_file",
                        version: 1,
                        params: {
                            ssh_key_file_path: this.new_ssh_key_file_path
                        },
                        callback: function(h, g, f, e) {},
                        scope: this
                    })
                }
                this.new_rsync_password = d.password;
                this.new_ssh_key_file_path = d.ssh_key_file_path;
                if (d.use_password) {
                    this.rsync_auth_display.setValue(_LABS("create_wizard", "auth_by_password"))
                } else {
                    this.rsync_auth_display.setValue(_LABS("create_wizard", "auth_by_ssh_key"))
                }
                this.rsync_auth_method.syncSize()
            }, this)
        });
        a.show()
    },
    isDirty: function() {
        var c = this.getParams().remote_connection_info;
        var a = this.device;
        var b = false;
        delete c.is_password_encrypted;
        Ext.each(Object.keys(c), function(d) {
            if (c[d] !== a[d]) {
                b = true;
                return false
            }
        });
        return b
    },
    getParams: function() {
        var d = (this.device.os_name == "smb") ? this.password.getValue() : (this.new_rsync_password) ? this.new_rsync_password : this.device.login_password;
        var a = {
            os_name: this.device.os_name,
            host_ip: this.server_address.getValue(),
            host_name: this.server_address.getValue(),
            login_user: this.account.getValue(),
            login_password: d,
            is_password_encrypted: (this.device.login_password == d),
            agentless_auth_policy: 0,
            host_port: 0
        };
        if (this.device.os_name == "rsync") {
            var b = this.rsync_connection_type.getValue();
            var c = (this.rsync_auth_display.getValue() === _LABS("create_wizard", "auth_by_password")) ? "password" : "ssh_key";
            Ext.apply(a, {
                ssh_key_file_path: (this.new_ssh_key_file_path.empty()) ? this.device.ssh_key_file_path : this.new_ssh_key_file_path,
                agentless_auth_policy: this.getAuthPolicy(b, c),
                host_port: this.port.getValue()
            })
        }
        return {
            remote_connection_info: a,
            device_id: this.device.device_id
        }
    },
    validateValue: function() {
        if (!this.server_address.validate()) {
            this.getMsgBox().alert("", _LABS("error", "error_no_address_or_hostname"));
            return false
        }
        if (!this.account.validate()) {
            this.getMsgBox().alert("", _T("common", "forminvalid"));
            return false
        }
        if (this.device.os_name === "smb") {
            if (!this.password.validate()) {
                this.getMsgBox().alert("", _T("common", "forminvalid"));
                return false
            }
        } else {
            if (!this.port.validate()) {
                this.getMsgBox().alert("", _T("common", "forminvalid"));
                return false
            }
            var a = this.server_address.getValue();
            var b = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-\_]*[a-zA-Z0-9\-\_])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-\_]*[A-Za-z0-9\-\_])$/;
            if (!b.test(a)) {
                this.getMsgBox().alert("", _T("common", "forminvalid"));
                return false
            }
        }
        return true
    },
    onCancel: function() {
        if (!this.isDirty()) {
            this.close();
            return
        }
        this.getMsgBox().confirm("", _LABS("warning", "confirm_modification_and_leave"), function(a) {
            if ("yes" === a) {
                this.close()
            }
        }, this)
    },
    onApply: function() {
        if (!this.validateValue()) {
            return false
        }
        if (!this.isDirty()) {
            this.close();
            return
        }
        var a = this.getParams();
        this.getMsgBox().confirm("", _LABS("warning", "confirm_modification"), function(b) {
            if ("no" === b) {
                return
            }
            this._testConnection(a)
        }, this)
    },
    _testConnection: function(a) {
        this.setStatusBusy({
            text: _LABS("loading", "fs_test_connection"),
            clear: true
        });
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "test_connection",
            version: 1,
            params: a,
            callback: this.onTestConnectionDone,
            scope: this
        })
    },
    onTestConnectionDone: function(e, a, d, b) {
        if (!e) {
            this.clearStatusBusy();
            var c = SYNO.ActiveBackup.Util.parseError(a);
            c += "<br/>(" + a.errors.params.raw_error + ")";
            this.getMsgBox().alert("", c);
            return
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "set_device",
            version: 1,
            params: d,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onApplyDone: function(d, a, c, b) {
        this.clearStatusBusy();
        if (!d) {
            this.reportError(a);
            return
        }
        this.close()
    },
    onDestroy: function() {
        if (this.new_ssh_key_file_path.length === 0) {
            return
        }
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "remove_ssh_key_tmp_file",
            version: 1,
            params: {
                ssh_key_file_path: this.new_ssh_key_file_path
            },
            callback: function(d, c, b, a) {
                this.new_ssh_key_file_path = ""
            },
            scope: this
        })
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agentless.DeviceView", {
    extend: "SYNO.ActiveBackup.DeviceView",
    backup_type: SYNO.ActiveBackup.BackupType.AGENTLESS,
    constructor: function(a) {
        var b = [{
            name: "key_word",
            display_string: _LABS("filter_panel", "filter_panel_key_word") + _T("common", "colon")
        }, {
            name: "host_name",
            display_string: _LABS("filter_panel", "filter_panel_host_name") + _T("common", "colon")
        }, {
            name: "login_user",
            display_string: _LABS("filter_panel", "filter_panel_login_user") + _T("common", "colon")
        }];
        return this.callParent([Ext.apply({
            title: _LABS("agentlessbk", "device_view_title"),
            filter_inputfield: b,
            filter_protocol_type_combobox: true
        }, a)])
    },
    initActions: function() {
        var a = this.callParent(arguments);
        this.actions.add("create_device", {
            text: _LABS("component", "btn_add_server"),
            scope: this,
            handler: this.onCreateDevice,
            select_type_enable: [true, true, true]
        });
        this.actions.add("remove_device", {
            text: _LABS("component", "btn_delete"),
            scope: this,
            handler: this.onRemoveDevice,
            select_type_enable: [false, true, true]
        });
        this.actions.add("edit_device", {
            text: _LABS("component", "btn_edit"),
            scope: this,
            handler: this.onEditDevice,
            select_type_enable: [false, true, false]
        });
        this.actions.add("open_restore_portal", {
            text: _LABS("btn", "open_in_portal"),
            scope: this,
            handler: this.onOpenRestorePortal,
            select_type_enable: [true, true, true]
        });
        this.actions.add("create_task", {
            text: _LABS("component", "btn_create_task"),
            scope: this,
            handler: this.onCreateTask,
            select_type_enable: [false, true, false]
        });
        return a
    },
    configButtons: function() {
        var a = this.callParent(arguments);
        a.splice(0, 0, this.actions.get("create_device"));
        a.splice(1, 0, this.actions.get("edit_device"));
        a.splice(2, 0, this.actions.get("open_restore_portal"));
        a.splice(3, 0, this.actions.get("remove_device"));
        a.splice(4, 0, this.actions.get("create_task"));
        a.splice(5);
        return a
    },
    prepareSummary: function(a, b) {
        b.device_id = a.device_id;
        b.host_name = a.host_name;
        b.iconCls = SYNO.ActiveBackup.DeviceView.getIconClsByOsName(a.os_name);
        b.status_key = _LABS("task_info", "server_address");
        b.status = a.host_name
    },
    prepareProperties: function(b, a) {
        a.push({
            key: _LABS("component", "device_user"),
            value: b.login_user
        })
    },
    onRemoveDevice: function() {
        var a = new SYNO.SDS.MessageBoxV5({
            owner: this.owner
        });
        a.confirmDelete(_LABS("component", "device_view_title"), _LABS("warning", "confirm_delete_device_keep_target"), function(b) {
            if (b == "yes") {
                var c = [];
                Ext.each(this.getView().getSelectedRecords(), function(d) {
                    c.push(d.id)
                });
                this.stopPollingTasks();
                this.maskWindow("loading");
                this.sendWebAPI({
                    api: "SYNO.ActiveBackup.Device",
                    method: "remove",
                    params: {
                        device_ids: c,
                        backup_type: this.backup_type
                    },
                    version: 1,
                    callback: function() {
                        this.unmaskWindow("loading");
                        this.startPollingTasks(true)
                    },
                    scope: this
                })
            }
        }, this)
    },
    onCreateTask: function() {
        if (!this.checkSingleSelected()) {
            return
        }
        var a = this.getView().getSelectedRecords()[0];
        this._createTask(a.data.rawdata)
    },
    _createTask: function(a) {
        var b = new SYNO.ActiveBackup.Agentless.TaskCreateWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.backup_type,
            device: a
        });
        this._openModalWindow(b)
    },
    onCreateDevice: function() {
        var a = new SYNO.ActiveBackup.Agentless.DeviceCreateWizard({
            appWin: this.appWin,
            owner: this.owner,
            onCreateTask: Ext.createDelegate(this._createTask, this)
        });
        this._openModalWindow(a)
    },
    onOpenRestorePortal: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.ActiveBackupPortal.Application")
    },
    onEditDevice: function() {
        if (!this.checkSingleSelected()) {
            return
        }
        var a = this.getView().getSelectedRecords()[0];
        var b = new SYNO.ActiveBackup.Agentless.DeviceEditWizard({
            appWin: this.appWin,
            owner: this.owner,
            device: a.data.rawdata
        });
        this._openModalWindow(b)
    },
    checkSingleSelected: function() {
        if (this.getView().getSelectedRecords().size() !== 1) {
            this.appWin.getMsgBox().alert("", _LABS("warning", "select_device_error"));
            return false
        }
        return true
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.TaskEdit.GeneralPanel", {
    extend: "SYNO.ux.FormPanel",
    device: null,
    task: null,
    constructor: function(a) {
        this.device = a.records[0].json.devices[0];
        this.task = a.records[0].json;
        return this.callParent([this.fillConfig(a)])
    },
    activate: function() {},
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.activate, this);
        this.mon(this, "setting", this.onSetting, this)
    },
    fillConfig: function(c) {
        var b;
        this.task_name = new SYNO.ux.TextField({
            itemId: "task_name",
            fieldLabel: _LABS("task_info", "task_name"),
            allowBlank: false,
            maxLength: 64,
            value: this.task.task_name,
            vtype: "taskname"
        });
        if (this.device.os_name === "rsync") {
            this.bandwidth = new SYNO.ux.NumberField({
                itemId: "bandwidth",
                fieldLabel: _LABS("task_info", "bandwidth"),
                regex: /^\d+$/,
                minValue: 0,
                maxValue: 1073741824,
                allowBlank: false,
                allowNegative: false,
                maxlength: 10,
                value: this.task.bandwidth
            });
            this.enable_compress_transfer = new SYNO.ux.Checkbox({
                itemId: "compress_transfer",
                boxLabel: _LABS("task_info", "enable_compress"),
                checked: this.task.enable_compress_transfer
            });
            this.enable_block_transfer = new SYNO.ux.Checkbox({
                itemId: "block_transfer",
                boxLabel: _LABS("task_info", "enable_block_transfer"),
                checked: this.task.agentless_enable_block_transfer,
                initEvents: function() {
                    SYNO.SDS.Utils.AddTip(this.getEl(), _LABS("agentlessbk", "block_trans_desc"))
                }
            });
            b = [this.task_name, this.bandwidth, this.enable_compress_transfer, this.enable_block_transfer]
        } else {
            this.enable_vss = new SYNO.ux.Checkbox({
                itemId: "enable_volume_shadow_copy",
                boxLabel: _LABS("task_info", "enable_volume_shadow_copy"),
                checked: this.task.agentless_enable_windows_vss,
                initEvents: function() {
                    SYNO.SDS.Utils.AddTip(this.getEl(), _LABS("tool_tip", "volulme_shadow_copy_desc"))
                }
            });
            b = [this.task_name, this.enable_vss]
        }
        var a = {
            autoFlexcroll: false,
            labelWidth: 200,
            fieldWidth: 388,
            cls: "synoabk-task-edit",
            items: b
        };
        return Ext.apply(a, c)
    },
    onSetting: function(a) {
        this.task_name.setValue(a.task_name);
        if (this.device.os_name == "smb") {
            this.enable_vss.setValue(a.agentless_enable_windows_vss)
        } else {
            if (this.device.os_name == "rsync") {
                this.bandwidth.setValue(a.bandwidth);
                this.enable_compress_transfer.setValue(a.enable_compress_transfer);
                this.enable_block_transfer.setValue(a.agentless_enable_block_transfer)
            }
        }
    },
    validate: function() {
        if (!this.task_name.validate()) {
            return false
        }
        if (this.device.os_name == "rsync") {
            if (!this.bandwidth.validate()) {
                return false
            }
        }
        return true
    },
    isDirty: function() {
        var c = this.getParams();
        var a = this.task;
        var b = false;
        Ext.each(Object.keys(c), function(d) {
            if (c[d] !== a[d]) {
                b = true;
                return false
            }
        });
        return b
    },
    getParams: function() {
        var a;
        if (this.device.os_name === "rsync") {
            a = {
                bandwidth: this.bandwidth.getValue(),
                enable_compress_transfer: this.enable_compress_transfer.getValue(),
                agentless_enable_dedup: false,
                agentless_enable_block_transfer: this.enable_block_transfer.getValue()
            }
        } else {
            a = {
                agentless_enable_windows_vss: this.enable_vss.getValue()
            }
        }
        return Ext.apply({
            task_name: this.task_name.getValue()
        }, a)
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.TaskEditWizard", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.records = a.records;
        this.panels = {
            general: this.createGeneralPanel(a),
            sourceselect: this.createSourceSelectPanel(a),
            filefilter: this.createFileFilterPanel(a),
            schedule: this.createSchedulePanel(a)
        };
        if (SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION === this.records[0].json.agentless_backup_policy) {
            Ext.apply(this.panels, {
                retention: this.createRetentionPanel(a)
            })
        }
        this.tabs = new SYNO.ux.TabPanel({
            activeTab: 0,
            deferredRender: false,
            items: Object.values(this.panels)
        });
        var b = Ext.apply({
            title: _LABS("vmbk", "task_edit_wizard"),
            banner: true,
            width: 700,
            height: 580,
            resizable: false,
            items: this.tabs,
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [{
                    xtype: "syno_button",
                    btnStyle: "blue",
                    text: _LABS("btn", "ok"),
                    scope: this,
                    handler: this.onOKClick
                }, {
                    xtype: "syno_button",
                    text: _LABS("btn", "cancel"),
                    scope: this,
                    handler: this.onCancelClick
                }]
            }
        }, a);
        this.callParent([b])
    },
    activate: function(a) {
        this.tabs.fireEvent("activate")
    },
    onOpen: function() {
        this.setStatusBusy();
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Agentless",
            method: "get_task_setting",
            params: {
                task_id: this.records[0].json.task_id
            },
            version: 1,
            callback: function(d, b, c, a) {
                this.clearStatusBusy();
                if (!d) {
                    SYNO.ActiveBackup.Util.reportError(b);
                    return
                }
                Object.values(this.panels).each(function(e) {
                    e.fireEvent("setting", b)
                })
            },
            scope: this
        });
        this.callParent(arguments)
    },
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.activate, this)
    },
    createGeneralPanel: function(a) {
        return new SYNO.ActiveBackup.Agentless.TaskEdit.GeneralPanel({
            title: _LABS("common", "settings_general"),
            itemId: "settings_general",
            records: a.records,
            appWin: a.appWin
        })
    },
    createSourceSelectPanel: function(a) {
        return new SYNO.ActiveBackup.Agentless.SourceSelectPanel({
            title: _LABS("agentlessbk", "source_select_headline"),
            itemId: "settings_source_select",
            device: a.records[0].json.devices[0],
            appWin: a.appWin,
            height: 470,
            width: 660
        })
    },
    createSchedulePanel: function(a) {
        return new SYNO.ActiveBackup.Agentless.ScheduleWizard({
            title: _LABS("common", "settings_schedule"),
            itemId: "settings_schedule",
            isWizard: false,
            isLicensed: false,
            height: 470,
            appWin: a.appWin
        })
    },
    createRetentionPanel: function(a) {
        return new SYNO.ActiveBackup.RetentionEditPanel({
            title: _LABS("component", "Retention_tab_title"),
            itemId: "settings_retention",
            records: a.records,
            appWin: a.appWin,
            owner: a.owner,
            mode: "edit"
        })
    },
    createFileFilterPanel: function(a) {
        return new SYNO.ActiveBackup.Agentless.Filter.Panel({
            title: _LABS("agentlessbk", "file_filter_headline"),
            itemId: "settings_filter",
            records: a.records,
            appWin: a.appWin,
            filterTreeWidth: "100%",
            filterTreeHeight: 350,
            height: 450
        })
    },
    setStatusError: function(b, a) {
        b = b || {};
        Ext.applyIf(b, {
            text: _T("common", "error_system"),
            iconCls: this.owner.isV5Style() ? "syno-ux-statusbar-error" : "x-status-error"
        });
        a.setStatus(b)
    },
    validatePanels: function() {
        var c = true;
        var b = this;
        var a = this.getFooterToolbar();
        Object.values(this.panels).each(function(d) {
            if (!d.validate()) {
                var e = (d.itemId === "settings_source_select") ? _LABS("warning", "no_select_folder") : _T("common", "forminvalid");
                b.tabs.setActiveTab(d.itemId);
                b.setStatusError({
                    text: e,
                    clear: true
                }, a);
                c = false;
                return false
            }
        });
        Object.values(this.panels).each(function(d) {
            if (Ext.isFunction(d.validateValue) && !d.validateValue()) {
                var e = (d.itemId === "settings_source_select") ? _LABS("warning", "no_select_folder") : _T("common", "forminvalid");
                b.tabs.setActiveTab(d.itemId);
                b.setStatusError({
                    text: e,
                    clear: true
                }, a);
                c = false;
                return false
            }
        });
        return c
    },
    hasDirtyPanels: function() {
        var a = false;
        Ext.each(Object.values(this.panels), function(b) {
            if (Ext.isFunction(b.isDirty) && b.isDirty()) {
                a = true;
                return false
            }
        });
        return a
    },
    onOKClick: function() {
        if (this.validatePanels() === false) {
            return
        }
        if (!this.hasDirtyPanels()) {
            this.close();
            return
        }
        this.getMsgBox().confirm("", _LABS("warning", "confirm_modification_cancel_running_task"), function(a) {
            if ("no" === a) {
                return
            }
            var b = Object.values(this.panels).reduce(function(d, c) {
                return Ext.apply(c.getParams(), d)
            }, {});
            Ext.apply(b, {
                device: this.records[0].json.devices[0],
                task_id: this.records[0].id
            });
            this.setStatusBusy();
            this.sendWebAPI({
                api: "SYNO.ActiveBackup.Agentless",
                method: "test_task_settings",
                params: b,
                version: 1,
                callback: this.onTestSettingDone,
                scope: this
            })
        }, this)
    },
    onTestSettingDone: function(e, b, d, a) {
        if (!e) {
            this.clearStatusBusy();
            var c = SYNO.ActiveBackup.Util.parseError(b);
            if (b.errors.params.not_support_vss_shares) {
                c += "</br>";
                c += '<span style="color: navy;">' + Ext.util.Format.htmlEncode(b.errors.params.not_support_vss_shares.join(", ")) + "</span>"
            }
            this.owner.getMsgBox().alert("", c);
            return
        }
        d.task_ids = [];
        Ext.each(this.records, function(f) {
            d.task_ids.push(f.id)
        }, this);
        this.sendWebAPI({
            api: "SYNO.ActiveBackup.Task",
            method: "set",
            params: d,
            version: 1,
            callback: this.onApplyDone,
            scope: this
        })
    },
    onApplyDone: function(d, b, c, a) {
        this.clearStatusBusy();
        if (!d) {
            this.reportError(b);
            return
        }
        this.close()
    },
    onCancelClick: function() {
        if (!this.hasDirtyPanels()) {
            this.close()
        } else {
            this.getMsgBox().confirm("", _LABS("warning", "confirm_modification_and_leave"), function(a) {
                if ("yes" === a) {
                    this.close()
                }
            }, this)
        }
    },
    reportError: SYNO.ActiveBackup.Util.reportError
});
Ext.define("SYNO.ActiveBackup.Agentless.TaskView", {
    extend: "SYNO.ActiveBackup.TaskView",
    backup_type: SYNO.ActiveBackup.BackupType.AGENTLESS,
    configColumnModel: function() {
        var a = this.callParent(arguments);
        a.columns.splice(1, 0, {
            header: _LABS("agentlessbk", "backup_policy_headline"),
            width: 80,
            dataIndex: "agentless_backup_policy",
            renderer: function(d, e, b) {
                var c = SYNO.SDS.ActiveBackup.Utils.renderBackupPolicy(d);
                e.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return c
            }
        }, {
            header: _LABS("agentbk", "device_name"),
            width: 80,
            dataIndex: "first_device_name",
            renderer: function(c, d, b) {
                d.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(c) + '"';
                return c
            }
        });
        return a
    },
    initActions: function() {
        this.actions = new SYNO.ActiveBackup.Util.ActionGroup({
            create: {
                text: _LABS("component", "btn_create"),
                scope: this,
                handler: this.onTaskCreate,
                select_type_enable: [true, true, true]
            },
            edit: {
                text: _LABS("component", "btn_edit"),
                scope: this,
                handler: this.onTaskEdit,
                select_type_enable: [false, true, false]
            },
            backup: {
                text: _LABS("component", "btn_backup"),
                scope: this,
                handler: this.onBackup,
                select_type_enable: [false, false, false]
            },
            cancel: {
                text: _LABS("btn", "cancel"),
                scope: this,
                disabled: true,
                handler: this.onTaskCancel,
                select_type_enable: [false, false, false]
            },
            remove: {
                text: _LABS("component", "btn_delete"),
                scope: this,
                handler: this.onTaskRemove,
                select_type_enable: [false, false, false]
            },
            detail: {
                text: _LABS("component", "btn_detail"),
                scope: this,
                handler: this.onTaskDetail,
                select_type_enable: [false, true, false]
            },
            version: {
                text: _LABS("component", "btn_version"),
                scope: this,
                handler: this.onTaskVersion,
                select_type_enable: [false, true, false]
            }
        })
    },
    onTaskCreate: function() {
        var a = new SYNO.ActiveBackup.Agentless.TaskCreateWizard({
            appWin: this.appWin,
            owner: this.owner,
            backup_type: this.backup_type
        });
        this._openModalWindow(a)
    },
    onTaskEdit: function() {
        var c = this.getSelectionModel();
        var a = c.getSelections();
        var b = new SYNO.ActiveBackup.Agentless.TaskEditWizard({
            appWin: this.appWin,
            owner: this.owner,
            records: a
        });
        this._openModalWindow(b)
    },
    onTaskDetail: function() {
        this.callParent(arguments)
    },
    onSelectionChange: function(b) {
        this.callParent(arguments);
        var a = b.getSelections();
        if (a.length <= 0) {
            return
        }
        if (a.length > 1 || a[0].json.agentless_backup_policy !== SYNO.SDS.ActiveBackup.AgentlessBackupPolicy.VERSION) {
            this.actions.get("version").disable()
        }
    },
    startPolling: function(a, b) {
        if (a) {
            this.maskWindow("polling")
        }
        if (this._polling_id) {
            return
        }
        this._polling_id = this.pollReg({
            webapi: {
                api: "SYNO.ActiveBackup.Task",
                method: "list",
                version: 1,
                params: {
                    filter: {
                        backup_type: this.backup_type
                    },
                    load_status: true,
                    load_result: true,
                    load_devices: true
                }
            },
            interval: 3,
            immediate: b,
            scope: this,
            status_callback: this.onPollingDone
        })
    }
});
Ext.define("SYNO.ActiveBackup.PageAgentlessBackup", function(a) {
    return {
        extend: "SYNO.ux.TabPanel",
        constructor: function(b) {
            var d = Ext.copyTo({}, b, "appWin,owner");
            var c = Ext.apply({
                items: [new SYNO.ActiveBackup.Agentless.DeviceView(d), new SYNO.ActiveBackup.Agentless.TaskView(d)]
            }, b);
            return this.callParent([c])
        },
        getHelpParam: function() {
            return "activebackup_business_fileserver.html"
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.LearnMoreBackupPolicy", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callback = a.callback;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            itemId: "main_window",
            cls: "syno-activebackup-learn-more",
            closable: true,
            resizable: false,
            border: false,
            layout: "fit",
            items: [{
                xtype: "panel",
                border: false,
                cls: "top-buffer"
            }, {
                xtype: "panel",
                border: false,
                cls: "content-wrapper",
                html: '<div class="content"><div class="version-wrapper"><div class="title-wrapper">' + _LABS("backup_policy", "version") + '</div><div class="desc-wrapper">' + _LABS("create_wizard", "version_desc") + "</div></div></div>"
            }, {
                xtype: "panel",
                border: false,
                cls: "middle-buffer"
            }, {
                xtype: "panel",
                border: false,
                cls: "content-wrapper",
                html: '<div class="content"><div class="mirror-wrapper"><div class="title-wrapper">' + _LABS("backup_policy", "mirror") + '</div><div class="desc-wrapper">' + _LABS("create_wizard", "mirror_desc") + "</div></div></div>"
            }, {
                xtype: "panel",
                border: false,
                cls: "middle-buffer"
            }, {
                xtype: "panel",
                border: false,
                cls: "content-wrapper",
                html: '<div class="content"><div class="incremental-wrapper"><div class="title-wrapper">' + _LABS("backup_policy", "incremental") + '</div><div class="desc-wrapper">' + _LABS("create_wizard", "incremental_desc") + "</div></div></div>"
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.Component.TreePanel", {
    extend: "SYNO.ux.TreePanel",
    updateScrollBarEventNames: ["afterlayout", "expandnode", "collapsenode", "resize", "append", "remove"],
    constructor: function(a) {
        var b = Ext.apply({
            useArrows: true,
            autoScroll: true,
            containerScroll: true,
            bodyStyle: "overflow-x: hidden;overflow-y:auto; padding-right: 12px;",
            enableDD: false
        }, a);
        return this.callParent([b])
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.Component.FolderTreePanel", {
    extend: "SYNO.SDS.ActiveBackup.Agentless.Component.TreePanel",
    constructor: function(a) {
        var b = Ext.apply({}, a);
        return this.callParent([b])
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        this.mon(this, "checkchange", this.onCheckChange, this);
        this.mon(this, "beforeexpandnode", this.beforeExpandNode, this);
        this.mon(this, "beforeappend", this.beforeAppend, this);
        return a
    },
    get_state_by_children: function(e) {
        var d = 0,
            c = 0,
            a = 0;
        e.eachChild(function(g) {
            var f = g.getUI() || {};
            if (f.checkbox && Ext.isFunction(f.getCheckValue) && (!Ext.isFunction(f.isDisabled) || !f.isDisabled())) {
                if (true === f.getCheckValue()) {
                    c += 1
                } else {
                    if (false === f.getCheckValue()) {
                        a += 1
                    }
                }
                d += 1
            }
        });
        var b = e.attributes.checked;
        if (b === true || b === "white") {
            if (c === d) {
                return true
            } else {
                return "white"
            }
        } else {
            if (b === "gray" || b === false) {
                if (a === d) {
                    return false
                } else {
                    return "gray"
                }
            }
        }
    },
    propagate_down: function(b, c) {
        var a = function(d, f) {
            d.eachChild(function(g) {
                a(g, f)
            });
            var e = d.getUI();
            if (e && Ext.isFunction(e.setCheckValue)) {
                e.setCheckValue(f)
            }
        };
        if (null === b.parentNode) {
            b.eachChild(function(d) {
                a(d, c)
            })
        } else {
            a(b, c)
        }
    },
    set_pnode_checked: function(c, b) {
        var a = c.getUI();
        if (!a || !Ext.isFunction(a.getCheckValue)) {
            return
        }
        c.attributes.checked = this.get_state_by_children(c);
        a.syncCheckCssClass()
    },
    propagate_up: function(b, a) {
        while (b) {
            this.set_pnode_checked(b, a);
            b = b.parentNode
        }
    },
    onCheckChange: function(a, b) {
        this.propagate_down(a, b);
        this.propagate_up(a.parentNode, b)
    },
    beforeExpandNode: function(b, a, c) {
        b.eachChild(function(d) {
            if (d.attributes.checked_TBD === true) {
                d.attributes.checked = (b.attributes.checked === true || b.attributes.checked === "white") ? true : false;
                d.attributes.checked_TBD = false;
                d.getUI().syncCheckCssClass()
            }
        }, this);
        b.sort(function(e, g) {
            if (e.attributes.type !== g.attributes.type) {
                return (e.attributes.type === "Dir") ? -1 : 1
            }
            var d = e.attributes.text;
            var f = g.attributes.text;
            return (d < f) ? -1 : (d > f)
        })
    },
    beforeAppend: function(a, d, e) {
        var c = e.attributes.path;
        var b;
        Ext.each(d.childNodes, function(f) {
            if (f.attributes.path == c) {
                b = f
            }
        });
        if (!b) {
            return true
        }
        b.attributes.filtered = b.attributes.filtered || e.attributes.filtered;
        b.attributes.session_id = e.attributes.session_id;
        b.attributes.file_id = e.attributes.file_id;
        b.attributes.path = e.attributes.path;
        b.attributes.exists_type = e.attributes.exists_type;
        return false
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.Component.TreeLoader", {
    extend: "Ext.tree.TreeLoader",
    createNode: function(a) {
        var c;
        var b = "x-tree-node-icon";
        var d = false;
        if (a.type === "File") {
            b = "x-tree-node-file-icon";
            d = true
        }
        a = Ext.apply({
            uiProvider: "SYNO.SDS.ActiveBackup.Component.FolderNodeUI",
            iconCls: b,
            draggable: false,
            leaf: d
        }, a);
        if (Ext.isFunction(this.createNodeFn)) {
            c = this.createNodeFn.call(this.createNodeScope || this, a);
            if (c === false) {
                return
            }
        }
        return this.callParent(arguments)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.Component.TreeNodeUI", {
    extend: "Ext.tree.TreeNodeUI",
    renderElements: function(f, m, l, o) {
        this.indentMarkup = f.parentNode ? f.parentNode.ui.getChildIndent() : "";
        var h = Ext.isBoolean(m.checked) || m.checked === "gray" || m.checked === "white",
            k = Ext.isBoolean(m.hide_checkbox) && m.hide_checkbox === true,
            p = Ext.isString(m.rimgCls),
            g = Ext.util.Format.htmlEncode,
            e = m.input,
            c, b = this.getHref(m.href),
            d = ['<li class="x-tree-node syno-extended-tree-node"><div ext:tree-node-id="', g(f.id), '" class="x-tree-node-el x-tree-node-leaf x-unselectable ', m.cls, '" unselectable="on">', p ? ('<img alt="" src="' + this.emptyIcon + '" class= "' + m.rimgCls + '" style="float: right" />') : "", '<span class="x-tree-node-indent">', this.indentMarkup, "</span>", '<img alt="" src="', this.emptyIcon, '" class="x-tree-ec-icon x-tree-elbow" />', h ? ('<img alt="" src="' + this.emptyIcon + '"' + (k ? ' style="display: none; "' : "") + ' class="syno-tree-node-cb syno-ux-checkbox-icon" />') : "", '<img alt="" src="', m.icon || this.emptyIcon, '" class="x-tree-node-icon', (m.icon ? " x-tree-node-inline-icon" : ""), (m.iconCls ? " " + m.iconCls : ""), '" unselectable="on" ', ((m.icon || m.iconCls) ? "" : 'style="display: none;"') + "/>", (m.icon || m.iconCls) ? "<span>&nbsp</span>" : "", '<a hidefocus="on" class="x-tree-node-anchor" href="', b, '" tabIndex="1" ', m.hrefTarget ? ' target="' + m.hrefTarget + '"' : "", '><span unselectable="on">', g(f.text), "</span></a>", "</div>", '<ul class="x-tree-node-ct" style="display:none;"></ul>', "</li>"].join("");
        if (o !== true && f.nextSibling && (c = f.nextSibling.ui.getEl())) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin", c, d)
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", l, d)
        }
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var j = this.elNode.childNodes;
        var i = 0;
        if (p) {
            this.rimgNode = j[i++]
        }
        this.indentNode = j[i++];
        this.ecNode = j[i++];
        if (h) {
            this.checkbox = j[i++];
            this.setCheckValue(this.getCheckValue());
            this.syncCheckCssClass()
        }
        this.iconNode = j[i++];
        if (m.icon || m.iconCls) {
            i++
        }
        this.anchor = j[i++];
        this.textNode = this.anchor.firstChild;
        if (e) {
            this.createInputField(e, m, this.elNode);
            i++
        }
        f.on("disabledchange", this.onDisabled, this)
    },
    onIdChange: function(b) {
        var a = Ext.util.Format.htmlEncode;
        if (this.rendered) {
            this.elNode.setAttribute("ext:tree-node-id", a(b))
        }
    },
    createInputField: function(b, a, c) {
        var d = b;
        if (Ext.isObject(b)) {
            this.inputConfig = Ext.apply({}, b);
            d = b.xtype || "textfield";
            delete b.xtype
        } else {
            this.inputConfig = {}
        }
        if (Ext.isDefined(a.value)) {
            this.inputConfig.value = a.value
        }
        this.inputConfig.renderTo = c;
        switch (d) {
            case "textfield":
                this.input = new SYNO.ux.TextField(this.inputConfig);
                break;
            case "numberfield":
                this.input = new SYNO.ux.NumberField(this.inputConfig);
                break
        }
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        if (this.rimgNode) {
            Ext.EventManager.on(this.rimgNode, "click", this.onRImgClick, this)
        }
        return a
    },
    onRImgClick: function() {
        this.node.fireEvent("rimgclick")
    },
    isDisabled: function() {
        var a = this.node;
        return (true === a.disabled)
    },
    onClick: function(a) {
        if (a.getTarget(".x-form-field")) {
            return
        }
        if (a.getTarget(".syno-tree-node-cb")) {
            this.toggleCheck()
        }
        return this.callParent(arguments)
    },
    onDblClick: function(a) {
        a.preventDefault();
        if (this.disabled) {
            return
        }
        if (this.fireEvent("beforedblclick", this.node, a) !== false) {
            if (!this.animating && this.node.isExpandable()) {
                this.node.toggle()
            }
            this.fireEvent("dblclick", this.node, a)
        }
    },
    onDisabled: function(b, a) {
        if (this.input) {
            if (a) {
                this.input.disable()
            } else {
                this.input.enable()
            }
        }
        if (this.checkbox) {
            if (a) {
                this.checkbox.addClassName("syno-ux-cb-disabled")
            } else {
                this.checkbox.removeClassName("syno-ux-cb-disabled")
            }
        }
    },
    onCheckChange: function() {
        this.syncCheckCssClass();
        this.fireEvent("checkchange", this.node, this.getCheckValue())
    },
    isValid: function() {
        if (this.node.disabled) {
            return true
        }
        if (this.input && !this.input.isValid()) {
            return false
        }
        return true
    },
    getInputValue: function() {
        if (!this.input || this.disabled) {
            return undefined
        }
        return this.input.getValue()
    },
    setInputValue: function(a) {
        if (!this.input) {
            return
        }
        this.input.setValue(a)
    },
    isChecked: function() {
        return this.getCheckValue()
    },
    getCheckValue: function() {
        return this.node.attributes.checked
    },
    toggleCheck: function() {
        var a = this.checkbox;
        if (true === this.node.disabled) {
            return
        }
        if (a) {
            this.setCheckValue(!this.getCheckValue())
        }
    },
    setCheckValue: function(a) {
        if (this.node.disabled) {
            return
        }
        if (a === this.getCheckValue()) {
            return
        }
        if (a === "false" || a === "off" || a === "0") {
            a = false
        } else {
            if (a === "gray") {
                a = "gray"
            } else {
                if (a === "white") {
                    a = "white"
                } else {
                    a = (a ? true : false)
                }
            }
        }
        this.node.attributes.checked = a;
        this.onCheckChange()
    },
    syncCheckCssClass: function() {
        var b = this.getCheckValue();
        var a = this.checkbox;
        if (!a) {
            return
        }
        Ext.each(["checked", "grayed", "whited", "disabled"], function(c) {
            this.checkbox.removeClassName("syno-ux-cb-" + c)
        }, this);
        this.checkbox.removeAttribute("style");
        if (b === true) {
            this.checkbox.addClassName("syno-ux-cb-checked")
        } else {
            if (b === "gray") {
                this.checkbox.addClassName("syno-ux-cb-grayed")
            } else {
                if (b === "white") {
                    this.checkbox.addClassName("syno-ux-cb-grayed");
                    if (SYNO.SDS.ThemeProvider.getThemeCls() === "business") {
                        this.checkbox.style.background = "url(webman/3rdparty/ActiveBackup/images/business/1x/checkbox4_normal.png)"
                    } else {
                        this.checkbox.style.background = "url(webman/3rdparty/ActiveBackup/images/default/1x/checkbox4_normal.png)"
                    }
                    this.checkbox.style.backgroundSize = "22px 22px"
                }
            }
        }
        if (this.node.disabled) {
            this.checkbox.addClassName("syno-ux-cb-disabled")
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.SelectiveFolderPanel", {
    extend: "SYNO.ux.FormPanel",
    remote_sessions_list: [],
    folder_chooser: null,
    root_config: null,
    constructor: function(a) {
        this.addClass("syno-activebackup-selective-folder");
        this.appWin = a.appWin;
        this.folder_chooser = new SYNO.SDS.ActiveBackup.Agentless.Component.FolderTreePanel({
            appWin: a.appWin,
            border: false,
            height: a.height - 14,
            width: a.width,
            padding: "0px",
            root: {},
            rootVisible: a.rootVisible,
            listeners: {
                beforeclick: function() {
                    return false
                }
            }
        });
        this.callParent([Ext.apply({
            padding: "0px",
            items: this.folder_chooser
        }, a)])
    },
    addSelectedNode: function(f, e) {
        var h = this.folder_chooser.getRootNode();
        var b = 0;
        var i;
        var a;
        var d = function(j) {
            if (j.attributes.path == i) {
                a = j
            }
        };
        while (true) {
            b = f.indexOf("/", b + 1);
            if (b >= 0) {
                i = f.substr(0, b)
            } else {
                i = f
            }
            var c = this.basename(i);
            a = undefined;
            Ext.each(h.childNodes, d);
            if (a === undefined) {
                var g;
                if (i === f) {
                    if (e) {
                        g = "white"
                    } else {
                        g = true
                    }
                } else {
                    g = "gray"
                }
                a = new Ext.tree.AsyncTreeNode({
                    uiProvider: SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeUI,
                    text: c,
                    iconCls: "x-tree-node-icon",
                    checked: g,
                    checked_TBD: false,
                    path: i,
                    qtip: Ext.util.Format.htmlEncode(c),
                    type: 1,
                    loader: new SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeLoader({
                        directFn: this.root_config.directFn
                    })
                });
                a = h.appendChild(a)
            } else {
                if (a.attributes.checked === false) {
                    a.attributes.checked = "gray"
                }
            }
            if (b < 0) {
                break
            }
            h = a
        }
    },
    addFilteredNode: function(d) {
        var h = this.folder_chooser.getRootNode();
        var e = 0;
        var g;
        var c;
        var b = function(i) {
            if (i.attributes.path == g) {
                c = i
            }
        };
        while (true) {
            e = d.indexOf("/", e + 1);
            if (e >= 0) {
                g = d.substr(0, e)
            } else {
                g = d
            }
            var f = this.basename(g);
            c = undefined;
            Ext.each(h.childNodes, b);
            if (c === undefined) {
                var a;
                if (g == d) {
                    a = false
                } else {
                    a = "white"
                }
                c = new Ext.tree.AsyncTreeNode({
                    uiProvider: SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeUI,
                    text: f,
                    iconCls: "x-tree-node-icon",
                    checked: a,
                    checked_TBD: false,
                    path: g,
                    qtip: Ext.util.Format.htmlEncode(f),
                    type: 1,
                    loader: new SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeLoader({
                        directFn: this.root_config.directFn
                    })
                });
                c = h.appendChild(c)
            } else {
                if (c.attributes.checked === true) {
                    c.attributes.checked = "white"
                }
            }
            if (e < 0) {
                break
            }
            h = c
        }
    },
    drawPanel: function() {
        Ext.each(this.remote_sessions_list, function(b) {
            if (b.selected_path !== "") {
                var a = (b.filtered_paths.length > 0);
                this.addSelectedNode(b.selected_path, a)
            }
            Ext.each(b.filtered_paths, function(c) {
                this.addFilteredNode(c)
            }, this)
        }, this);
        this.expandRoot()
    },
    getFolderList: function(f) {
        var c = function(i, h, j) {
            Ext.each(i.childNodes, function(k) {
                if (k.attributes.checked === true) {}
                if (k.attributes.checked === "white") {
                    c(k, h, j)
                }
                if (k.attributes.checked === "gray") {
                    h.push(k.attributes.path);
                    a(k, j)
                }
                if (k.attributes.checked === false) {
                    h.push(k.attributes.path)
                }
            })
        };
        var a = function(h, i) {
            Ext.each(h.childNodes, function(k) {
                var j = [];
                if (k.attributes.checked === true) {
                    i.push({
                        selected_path: k.attributes.path,
                        filtered_paths: j
                    })
                } else {
                    if (k.attributes.checked === "white") {
                        c(k, j, i);
                        i.push({
                            selected_path: k.attributes.path,
                            filtered_paths: j
                        })
                    } else {
                        if (k.attributes.checked === "gray") {
                            a(k, i)
                        } else {
                            if (k.attributes.checked === false) {}
                        }
                    }
                }
            })
        };
        var b = this.folder_chooser.getRootNode();
        if (b.attributes.checked === true) {
            var e = {
                selected_path: b.attributes.path,
                filtered_paths: []
            };
            f.push(e)
        }
        if (b.attributes.checked === "white") {
            var d = [];
            c(b, d, f);
            var g = {
                selected_path: b.attributes.path,
                filtered_paths: d
            };
            f.push(g)
        }
        if (b.attributes.checked === "gray") {
            a(b, f)
        }
        if (b.attributes.checked === false) {}
    },
    validate: function() {
        var a = this.folder_chooser.getRootNode();
        return (a.attributes.checked !== false)
    },
    basename: function(b) {
        var a = b.lastIndexOf("/");
        return (a >= 0) ? b.substr(a + 1) : b
    },
    setRemoteFolderFilter: function(a) {
        a.sort(function(d, c) {
            return d.selected_path.length - c.selected_path.length
        });
        this.remote_sessions_list = a
    },
    setRootVisible: function(a) {
        if (this.folder_chooser) {
            this.folder_chooser.rootVisible = a
        }
    },
    setRootNode: function(a) {
        this.root_config = a;
        this.folder_chooser.setRootNode(this.prepareRoot(a))
    },
    expandRoot: function() {
        var a = this.folder_chooser;
        a.getRootNode().expand(false, true)
    },
    prepareRoot: function(b) {
        var a = function(d) {
            var c = false;
            if (d.length === 0) {
                return false
            }
            Ext.each(d, function(e) {
                if ("" === e.selected_path) {
                    if (e.filtered_paths.length === 0) {
                        c = true;
                        return
                    } else {
                        c = "white";
                        return
                    }
                }
            });
            return (c === false) ? "gray" : c
        };
        return new Ext.tree.AsyncTreeNode({
            uiProvider: (!this.folder_chooser.rootVisible) ? "" : SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeUI,
            text: b.root_text,
            iconCls: "x-tree-node-icon",
            checked: (!this.folder_chooser.rootVisible) ? "gray" : a(this.remote_sessions_list),
            checked_TBD: true,
            path: b.path,
            loader: new SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeLoader({
                directFn: b.directFn
            })
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeLoader", {
    extend: "SYNO.SDS.ActiveBackup.Agentless.Component.TreeLoader",
    clearOnLoad: false,
    paramsAsHash: true,
    constructor: function(b) {
        var a = this.callParent(arguments);
        this.directFn = b.directFn;
        this.on("beforeload", function(d, c) {
            this.baseParams.path = c.attributes.path
        }, this);
        return a
    },
    createNode: function(a) {
        a.checked = false;
        a.checked_TBD = true;
        a.uiProvider = "SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeUI";
        a.qtip = Ext.util.Format.htmlEncode(a.text);
        return this.callParent(arguments)
    }
});
Ext.define("SYNO.SDS.ActiveBackup.Agentless.Component.FolderNodeUI", {
    extend: "SYNO.SDS.ActiveBackup.Agentless.Component.TreeNodeUI",
    toggleCheck: function() {
        var a = this.checkbox;
        if (true === this.node.disabled) {
            return
        }
        if (a) {
            if (null === this.node.parentNode) {
                if (true === this.getCheckValue()) {
                    this.setCheckValue(false)
                } else {
                    this.setCheckValue(true)
                }
            } else {
                if (true === this.getCheckValue()) {
                    this.setCheckValue(false)
                } else {
                    this.setCheckValue(true)
                }
            }
        }
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.AdvancedSettingPanel", {
    extend: "SYNO.SDS.ModalWindow",
    device: null,
    panels: null,
    apply: null,
    cancel: null,
    constructor: function(a) {
        this.appWin = a.appWin;
        this.device = a.device;
        this.apply = a.onApply;
        this.cancel = a.onCancel;
        this.callParent([this.fillConfig(a)])
    },
    activate: function() {},
    initEvents: function() {
        this.callParent(arguments);
        this.mon(this, "activate", this.activate, this)
    },
    fillConfig: function(c) {
        var d = new SYNO.ux.Button({
            btnStyle: "blue",
            text: _T("common", "apply"),
            itemId: "apply_button",
            listeners: {
                click: this.onApply,
                scope: this
            }
        });
        var b = new SYNO.ux.Button({
            btnStyle: "gray",
            text: _LABS("btn", "cancel"),
            itemId: "cancel_button",
            listeners: {
                click: this.onCancel,
                scope: this
            }
        });
        this.panels = {
            filter_setting_panel: this.getFilterSettingPanel(c)
        };
        if (c.device.os_name == "rsync") {
            this.panels = Ext.apply({
                transfer_setting_panel: this.getTransferSettingPanel(c)
            }, this.panels)
        }
        var a = {
            closable: true,
            title: _LABS("common", "advance_setting"),
            resizable: false,
            border: true,
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                activeTab: 0,
                deferredRender: false,
                items: Object.values(this.panels)
            }],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [d, b]
            }
        };
        return Ext.apply(a, c)
    },
    getTransferSettingPanel: function(b) {
        var d = new SYNO.ux.NumberField({
            fieldLabel: _LABS("task_info", "bandwidth"),
            itemId: "bandwidth",
            regex: /^\d+$/,
            minValue: 0,
            maxValue: 1073741824,
            allowBlank: false,
            allowNegative: false,
            maxlength: 10,
            value: b.defaultsettings.bandwidth
        });
        var e = new SYNO.ux.Checkbox({
            itemId: "compress_transfer",
            boxLabel: _LABS("task_info", "enable_compress"),
            checked: b.defaultsettings.enable_compress_transfer
        });
        var c = new SYNO.ux.Checkbox({
            itemId: "block_transfer",
            boxLabel: _LABS("task_info", "enable_block_transfer"),
            checked: b.defaultsettings.agentless_enable_block_transfer,
            initEvents: function() {
                SYNO.SDS.Utils.AddTip(this.getEl(), _LABS("agentlessbk", "block_trans_desc"))
            }
        });
        var a = new SYNO.ux.FormPanel({
            border: false,
            frame: false,
            labelWidth: 200,
            fieldWidth: 145,
            itemId: "transmission_setting_panel",
            title: _LABS("common", "transmission_setting"),
            items: [d, e, c],
            validate: function() {
                return (d.validate())
            },
            getParams: function() {
                return {
                    bandwidth: d.getValue(),
                    enable_compress_transfer: e.getValue(),
                    agentless_enable_block_transfer: c.getValue()
                }
            }
        });
        return a
    },
    getFilterSettingPanel: function(b) {
        var a = new SYNO.ActiveBackup.Agentless.Filter.Panel({
            itemId: "filter_panel",
            title: _LABS("common", "filter_setting"),
            owner: this.owner,
            filterTreeWidth: "100%",
            filterTreeHeight: 290
        });
        a.fireEvent("setting", b.defaultsettings);
        return a
    },
    validate: function() {
        var a = true;
        Object.values(this.panels).each(function(b) {
            if (!b.validate()) {
                a = false;
                return false
            }
        });
        return a
    },
    getParams: function() {
        return Object.values(this.panels).reduce(function(b, a) {
            return Ext.apply(a.getParams(), b)
        }, {})
    },
    onApply: function() {
        if (!this.validate()) {
            return
        }
        if (this.apply) {
            this.apply(this.getParams())
        }
        this.close()
    },
    onCancel: function() {
        if (this.cancel) {
            this.cancel()
        }
        this.close()
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.Filter.TreeNodeUI", {
    extend: "Ext.tree.TreeNodeUI",
    checkboxStatus: "checked",
    renderElements: function(f, m, l, o) {
        this.indentMarkup = f.parentNode ? f.parentNode.ui.getChildIndent() : "";
        var h = Ext.isBoolean(m.checked) || m.checked === "gray",
            k = Ext.isBoolean(m.hide_checkbox) && m.hide_checkbox === true,
            g = Ext.util.Format.htmlEncode,
            e = m.input,
            c, b = this.getHref(m.href),
            d = ['<li class="x-tree-node syno-extended-tree-node"><div ext:tree-node-id="', g(f.id), '" class="x-tree-node-el x-tree-node-leaf x-unselectable ', m.cls, '" unselectable="on">', m.hasRemoveButton ? ('<img alt="" src="' + this.emptyIcon + '" class= "syno-activebackup-tree-node-remove" style="float: right" />') : "", '<span class="x-tree-node-indent">', this.indentMarkup, "</span>", '<img alt="" src="', this.emptyIcon, '" class="x-tree-ec-icon x-tree-elbow" />', h ? ('<img alt="" src="' + this.emptyIcon + '"' + (k ? ' style="display: none;"' : "") + ' class="syno-activebackup-tree-node-cb syno-ux-checkbox-icon syno-ux-cb-' + this.checkboxStatus + '" />') : "", '<img alt="" src="', m.icon || this.emptyIcon, '" class="syno-tree-node-icon', (m.icon ? " x-tree-node-inline-icon" : ""), (m.iconCls ? " " + m.iconCls : ""), '" unselectable="on" ', ((m.icon || m.iconCls) ? "" : 'style="display: none;"') + "/>", (m.icon || m.iconCls) ? "<span>&nbsp</span>" : "", '<a hidefocus="on" class="x-tree-node-anchor" href="', b, '" tabIndex="1" ', m.hrefTarget ? ' target="' + m.hrefTarget + '"' : "", '><span unselectable="on" style="text-overflow: ellipsis !important; white-space: nowrap !important; width: 275px !important; display: inline-block;line-height: 15px; padding-top: 0px; overflow-x: hidden; vertical-align: middle">', g(f.text), "</span></a>", "</div>", '<ul class="x-tree-node-ct" style="display:none;"></ul>', "</li>"].join("");
        if (o !== true && f.nextSibling && (c = f.nextSibling.ui.getEl())) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin", c, d)
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", l, d)
        }
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var j = this.elNode.childNodes;
        var i = 0;
        if (m.hasRemoveButton) {
            this.rimgNode = j[i++]
        }
        this.indentNode = j[i++];
        this.ecNode = j[i++];
        if (h) {
            this.checkbox = j[i++]
        }
        this.iconNode = j[i++];
        if (m.icon || m.iconCls) {
            i++
        }
        this.anchor = j[i++];
        this.textNode = this.anchor.firstChild;
        if (e) {
            this.createInputField(e, m, this.elNode);
            i++
        }
        f.on("disabledchange", this.onDisabled, this)
    },
    setCheckboxViewByStatus: function(a) {
        if (this.checkboxStatus === a) {
            return
        }
        this.checkboxStatus = a;
        if (this.checkbox === undefined) {
            return
        }
        this.checkbox.removeClassName("syno-ux-cb-unchecked");
        this.checkbox.removeClassName("syno-ux-cb-checked");
        this.checkbox.removeClassName("syno-ux-cb-grayed");
        if (a === "unchecked") {
            this.checkbox.addClassName("syno-ux-cb-unchecked")
        } else {
            if (a === "checked") {
                this.checkbox.addClassName("syno-ux-cb-checked")
            } else {
                if (a === "grayed") {
                    this.checkbox.addClassName("syno-ux-cb-grayed")
                }
            }
        }
    },
    setChildrenCheckboxViewByStatus: function(a) {
        for (var b = 0; b < this.node.childNodes.length; b++) {
            this.node.childNodes[b].ui.setCheckboxViewByStatus(a)
        }
    },
    getCheckedChildNumber: function() {
        var a = 0;
        for (var b = 0; b < this.node.childNodes.length; b++) {
            if (this.node.childNodes[b].ui.checkboxStatus === "checked") {
                a++
            }
        }
        return a
    },
    refreshNodeStatus: function(b) {
        if (b.attributes.nodeLevel !== "category") {
            return
        }
        if (b.childNodes.length === 0) {
            b.ui.setCheckboxViewByStatus("unchecked");
            return
        }
        var c = b.ui.getCheckedChildNumber();
        var a = b.childNodes.length - c;
        if (b.childNodes.length === c) {
            b.ui.setCheckboxViewByStatus("checked")
        } else {
            if (b.childNodes.length === a) {
                b.ui.setCheckboxViewByStatus("unchecked")
            } else {
                b.ui.setCheckboxViewByStatus("grayed")
            }
        }
    },
    setCheckboxStatus: function(a) {
        this.setCheckboxViewByStatus(a);
        if (this.node.attributes.nodeLevel === "category") {
            this.setChildrenCheckboxViewByStatus(a)
        } else {
            this.refreshNodeStatus(this.node.parentNode)
        }
    },
    getCheckboxStatus: function() {
        return this.checkboxStatus
    },
    onCheckBoxClick: function(c, b) {
        var a = (this.checkboxStatus === "unchecked") ? "checked" : "unchecked";
        this.setCheckboxStatus(a)
    },
    onRemoveImgClick: function(c, b) {
        var a = this.node.parentNode;
        this.node.remove();
        this.refreshNodeStatus(a);
        if (a.attributes.nodeId === "customized" && !a.hasChildNodes()) {
            a.remove()
        }
    },
    initEvents: function() {
        var a = this.callParent(arguments);
        if (this.checkbox) {
            Ext.EventManager.on(this.checkbox, "click", this.onCheckBoxClick, this)
        }
        if (this.rimgNode) {
            Ext.EventManager.on(this.rimgNode, "click", this.onRemoveImgClick, this)
        }
        return a
    }
});
Ext.define("SYNO.ActiveBackup.Agentless.Filter.TreePanel", {
    extend: "SYNO.ux.TreePanel",
    constructor: function(a) {
        this.owner = a.owner;
        return this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            useArrows: true,
            rootVisible: false,
            border: true,
            padding: 0,
            margins: {
                top: 5,
                right: 0,
                bottom: 3,
                left: 0
            },
            useGradient: false,
            enableDD: false,
            root: new Ext.tree.TreeNode({
                text: ""
            })
        };
        return Ext.apply(a, b)
    },
    createCategoryNode: function(a) {
        return new Ext.tree.TreeNode({
            nodeLevel: "category",
            nodeId: a,
            text: _LABS("common", a),
            uiProvider: SYNO.ActiveBackup.Agentless.Filter.TreeNodeUI,
            checked: true,
            iconCls: "syno-activebackup-filter-node-icon-" + a
        })
    },
    createChildNode: function(b, a) {
        return new Ext.tree.TreeNode({
            nodeLevel: "child",
            nodeId: b,
            text: b,
            uiProvider: SYNO.ActiveBackup.Agentless.Filter.TreeNodeUI,
            checked: true,
            hasRemoveButton: (a === true),
            qtip: b,
            leaf: true
        })
    },
    createBuiltInCategories: function() {
        var d = [{
            nodeId: "music",
            extensions: ["aac", "aif", "aifc", "aiff", "ape", "au", "cdda", "dff", "dsf", "eaac", "flac", "kar", "l16", "m3u", "m4a", "m4b", "m4p", "mid", "midi", "mp1", "mp2", "mp3", "mpc", "mpga", "ogg", "pcm", "pls", "ra", "ram", "snd", "tta", "vqf", "wav", "wma"]
        }, {
            nodeId: "video",
            extensions: ["3g2", "3gp", "aaf", "amr", "ani", "asf", "asx", "avi", "dat", "dif", "divx", "dv", "dvr-ms", "f4v", "flv", "ifo", "m1v", "m2t", "m2ts", "m2v", "m4u", "m4v", "mkv", "mov", "movie", "mp4", "mpe", "mpeg", "mpeg1", "mpeg2", "mpeg4", "mpg", "mts", "mxf", "mxu", "ogm", "ogv", "qt", "qtx", "rec", "rm", "rmvb", "swf", "tp", "trp", "ts", "vob", "webm", "wmv", "wmv9", "wmx", "xvid"]
        }, {
            nodeId: "image",
            extensions: ["3fr", "ari", "arw", "bay", "bmp", "cap", "cgm", "cr2", "crw", "dcr", "dcs", "djv", "djvu", "dng", "drf", "eip", "erf", "fff", "gif", "ico", "ief", "iff", "iiq", "ilbm", "jp2", "jpe", "jpeg", "jpg", "k25", "kdc", "lbm", "mac", "mef", "mng", "mos", "mrw", "nef", "nrw", "obm", "orf", "pbm", "pct", "pcx", "pef", "pgm", "pic", "pict", "png", "pnm", "pnt", "pntg", "ppm", "psd", "ptx", "pxn", "qti", "qtif", "r3d", "raf", "ras", "raw", "rgb", "rw2", "rwl", "rwz", "sr2", "srf", "srw", "svg", "tga", "tif", "tiff", "ufo", "wbmp", "x3f", "xbm", "xpm", "xwd"]
        }, {
            nodeId: "document",
            extensions: ["doc", "docx", "epub", "htm", "html", "key", "mobi", "numbers", "odp", "ods", "odt", "pages", "pdf", "pps", "ppsx", "ppt", "pptx", "prc", "txt", "xls", "xlsx"]
        }];
        this.getRootNode().removeAll();
        for (var c = 0; c < d.size(); c++) {
            var a = d[c];
            var f = this.createCategoryNode(a.nodeId);
            for (var b = 0; b < a.extensions.size(); b++) {
                var e = a.extensions[b];
                var g = this.createChildNode("*." + e, false);
                f.appendChild(g)
            }
            this.getRootNode().appendChild(f)
        }
    },
    getType: function(b) {
        if (b.length > 2 && b.substr(0, 2) === "*.") {
            var a = b.substr(2);
            if (a.indexOf("*") === -1 && a.indexOf(".") === -1) {
                return "extension"
            }
        }
        if (b.indexOf("*") !== -1) {
            return "pattern"
        }
        return "file_name"
    },
    isBlackListMember: function(c, d) {
        var a = this.getType(d);
        if (a === "file_name") {
            if (c.file_names.indexOf(d) != -1) {
                return true
            }
        } else {
            if (a === "extension") {
                var b = d.substr(2);
                if (c.extensions.indexOf(b) != -1) {
                    return true
                }
            } else {
                if (a === "pattern") {
                    if (c.pattern.indexOf(d) != -1) {
                        return true
                    }
                }
            }
        }
        return false
    },
    addNodeToBlackList: function(c, d) {
        var a = this.getType(d);
        if (a === "file_name") {
            c.file_names.push(d)
        } else {
            if (a === "extension") {
                var b = d.substr(2);
                c.extensions.push(b)
            } else {
                if (a === "pattern") {
                    c.pattern.push(d)
                }
            }
        }
    },
    setFilterInfo: function(c) {
        this.createBuiltInCategories();
        var e, b;
        if (c.customized.size() > 0) {
            var f = this.createCategoryNode("customized");
            for (e = 0; e < c.customized.size(); e++) {
                f.appendChild(this.createChildNode(c.customized[e], true))
            }
            this.getRootNode().appendChild(f)
        }
        var a = this.getRootNode().childNodes;
        for (e = 0; e < a.size(); e++) {
            var g = a[e];
            var d = g.childNodes;
            for (b = 0; b < d.size(); b++) {
                var h = d[b];
                if (this.isBlackListMember(c.black_list, h.attributes.nodeId) === true) {
                    h.getUI().setCheckboxStatus("unchecked")
                }
            }
        }
    },
    getFilterInfo: function() {
        var d = {
            black_list: {
                extensions: [],
                file_names: [],
                pattern: []
            },
            customized: []
        };
        var b = this.getRootNode().childNodes;
        for (var f = 0; f < b.size(); f++) {
            var g = b[f];
            var a = (g.attributes.nodeId === "customized");
            var e = g.childNodes;
            for (var c = 0; c < e.size(); c++) {
                var h = e[c];
                if (h.getUI().getCheckboxStatus() === "unchecked") {
                    this.addNodeToBlackList(d.black_list, h.attributes.nodeId)
                }
                if (a === true) {
                    d.customized.push(h.attributes.nodeId)
                }
            }
        }
        return d
    },
    addCustomFilter: function(a) {
        var k;
        var h = this.getRootNode().childNodes;
        for (var g = 0; g < h.size(); g++) {
            var b = h[g];
            var e = b.childNodes;
            if (b.attributes.nodeId === "customized") {
                k = b
            }
            for (var f = 0; f < e.size(); f++) {
                var l = e[f];
                if (l.attributes.nodeId === a) {
                    b.expand();
                    l.getUI().setCheckboxStatus("unchecked");
                    l.select();
                    return
                }
            }
        }
        if (!k) {
            k = this.createCategoryNode("customized");
            this.getRootNode().appendChild(k)
        }
        var d = this.createChildNode(a, true);
        k.appendChild(d);
        k.expand();
        k.getOwnerTree().updateFleXcroll();
        d.getUI().setCheckboxStatus("unchecked");
        d.select()
    }
});
Ext.form.VTypes.ActiveBackupFilterWildcard = /^(\*){0,1}[^\*\?\\\/]{1,}(\*){0,1}$/;
Ext.form.VTypes.ActiveBackupFilter = function(a) {
    if (Ext.form.VTypes.ActiveBackupFilterWildcard.test(a)) {
        if (a !== "*.") {
            return true
        }
    }
    return false
};
Ext.define("SYNO.ActiveBackup.Agentless.Filter.Panel", {
    extend: "SYNO.ux.FormPanel",
    filterTreePanel: undefined,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            hideLabel: true,
            hideBorders: true,
            border: false,
            header: false,
            layout: "vbox",
            items: [{
                xtype: "syno_displayfield",
                value: _LABS("common", "file_filter_comment")
            }, this.getFilterTreePanel(b), {
                xtype: "syno_displayfield",
                value: _LABS("common", "customized_desc")
            }, this.getCustomInputField()],
            listeners: {
                setting: this.onSetting,
                scope: this
            }
        };
        return Ext.apply(a, b)
    },
    getFilterTreePanel: function(b) {
        if (this.filterTreePanel === undefined) {
            var a = {
                itemId: "filterTreePanel",
                owner: this.owner,
                width: b.filterTreeWidth ? b.filterTreeWidth : "100%",
                height: b.filterTreeHeight ? b.filterTreeHeight : "100%"
            };
            this.filterTreePanel = new SYNO.ActiveBackup.Agentless.Filter.TreePanel(a)
        }
        return this.filterTreePanel
    },
    onCustomFilterKeyUp: function(a, b) {
        var c = a.owner.getComponent("customInoutCompos").getComponent("customFilterButton");
        if (a.getValue().length > 0 && a.validate() === true) {
            c.enable()
        } else {
            c.disable()
        }
    },
    onCustomFilterButtonClicked: function(b, c) {
        var a = b.owner.getComponent("customInoutCompos").getComponent("customFilter");
        if (a.getValue().length > 0) {
            b.owner.filterTreePanel.addCustomFilter(a.getValue());
            a.setValue("")
        }
        var d = b.owner.getComponent("customInoutCompos").getComponent("customFilterButton");
        d.disable()
    },
    getCustomInputField: function() {
        return {
            xtype: "syno_panel",
            itemId: "customInoutCompos",
            layout: "border",
            width: "100%",
            height: 34,
            border: false,
            items: [{
                xtype: "syno_textfield",
                itemId: "customFilter",
                region: "center",
                margins: {
                    top: 5,
                    right: 6,
                    bottom: 0,
                    left: 0
                },
                vtype: "ActiveBackupFilter",
                emptyText: _LABS("common", "customized_comment"),
                owner: this,
                enableKeyEvents: true,
                listeners: {
                    keyup: this.onCustomFilterKeyUp
                }
            }, {
                xtype: "syno_button",
                itemId: "customFilterButton",
                region: "east",
                margins: {
                    top: 3,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                disabled: true,
                text: _LABS("common", "add"),
                owner: this,
                listeners: {
                    click: this.onCustomFilterButtonClicked
                }
            }]
        }
    },
    isDirty: function() {
        var d = false;
        var c = this.getParams().file_filter;
        var b = this.filter_info;

        function a(f, e) {
            return JSON.stringify(f.slice().sort()) === JSON.stringify(e.slice().sort())
        }
        d = (!a(c.black_list.extensions, b.black_list.extensions) || !a(c.black_list.file_names, b.black_list.file_names) || !a(c.black_list.pattern, b.black_list.pattern) || !a(c.customized, b.customized));
        return d
    },
    setFilterInfo: function(a) {
        this.filter_info = a;
        this.filterTreePanel.setFilterInfo(a)
    },
    getFilterInfo: function() {
        return this.filterTreePanel.getFilterInfo()
    },
    onSetting: function(a) {
        this.filter_info = a.file_filter;
        this.filterTreePanel.setFilterInfo(a.file_filter)
    },
    validate: function() {
        return this.getComponent("customInoutCompos").getComponent("customFilter").validate()
    },
    getParams: function() {
        return {
            file_filter: this.filterTreePanel.getFilterInfo()
        }
    }
});
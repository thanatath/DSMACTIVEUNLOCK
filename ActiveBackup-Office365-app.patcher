/* Copyright (c) 2018 Synology Inc. All rights reserved. */
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.UserServiceContainer", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a])
    },
    fillConfig: function(a) {
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-user-service-container",
            id: this.user_card_panel_id = Ext.id(),
            layout: "fit",
            html: '<div class="panel_wrapper"><div class="line"><div class="card_wrapper"><div class="seperator"></div><div class="icon_image_wrapper"><div id="' + this.user_card_panel_id + '.drive_img" class="icon_image drive enable" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("common", "drive") + '"></div></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.drive" class="value">-</div></div></div><div class="card_wrapper"><div class="icon_image_wrapper"><div id="' + this.user_card_panel_id + '.mail_img" class="icon_image mail enable" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("common", "mail") + '"></div></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.mail" class="value">-</div></div></div></div><div class="line"><div class="card_wrapper"><div class="seperator"></div><div class="icon_image_wrapper"><div id="' + this.user_card_panel_id + '.contact_img" class="icon_image contact enable" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("common", "contact") + '"></div></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.contact" class="value">-</div></div></div><div class="card_wrapper"><div class="icon_image_wrapper"><div id="' + this.user_card_panel_id + '.calendar_img" class="icon_image calendar enable" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("common", "calendar") + '"></div></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.calendar" class="value">-</div></div></div></div></div>'
        };
        return Ext.apply(a, b)
    },
    loadData: function(c) {
        var b = c.slice();
        var a = this.getStatisticData(b);
        Ext.get(this.user_card_panel_id + ".drive").update(a.total_enable_drive.toString(10) + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", a.total_enable_drive));
        Ext.get(this.user_card_panel_id + ".mail").update(a.total_enable_mail.toString(10) + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", a.total_enable_mail));
        Ext.get(this.user_card_panel_id + ".contact").update(a.total_enable_contact.toString(10) + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", a.total_enable_contact));
        Ext.get(this.user_card_panel_id + ".calendar").update(a.total_enable_calendar.toString(10) + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", a.total_enable_calendar))
    },
    getStatisticData: function(b) {
        var a = {};
        a.total_enable_drive = 0;
        a.total_enable_mail = 0;
        a.total_enable_contact = 0;
        a.total_enable_calendar = 0;
        Ext.each(b, function(c) {
            a.total_enable_drive += c.enable_drive;
            a.total_enable_mail += c.union_enable_mail;
            a.total_enable_contact += c.enable_contact;
            a.total_enable_calendar += c.enable_calendar
        }, this);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.UserService", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "user_service"),
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.user_service_container = new SYNO.SDS.ActiveBackupOffice365.Model.UserServiceContainer({
            owner: this,
            itemId: "user_service_container",
            region: "center",
            appWin: b.appWin
        });
        var a = {
            itemId: "user_service",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.user_service_container]
            }]
        };
        return Ext.apply(a, b)
    },
    loadData: function(a) {
        this.user_service_container.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.StatusCalendarContainer", {
    extend: "SYNO.ux.Panel",
    CalendarStatus: {
        SUCCESS: "success",
        ERROR: "error",
        WARNING: "warning",
        FUTURE: "future",
        NO_RECORD: "no_record"
    },
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.store.addListener("datachanged", Ext.createDelegate(this.loadData, this))
    },
    fillConfig: function(a) {
        this.calendar_panel = new SYNO.ux.Panel({
            itemId: "calendar_panel",
            cls: "calendar_panel",
            id: this.c_id = Ext.id(),
            border: false,
            html: '<div class = "header"><div class = "label"></div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "sun") + '</div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "mon") + '</div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "tue") + '</div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "wed") + '</div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "thr") + '</div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "fri") + '</div><div class = "item">' + SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "sat") + '</div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w0">-</div><div class = "item under_line"><div id="' + this.c_id + '.28" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.29" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.30" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.31" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.32" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.33" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.34" class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w1">-</div><div class = "item under_line"><div id="' + this.c_id + '.21" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.22" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.23" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.24" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.25" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.26" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.27" class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w2">-</div><div class = "item under_line"><div id="' + this.c_id + '.14" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.15" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.16" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.17" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.18"  class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.19"  class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.20"  class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w3">-</div><div class = "item under_line"><div id="' + this.c_id + '.7" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.8" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.9" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.10" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.11" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.12" class = "status-icon"></div></div><div class = "item under_line"><div id="' + this.c_id + '.13" class = "status-icon"></div></div></div><div class = "line"><div class = "label" id="' + this.c_id + '.w4">-</div><div class = "item"><div id="' + this.c_id + '.0" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.1" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.2" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.3" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.4" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.5" class = "status-icon"></div></div><div class = "item"><div id="' + this.c_id + '.6" class = "status-icon"></div></div></div>'
        });
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-status-calendar-container",
            items: [this.calendar_panel]
        };
        return Ext.apply(a, b)
    },
    loadData: function(a) {
        this.getWeekTable();
        this.store.each(function(b) {
            this.setWeekIndex(b.data)
        }.createDelegate(this));
        this.updateView()
    },
    getDummyString: function(a) {
        if (a < 10) {
            return "0" + a
        }
        return a
    },
    getTimeString: function(f, b) {
        var a = new Date(f * 1000).getDate();
        var c = new Date(f * 1000).getMonth() + 1;
        var e = new Date(b * 1000).getDate();
        var d = new Date(b * 1000).getMonth() + 1;
        return this.getDummyString(c) + "/" + this.getDummyString(a) + " ~ " + this.getDummyString(d) + "/" + this.getDummyString(e)
    },
    updateView: function() {
        Ext.get(this.c_id + ".w0").update(SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "this_week"));
        var d = this.endDateTimeStamp + 27 * 60 * 60 * 24;
        var f = this.endDateTimeStamp + 21 * 60 * 60 * 24;
        Ext.get(this.c_id + ".w1").update(this.getTimeString(f, d));
        var o = this.endDateTimeStamp + 20 * 60 * 60 * 24;
        var c = this.endDateTimeStamp + 14 * 60 * 60 * 24;
        Ext.get(this.c_id + ".w2").update(this.getTimeString(c, o));
        var b = this.endDateTimeStamp + 13 * 60 * 60 * 24;
        var a = this.endDateTimeStamp + 7 * 60 * 60 * 24;
        Ext.get(this.c_id + ".w3").update(this.getTimeString(a, b));
        var k = this.endDateTimeStamp + 6 * 60 * 60 * 24;
        var n = this.endDateTimeStamp;
        Ext.get(this.c_id + ".w4").update(this.getTimeString(n, k));
        for (var e = 0; e < this.weektable.length; e++) {
            var m = this.weektable[e].error_count + this.weektable[e].warning_count + this.weektable[e].success_count;
            if (0 === m) {
                continue
            } else {
                if (this.weektable[e].success_count === m) {
                    this.weektable[e].status = this.CalendarStatus.SUCCESS
                } else {
                    if (this.weektable[e].error_count > 0) {
                        this.weektable[e].status = this.CalendarStatus.ERROR
                    } else {
                        this.weektable[e].status = this.CalendarStatus.WARNING
                    }
                }
            }
        }
        for (var h = 0; h < this.weektable.length; h++) {
            var g = this.weektable[h];
            var l = Ext.get(this.c_id + "." + h);
            l.removeClass("success");
            l.removeClass("error");
            l.removeClass("warning");
            l.removeClass("future");
            l.removeClass("no_record");
            l.addClass(g.status);
            if (g.status === "future") {
                l.set({
                    "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "upcoming")
                });
                continue
            }
            if (g.status === "no_record") {
                l.set({
                    "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("status_calendar", "no_record")
                });
                continue
            }
            var p = SYNO.SDS.ActiveBackupOffice365.String("task_status", "success") + ": " + g.success_count + "</br>";
            p += SYNO.SDS.ActiveBackupOffice365.String("task_status", "error") + ": " + g.error_count + "</br>";
            p += SYNO.SDS.ActiveBackupOffice365.String("common", "warning") + ": " + g.warning_count + "</br>";
            l.set({
                "ext:qtip": p
            });
            l.addListener("click", Ext.createDelegate(this.jumpTo, this), this, this.weektable[h])
        }
    },
    jumpTo: function(c, b, d, a) {
        this.fireEvent("jump_to", d)
    },
    getWeekTable: function() {
        this.now = new Date();
        this.today = this.now.getDay();
        var f = 28 + this.today;
        var e = this.now.getTime() / 1000;
        this.startDateTimeStamp = e + (6 - this.today) * 60 * 60 * 24;
        this.endDateTimeStamp = this.startDateTimeStamp - 34 * 60 * 60 * 24;
        this.weektable = [];
        this.date_index_table = [];
        for (var c = 0; c < 35; c++) {
            if (c > f) {
                this.weektable.push({
                    status: this.CalendarStatus.FUTURE,
                    success_count: 0,
                    error_count: 0,
                    warning_count: 0,
                    min_last_run_time: 0,
                    last_run_time: 0
                })
            } else {
                this.weektable.push({
                    status: this.CalendarStatus.NO_RECORD,
                    success_count: 0,
                    error_count: 0,
                    warning_count: 0,
                    min_last_run_time: 0,
                    last_run_time: 0
                })
            }
            var b = this.endDateTimeStamp + c * 86400;
            var g = new Date(b * 1000);
            var a = (g.getMonth() + 1) + "/" + g.getDate();
            this.date_index_table[a] = c
        }
    },
    getWeekDayIndex: function(b) {
        var c = new Date(b * 1000);
        var a = (c.getMonth() + 1) + "/" + c.getDate();
        return this.date_index_table[a]
    },
    setWeekIndex: function(a) {
        var b = this.getWeekDayIndex(a.last_execution_time);
        if (b === undefined) {
            return
        }
        if (a.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.OK) {
            this.weektable[b].success_count++
        } else {
            if (a.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR) {
                this.weektable[b].error_count++
            } else {
                if (a.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING) {
                    this.weektable[b].warning_count++
                }
            }
        }
        if (this.weektable[b].min_last_run_time === 0 || a.last_execution_time < this.weektable[b].min_last_run_time) {
            this.weektable[b].min_last_run_time = a.last_execution_time
        }
        if (a.last_execution_time > this.weektable[b].last_run_time) {
            this.weektable[b].last_run_time = a.last_execution_time
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.LastBackupStatus", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "last_backup_status"),
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.status_calendar_container = new SYNO.SDS.ActiveBackupOffice365.Model.StatusCalendarContainer({
            owner: this,
            itemId: "status_calendar_container",
            region: "center",
            appWin: b.appWin,
            store: b.appWin.application.getStore("OverViewTrendUsage")
        });
        var a = {
            itemId: "last_backup_status",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.status_calendar_container]
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.UserUsageContainer.Container", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.store.addListener("datachanged", Ext.createDelegate(this.onDataChange, this))
    },
    fillConfig: function(b) {
        var a = {
            border: false,
            layout: "card",
            height: b.height,
            width: b.width,
            activeItem: 0,
            cls: "syno-activebackupoffice365-user_usage-container",
            items: [this.panel = new SYNO.SDS.ActiveBackupOffice365.Model.UserUsagePanel({
                owner: this,
                layout: "fit",
                store: b.store
            }), {
                xtype: "panel",
                index: 1,
                border: false,
                layout: "fit",
                cls: "empty-panel",
                html: '<div class="background-wrapper"><div class="background"><div class="img"></div><div class="desc-title">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data") + "</div></div></div>"
            }]
        };
        return Ext.apply(a, b)
    },
    onDataChange: function() {
        if (this.store.getCount() === 0) {
            this.layout.setActiveItem(1)
        } else {
            this.layout.setActiveItem(0)
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.UserUsagePanel", {
    extend: "Ext.Panel",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(a) {
        this.field_bar = new SYNO.ux.Panel({
            region: "north",
            cls: "field",
            html: '<div class="user_name_label">' + SYNO.SDS.ActiveBackupOffice365.String("account_info", "usage_user_name") + '</div><div class="usage_label">' + SYNO.SDS.ActiveBackupOffice365.String("account_info", "size") + "</div>",
            height: 28
        });
        this.list = new SYNO.SDS.ActiveBackupOffice365.Model.UserUsageContainer.List({
            owner: this,
            region: "center",
            cls: "list",
            store: a.store
        });
        var b = {
            border: false,
            layout: "border",
            items: [this.field_bar, this.list]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.UserUsageContainer.List", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent(arguments)
    },
    createTpl: function() {
        var a = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap">', '<div class="item-summary">', '<div class="account_name" ext:qtip="{account_name_tooltip:htmlEncode} ({task_name_tooltip:htmlEncode})">', "{account_name_str:htmlEncode}", "</div>", '<div class="usage">', '<div class="usage_percentage">{usage_percentage_str}</div>', '<div class="usage_total">{usage_total_str}</div>', "</div>", "</div>", "</div>", "</tpl>");
        return a
    },
    prepareData: function(g, b, a) {
        if (b === 0) {
            this.max = g.usage_total
        }
        var e = b + 1;
        g.account_name = g.user_email.split("@")[0];
        g.account_name_str = e + ". " + g.account_name;
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(g.usage_total);
        var d = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(g.usage_total);
        g.usage_total_str = c + " " + d;
        var f = parseFloat(g.usage_percentage).toFixed(2);
        if (g.usage_total > 0 && f < 1) {
            f = "< 1"
        }
        g.usage_percentage_str = "(" + f + " %)";
        g.account_name_tooltip = Ext.util.Format.htmlEncode(g.account_name);
        g.task_name_tooltip = Ext.util.Format.htmlEncode(g.task_name);
        return g
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.UserUsage", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "user_usage"),
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.user_usage_container = new SYNO.SDS.ActiveBackupOffice365.Model.UserUsageContainer.Container({
            owner: this,
            itemId: "user_service_container",
            region: "center",
            store: b.appWin.application.getStore("OverViewUsersStatistics"),
            appWin: b.appWin
        });
        var a = {
            itemId: "user_usage",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.user_usage_container]
            }]
        };
        return Ext.apply(a, b)
    },
    loadData: function(a) {
        this.user_usage_container.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.CurrentActivitiesContainer", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.store.addListener("datachanged", Ext.createDelegate(this.onDataChange, this))
    },
    fillConfig: function(b) {
        var a = {
            border: false,
            layout: "card",
            height: b.height,
            width: b.width,
            activeItem: 0,
            cls: "syno-activebackupoffice365-current-activities-container",
            items: [this.grid = new SYNO.SDS.ActiveBackupOffice365.Model.CurrentActivitiesGrid({
                owner: this,
                layout: "fit",
                store: b.store
            }), {
                xtype: "panel",
                index: 1,
                border: false,
                layout: "fit",
                cls: "empty-panel",
                html: '<div class="background-wrapper"><div class="background"><div class="img"></div><div class="desc-title">' + SYNO.SDS.ActiveBackupOffice365.String("common", "no_running_activity") + "</div></div></div>"
            }]
        };
        return Ext.apply(a, b)
    },
    onDataChange: function() {
        if (this.store.getCount() === 0) {
            this.layout.setActiveItem(1)
        } else {
            this.layout.setActiveItem(0)
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.CurrentActivitiesGrid", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            store: b.store,
            colModel: this.createColumnModel(b),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            })
        };
        return Ext.apply(a, b)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "task_type"),
            dataIndex: "task_type",
            id: "task_type",
            width: 114,
            renderer: (function(e, k, g, m, d, l) {
                var h = g.data.task_type;
                var f = SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeColor(h);
                var j = SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeString(h);
                return '<span style="color:' + f + '">' + j + "</span>"
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_description"),
            dataIndex: "activities",
            width: 200,
            id: "activities",
            sortable: false,
            resizable: false,
            renderer: (function(e, h, f, l, d, j) {
                var k = Ext.util.Format.htmlEncode(f.data.task_name);
                if (f.data.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP) {
                    if (f.data.processing_name === "") {
                        return String.format(SYNO.SDS.ActiveBackupOffice365.String("tasklist", "queuing_task"), k)
                    }
                    var g = SYNO.SDS.ActiveBackupOffice365.Utils.getProcessingBackupString(f.data.processing_name, k);
                    h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(g) + '"';
                    return g
                } else {
                    if (f.data.runner_name === "") {
                        return "-"
                    }
                    var m = SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeProcessingRestoreString(f.data.service_type, f.data.runner_name, k);
                    h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(m) + '"';
                    return m
                }
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CurrentActivities", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "current_activities") + '<div id="' + (this.jump_btn_id = Ext.id()) + '"class="jump_btn"></div>',
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.current_activities_container = new SYNO.SDS.ActiveBackupOffice365.Model.CurrentActivitiesContainer({
            owner: this,
            itemId: "current_activities_container",
            region: "center",
            store: b.appWin.application.getStore("ActivitiesList"),
            appWin: b.appWin
        });
        var a = {
            itemId: "current_activities",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.current_activities_container]
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.EventLogContainer", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.grid.getStore().addListener("datachanged", Ext.createDelegate(this.onDataChange, this))
    },
    fillConfig: function(b) {
        var a = {
            border: false,
            layout: "card",
            height: b.height,
            width: b.width,
            activeItem: 0,
            cls: "syno-activebackupoffice365-event-log-container",
            items: [this.grid = new SYNO.SDS.ActiveBackupOffice365.Model.EventLogGrid({
                owner: this,
                layout: "fit"
            }), {
                xtype: "panel",
                index: 1,
                border: false,
                layout: "fit",
                cls: "empty-panel",
                html: '<div class="background-wrapper"><div class="background"><div class="img"></div><div class="desc-title">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data") + "</div></div></div>"
            }]
        };
        return Ext.apply(a, b)
    },
    onDataChange: function() {
        if (this.grid.getStore().getCount() === 0) {
            this.layout.setActiveItem(1)
        } else {
            this.layout.setActiveItem(0)
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.EventLogGrid", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = this.createStore(b);
        var a = {
            store: c,
            colModel: this.createColumnModel(b),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            })
        };
        return Ext.apply(a, b)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_type"),
            dataIndex: "log_type",
            width: 90,
            sortable: false,
            resizable: false,
            id: "type",
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                var k;
                if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.INFO_TYPE) {
                    k = SYNO.SDS.ActiveBackupOffice365.String("log", "info_type");
                    k = '<span class="info">' + k + "</span>"
                } else {
                    if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.ERROR_TYPE) {
                        k = SYNO.SDS.ActiveBackupOffice365.String("log", "error_type");
                        k = '<span class="error">' + k + "</span>"
                    } else {
                        if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.WARNING_TYPE) {
                            k = SYNO.SDS.ActiveBackupOffice365.String("log", "warning_type");
                            k = '<span class="warning">' + k + "</span>"
                        }
                    }
                }
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 80,
            sortable: false,
            resizable: false,
            renderer: (function(k, g, d, f, h, e) {
                var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(d.data.timestamp);
                g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"';
                return SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTimeFormat(d.data.timestamp, null, "H:i:s")
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_description"),
            dataIndex: "description",
            width: 230,
            id: "description",
            sortable: false,
            resizable: false,
            renderer: (function(k, g, d, f, h, e) {
                var j = Ext.util.Format.htmlEncode(d.data.description);
                j = '<div class="desc" ext:qtip="' + Ext.util.Format.htmlEncode(j) + '">' + j + "</div>";
                if (d.data.task_execution_id > 0) {
                    j = '<div class="log_link_wrapper"><div class="log_link"></div></div>' + j
                } else {
                    j = '<div class="log_link_wrapper"></div>' + j
                }
                return j
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            fields: ["task_id", "task_execution_id", "log_type", "timestamp", "description"],
            listeners: {
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.LastEventLog", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "event_log") + '<div id="' + (this.jump_btn_id = Ext.id()) + '"class="jump_btn"></div>',
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.event_log_container = new SYNO.SDS.ActiveBackupOffice365.Model.EventLogContainer({
            owner: this,
            itemId: "event_log_container",
            region: "center",
            appWin: b.appWin
        });
        var a = {
            itemId: "last_event_log",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.event_log_container]
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.StorageUsageBarContainer", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.color_task_id_pair = []
    },
    fillConfig: function(a) {
        this.storage_info = new SYNO.SDS.ActiveBackupOffice365.Model.StorageUsageBar({});
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-storage-usage-bar-container",
            items: [this.storage_info]
        };
        return Ext.apply(a, b)
    },
    loadData: function(b) {
        b.sort(function(d, c) {
            return c.storage_usage - d.storage_usage
        });
        var a = this.processData(b);
        this.data = a;
        this.storage_info.loadData(a, this.total_size_str)
    },
    processData: function(f) {
        var d = [];
        var a = 0;
        Ext.each(f, function(g) {
            a += g.storage_usage
        }, this);
        var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(a);
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(a);
        this.total_size_str = b + " " + c;
        var e = function(g) {
            var h = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(g);
            var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(g);
            return h + " " + j
        };
        Ext.each(f, function(k) {
            k.storage = e(k.storage_usage);
            var g;
            if (k.service_type === SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL) {
                var j = SYNO.SDS.ActiveBackupOffice365.Utils.getTooltipLabel(SYNO.SDS.ActiveBackupOffice365.String("common", "mail"), e(k.mail_used_storage));
                var h = SYNO.SDS.ActiveBackupOffice365.Utils.getTooltipLabel(SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail"), e(k.archive_mail_used_storage));
                g = j + h
            } else {
                g = SYNO.SDS.ActiveBackupOffice365.Utils.getTooltipLabel(SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeString(k.service_type), e(k.storage_usage))
            }
            k.tool_tip = g;
            k.color = SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeColor(k.service_type);
            k.percentage = Math.floor(k.storage_usage / a * 100);
            d.push(k)
        }, this);
        return d
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.StorageUsageBar", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a])
    },
    fillConfig: function(a) {
        var b = {
            owner: this,
            border: false,
            autoFlexcroll: false,
            id: this.space_info_id = Ext.id(),
            cls: "overall_statistics",
            html: '<div class="wrapper"><div class="label-wrapper" id="' + this.space_info_id + '.label-wrapper" ><div class="size_label">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "space_usage") + '</div><div id="' + this.space_info_id + '.size" class="size_value">-</div></div><div class="bar-wrapper" id="' + this.space_info_id + '.bar-wrapper"><div class="bars" id="' + (this.bars_id = Ext.id()) + '" ></div></div><div class="lengend-wrapper"><div class="legend"><div class="cube drive"></div><div class="header">' + SYNO.SDS.ActiveBackupOffice365.String("common", "drive") + '</div><div id="' + this.space_info_id + '.drive" class="value">-</div></div><div class="legend"><div class="right cube mail"></div><div class="header">' + SYNO.SDS.ActiveBackupOffice365.String("common", "mail") + '</div><div id="' + this.space_info_id + '.mail" class="right value">-</div></div><div class="legend"><div class="cube contact"></div><div class="header">' + SYNO.SDS.ActiveBackupOffice365.String("common", "contact") + '</div><div id="' + this.space_info_id + '.contact" class="value">-</div></div><div class="legend"><div class="right cube calendar"></div><div class="header">' + SYNO.SDS.ActiveBackupOffice365.String("common", "calendar") + '</div><div id="' + this.space_info_id + '.calendar" class="right value">-</div></div></div></div>'
        };
        return Ext.apply(a, b)
    },
    loadData: function(a, b) {
        this.setOverallStatistics(a, b);
        this.doLayout()
    },
    setOverallStatistics: function(c, d) {
        Ext.get(this.space_info_id + ".size").update(d);
        var b;
        Ext.get(this.bars_id).remove();
        var a = {
            tag: "div",
            cls: "bars",
            id: this.bars_id = Ext.id()
        };
        Ext.get(this.space_info_id + ".bar-wrapper").createChild(a);
        if (d === "0 KB") {
            Ext.get(this.space_info_id + ".drive").update(d);
            Ext.get(this.space_info_id + ".mail").update(d);
            Ext.get(this.space_info_id + ".contact").update(d);
            Ext.get(this.space_info_id + ".calendar").update(d);
            b = {
                tag: "div",
                cls: "bar empty",
                style: "width: 100%;",
                "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data")
            };
            Ext.get(this.bars_id).createChild(b);
            return
        }
        c.sort(function(f, e) {
            return e.percentage - f.percentage
        });
        Ext.each(c, function(e) {
            b = {
                tag: "div",
                style: "width:" + e.percentage + "%;",
                "ext:qtip": e.tool_tip
            };
            switch (e.service_type) {
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE:
                    Ext.get(this.space_info_id + ".drive").update(e.storage);
                    b.cls = "bar drive";
                    break;
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL:
                    Ext.get(this.space_info_id + ".mail").update(e.storage);
                    b.cls = "bar mail";
                    break;
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT:
                    Ext.get(this.space_info_id + ".contact").update(e.storage);
                    b.cls = "bar contact";
                    break;
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.CALENDAR:
                    Ext.get(this.space_info_id + ".calendar").update(e.storage);
                    b.cls = "bar calendar";
                    break
            }
            Ext.get(this.bars_id).createChild(b)
        }, this)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.StorageUsage", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "storage_usage"),
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.storage_usage_container = new SYNO.SDS.ActiveBackupOffice365.Model.StorageUsageBarContainer({
            owner: this,
            itemId: "storage_usage_container",
            region: "center",
            appWin: b.appWin,
            svgConfig: {
                margin: {
                    top: 2,
                    left: 2,
                    right: 2,
                    bottom: 2
                },
                border: 2,
                shadow: 1,
                width: 170,
                height: 170,
                radius: 80
            }
        });
        var a = {
            itemId: "storage_usage",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.storage_usage_container]
            }]
        };
        return Ext.apply(a, b)
    },
    loadData: function(a) {
        this.storage_usage_container.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.QuickTip", {
    extend: Ext.QuickTip,
    tagConfig: {
        namespace: "",
        attribute: "synotcqtip",
        width: "qwidth",
        target: "target",
        title: "qtitle",
        hide: "hide",
        cls: "qclass",
        align: "qalign",
        anchor: "anchor"
    }
});
SYNO.SDS.ActiveBackupOffice365.QuickTips = function() {
    var b, a = false;
    return {
        init: function(c) {
            if (!b) {
                if (!Ext.isReady) {
                    Ext.onReady(function() {
                        SYNO.SDS.ActiveBackupOffice365.QuickTips.init(c)
                    });
                    return
                }
                b = new SYNO.SDS.ActiveBackupOffice365.QuickTip({
                    elements: "header,body",
                    disabled: a
                });
                if (c !== false) {
                    b.render(Ext.getBody())
                }
            }
        },
        ddDisable: function() {
            if (b && !a) {
                b.disable()
            }
        },
        ddEnable: function() {
            if (b && !a) {
                b.enable()
            }
        },
        enable: function() {
            if (b) {
                b.enable()
            }
            a = false
        },
        disable: function() {
            if (b) {
                b.disable()
            }
            a = true
        },
        isEnabled: function() {
            return b !== undefined && !b.disabled
        },
        getQuickTip: function() {
            return b
        },
        register: function() {
            b.register.apply(b, arguments)
        },
        unregister: function() {
            b.unregister.apply(b, arguments)
        },
        tips: function() {
            b.register.apply(b, arguments)
        }
    }
}();
Ext.define("SYNO.SDS.ActiveBackupOffice365.Histogram.BaseChart", {
    extend: "Ext.BoxComponent",
    constructor: function(a) {
        Ext.apply(this, a);
        SYNO.SDS.ActiveBackupOffice365.QuickTips.init();
        var b = this.svgConfig || {
            width: this.width,
            height: this.height
        };
        this.callParent(arguments);
        this.d3 = SYNO.SDS.DataDrivenDocuments.DrawHelper;
        this.FocusTaskId = -1;
        this.timeInterval = "day";
        this.timePeriod = 45;
        this.pageOffset = 0;
        this.totalPageNumber = 0;
        this.barNumberPerPage = 0;
        this.barNumber = 0;
        this.last_point_date = 0;
        this.current_point_date = 0;
        this.bar_width = 16;
        this.width_per_data = 66;
        this.bar_left_margin = 45
    },
    onRender: function(b, a) {
        var c = this.d3;
        this.callParent(arguments);
        this.svg = c.select("#" + this.id).attr("class", this.cls).append("svg").attr("width", this.svgConfig.width).attr("height", this.svgConfig.height)
    },
    setTimeInterval: function(a) {
        this.timeInterval = a
    },
    setInitPageOffset: function() {
        this.pageOffset = 0
    },
    setPointedPageOffset: function() {
        this.pageOffset = 0
    },
    setPageOffset: function(a) {
        this.pageOffset = a
    },
    setNewFocusTaskId: function(a) {
        this.FocusTaskId = a
    },
    setNewSvgConfig: function(a) {
        this.svgConfig = a
    },
    loadData: function(h) {
        var c = this;
        var g = this.d3,
            f = this.svgConfig.width - this.svgConfig.margin.left - this.svgConfig.margin.right,
            a = this.svgConfig.height - this.svgConfig.margin.top - this.svgConfig.margin.bottom;
        if (!Ext.isDefined(h)) {
            h = []
        }
        var d = this.processData(h);
        var e = d.processed_data;
        this.barNumber = d.bar_numbers;
        var b = this.pagnation(e, f);
        if (this.svgGraphics) {
            this.svgGraphics.remove();
            this.svgGraphics = null
        }
        if (!this.svgShadow) {
            this.initShadowEffect()
        }
        this.svgEle = this.svg.data([b]).attr("width", this.svgConfig.width).attr("height", this.svgConfig.height).on("mouseover", function(m, l, k) {
            if (!c.select_bar) {
                g.select(c.last_selected).transition().duration(300).attr("stroke-width", "0px").attr("filter", null)
            }
            c.select_bar = false
        }).on("click", function(n, l, k) {
            if (!c.click_bar && !c.click_pre_next_btn) {
                var m = {
                    task_id: -1
                };
                c.onClickBar(m)
            }
            c.click_pre_next_btn = false;
            c.click_bar = false
        });
        this.svgGraphics = this.svgEle.append("g").attr("width", f).attr("height", a).attr("transform", "translate(" + this.svgConfig.margin.left + ", " + this.svgConfig.margin.top + ")");
        if (e.length === 0) {
            this.drawDefaultBackground(b, a, f);
            return
        } else {
            this.drawBackground(b, a, f);
            this.drawStatistics(b, a, f);
            this.drawNextButton(b, a, f);
            this.drawPreviousButton(b, a, f);
            return
        }
    },
    initShadowEffect: function() {
        var b = this.svg;
        var a = b.append("defs");
        this.shadowId = "shadow" + Ext.id();
        var d = a.append("filter").attr("id", this.shadowId);
        d.append("feGaussianBlur").attr("in", "SourceAlpha").attr("stdDeviation", 2).attr("result", "blur");
        d.append("feOffset").attr("in", "blur").attr("dx", 0).attr("dy", 0).attr("result", "offsetBlur");
        var e = d.append("feMerge");
        e.append("feMergeNode").attr("in", "offsetBlur");
        e.append("feMergeNode").attr("in", "SourceGraphic");
        this.boxShadowId = "boxshadow" + Ext.id();
        var c = a.append("filter").attr("id", this.boxShadowId);
        c.append("feGaussianBlur").attr("in", "SourceAlpha").attr("stdDeviation", 1).attr("result", "blur");
        c.append("feOffset").attr("in", "blur").attr("dx", 0).attr("dy", 0).attr("result", "offsetBlur");
        c.append("feBlend").attr("mode", "normal").attr("in", "SourceGraphic").attr("in2", "blurOut");
        this.svgShadow = a
    },
    drawNextButton: function(f, m, a) {
        if (this.totalPageNumber <= 1) {
            return
        }
        if (this.pageOffset === this.totalPageNumber - 1) {
            return
        }
        var o = this.d3;
        var n = this;
        var c = 26;
        var h = a - c;
        var j = this.svgGraphics.append("g").attr("transform", "translate(" + h + ", -" + this.svgConfig.margin.top + ")");
        var k = j.append("rect").attr("width", c).attr("height", m + this.svgConfig.margin.top).attr("fill", "rgba(0, 0, 0, 0)");
        var b = j.append("g").attr("transform", "translate(0," + (m / 2 - 10) + ")");
        var d = "next_icon" + Ext.id();
        var e = "next_icon_hover" + Ext.id();
        var g = b.append("defs");
        g.append("pattern").attr("width", 26).attr("height", 208).attr("id", d).append("image").attr("x", 0).attr("y", 0).attr("width", 26).attr("height", 208).attr("xlink:href", "webman/3rdparty/ActiveBackup-Office365/images/default/2x/icon_btn_chart_next.png");
        g.append("pattern").attr("width", 26).attr("height", 208).attr("id", e).append("image").attr("x", 0).attr("y", -104).attr("width", 26).attr("height", 208).attr("xlink:href", "webman/3rdparty/ActiveBackup-Office365/images/default/2x/icon_btn_chart_next.png");
        var l = b.append("rect").attr("width", c).attr("color", "red").attr("height", 52).attr("x", 0).attr("y", 0).attr("fill", "url(#" + d + ")").on("mouseover", function(r, q, p) {
            o.select(this).style("cursor", "pointer").attr("fill", "url(#" + e + ")")
        }).on("mouseout", function(r, q, p) {
            o.select(this).style("cursor", "default").attr("fill", "url(#" + d + ")")
        }).on("click", function(r, q, p) {
            if (n.pageOffset < n.totalPageNumber - 1) {
                n.pageOffset = n.pageOffset + 1
            }
            n.click_pre_next_btn = true;
            n.clickPreNextBtn()
        })
    },
    drawPreviousButton: function(f, m, c) {
        if (this.totalPageNumber <= 1) {
            return
        }
        if (this.pageOffset === 0) {
            return
        }
        var o = this.d3;
        var n = this;
        var e = 26;
        var h = 0;
        var a = this.svgGraphics.append("g").attr("transform", "translate(" + h + ", -" + this.svgConfig.margin.top + ")");
        var j = a.append("rect").attr("width", e).attr("height", m + this.svgConfig.margin.top).attr("fill", "rgba(0, 0, 0, 0)");
        var k = a.append("g").attr("transform", "translate(0," + (m / 2 - 10) + ")");
        var d = "previous_icon" + Ext.id();
        var l = "previous_icon_hover" + Ext.id();
        var g = k.append("defs");
        g.append("pattern").attr("width", 26).attr("height", 208).attr("id", d).append("image").attr("x", 0).attr("y", 0).attr("width", 26).attr("height", 208).attr("xlink:href", "webman/3rdparty/ActiveBackup-Office365/images/default/2x/icon_btn_chart_back.png");
        g.append("pattern").attr("width", 26).attr("height", 208).attr("id", l).append("image").attr("x", 0).attr("y", -104).attr("width", 26).attr("height", 208).attr("xlink:href", "webman/3rdparty/ActiveBackup-Office365/images/default/2x/icon_btn_chart_back.png");
        var b = k.append("rect").attr("width", e).attr("height", 52).attr("x", 0).attr("y", 0).attr("fill", "url(#" + d + ")").on("mouseover", function(r, q, p) {
            o.select(this).style("cursor", "pointer").attr("fill", "url(#" + l + ")")
        }).on("mouseout", function(r, q, p) {
            o.select(this).style("cursor", "default").attr("fill", "url(#" + d + ")")
        }).on("click", function(r, q, p) {
            if (n.pageOffset > 0) {
                n.pageOffset = n.pageOffset - 1
            }
            n.click_pre_next_btn = true;
            n.clickPreNextBtn()
        })
    },
    drawDefaultBackground: function(f, l, a) {
        var p = this.d3;
        var d = this.svgGraphics.append("g").attr("transform", "translate(0, -" + this.svgConfig.margin.top + ")");
        var k = d.append("rect").attr("width", a).attr("height", l + this.svgConfig.margin.top).attr("fill", "#F7F7F7").attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var j = d.append("line").attr("x1", 0).attr("y1", l * 3 / 4).attr("x2", a).attr("y2", l * 3 / 4).attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var m = d.append("line").attr("x1", 0).attr("y1", l * 2 / 4).attr("x2", a).attr("y2", l * 2 / 4).attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var o = d.append("line").attr("x1", 0).attr("y1", l * 1 / 4).attr("x2", a).attr("y2", l * 1 / 4).attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var h = d.append("text").style("font-size", "12px").attr("fill", "#505A64").style("text-anchor", "end").attr("x", -5).attr("y", l + 10).text("0.0");
        var n = "url(#" + this.boxShadowId + ")";
        var c = this.svgGraphics.append("g").attr("transform", "translate(" + (a / 2 - 160) + "," + (l / 2 - 30) + ")");
        this.iconId = "icon" + Ext.id();
        c.append("defs").append("pattern").attr("width", 35).attr("height", 35).attr("id", this.iconId).append("image").attr("width", 35).attr("height", 35).attr("xlink:href", "scripts/ext-3/ux/images/business/1x/Components/icon_information.png?v=05530520161738138");
        var e = c.append("rect").attr("width", 320).attr("height", 60).attr("rx", 5).attr("ry", 5).attr("synotcqtip", SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data")).attr("fill", "#FFFFFF").attr("stroke", "#DAE1E6").attr("stroke-width", "2px").on("mouseover", function(s, r, q) {
            this.parentNode.parentNode.appendChild(this.parentNode);
            p.select(this).transition().duration(300).attr("stroke-width", "1px").attr("filter", n)
        }).on("mouseout", function(s, r, q) {
            p.select(this).transition().duration(300).attr("stroke-width", "1px").attr("filter", null)
        });
        var b = c.append("rect").attr("synotcqtip", SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data")).attr("width", 35).attr("height", 35).attr("x", 12).attr("y", 12).attr("fill", "url(#" + this.iconId + ")");
        var g = c.append("text").style("font-size", "12px").attr("fill", "#505A64").attr("x", 80).attr("y", 35).text(SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data"))
    },
    getTimeRangeData: function(c) {
        var a = new Date();
        var b = [];
        Ext.each(c, function(e) {
            if (e.transfered_amount === 0) {
                return
            }
            var d = a.getTime() - this.timeInterval * (1000 * 3600 * 24);
            if (d > e.last_execution_time * 1000) {
                return
            }
            b.push(e)
        }, this);
        return b
    },
    pagnation: function(c, d) {
        this.barNumberPerPage = Math.floor((d - this.bar_left_margin) / this.width_per_data);
        this.totalPageNumber = Math.ceil(this.barNumber / this.barNumberPerPage);
        if (this.pageOffset !== 0 && this.pageOffset > this.totalPageNumber - 1) {
            this.pageOffset = this.totalPageNumber - 1
        }
        var g = this.pageOffset * this.barNumberPerPage + 1;
        var a = (this.pageOffset + 1) * this.barNumberPerPage;
        paged_data = [];
        var e, b;
        Ext.each(c, function(h) {
            if (h.index >= g && h.index <= a) {
                e = h;
                e.index = h.index - g + 1;
                paged_data.push(e)
            }
        }, this);
        var f = {};
        if (c && c.length !== 0) {
            f = {
                index: -10,
                accumulate_normalized_transfered_amount: c[0].normalized_max_amount,
                normalized_transfered_amount: 0,
                normalized_unit: c[0].normalized_unit,
                normalized_max_amount: c[0].normalized_max_amount
            };
            paged_data.push(f)
        }
        return paged_data
    },
    processData: function(b) {
        var a = {
            bar_numbers: 0,
            processed_data: b
        };
        return a
    },
    drawBackground: function(c, a, b) {},
    drawStatistics: function(c, a, b) {}
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Histogram.StageBarChart", {
    extend: "SYNO.SDS.ActiveBackupOffice365.Histogram.BaseChart",
    constructor: function(a) {
        Ext.apply(this, a);
        this.callParent(arguments)
    },
    getMaxAmount: function(a) {
        var b = 0;
        Ext.each(a, function(d) {
            var c = d.grouped_amount + d.accumulate_amount;
            b = (b > c) ? b : c
        }, this);
        return b
    },
    getTimeLabelArray: function(a, g) {
        var d = new Date();
        var b = function(j) {
            return new Date(d.getTime() - j * (1000 * 60 * 60))
        };
        var f = function(j) {
            return new Date(d.getTime() - j * (1000 * 60 * 60 * 24))
        };
        var h = [];
        this.time_index_pair = {};
        for (i = 0; i < a; i++) {
            var e;
            if (g === "hr") {
                var c = b(i);
                e = c.format("m/d/H");
                strTime = c.format("H") + ":00";
                if (c.format("H") === "00") {
                    strTime = c.format("m/d")
                }
                h.push({
                    strTime: strTime,
                    date: c,
                    index: a - i
                })
            } else {
                c = f(i);
                e = c.format("m/d");
                strTime = c.format("m/d");
                if (strTime === "01/01") {
                    strTime = c.format("Y")
                }
                h.push({
                    strTime: strTime,
                    date: c,
                    index: a - i
                })
            }
            this.time_index_pair[e] = a - i
        }
        return h
    },
    setInitPageOffset: function() {
        var a = this.totalPageNumber - 1;
        this.pageOffset = a
    },
    setPointedPageOffset: function() {
        var a = this.time_index_pair[this.last_point_date];
        if (!a) {
            var c = new Date(this.last_point_date);
            var b = new Date(c.getTime() + 1000 * 60 * 60 * 24);
            a = this.time_index_pair[b.format("m/d")]
        }
        this.pageOffset = Math.floor(a / this.barNumberPerPage)
    },
    setDataIndex: function(c) {
        var a = new Date();
        var b = [];
        Ext.each(c, function(f) {
            if (f.transfered_amount === 0) {
                return
            }
            var e = new Date(f.last_execution_time * 1000);
            if (this.timeInterval == "hour") {
                var d = e.format("m/d/H");
                f.index = this.time_index_pair[d];
                b.push(f)
            } else {
                d = e.format("m/d");
                f.index = this.time_index_pair[d];
                b.push(f)
            }
        }, this);
        return b
    },
    pagnation: function(d, e) {
        this.barNumberPerPage = Math.floor((e - this.bar_left_margin) / this.width_per_data);
        this.totalPageNumber = Math.ceil(this.barNumber / this.barNumberPerPage);
        var b = this.totalPageNumber - 1;
        if (this.pageOffset !== 0 && this.pageOffset > b) {
            this.pageOffset = b
        }
        var h = this.barNumber - ((b - this.pageOffset + 1) * this.barNumberPerPage);
        var a = this.barNumber - ((b - this.pageOffset) * this.barNumberPerPage);
        paged_data = [];
        var f, c;
        Ext.each(d, function(j) {
            if (j.index > h && j.index <= a) {
                f = j;
                f.index = j.index - h;
                paged_data.push(f)
            }
        }, this);
        var g = {};
        if (d && d.length !== 0) {
            g = {
                index: -10,
                accumulate_normalized_transfered_amount: d[0].normalized_max_amount,
                normalized_transfered_amount: 0,
                normalized_unit: d[0].normalized_unit,
                normalized_max_amount: d[0].normalized_max_amount
            };
            paged_data.push(g)
        }
        return paged_data
    },
    AddToolTip: function(a) {
        Ext.each(a, function(d) {
            var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(d.grouped_amount);
            var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(d.grouped_amount);
            d.size_string = String.format(SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size") + " : {0} {1}", b, c);
            d.tool_tip = Ext.util.Format.htmlEncode(d.task_name) + "<br/>";
            d.tool_tip += d.size_string + "<br/>";
            d.tool_tip += SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(d.last_execution_time)
        }, this)
    },
    getArrayDataIndex: function(d, b) {
        var c = null;
        for (var a = 0; a < d.length; a = a + 1) {
            if (d[a].task_id === b.task_id && d[a].index === b.index) {
                return a
            }
        }
        return c
    },
    groupDataByTimeIndex: function(b) {
        var a = [];
        Ext.each(b, function(d) {
            var c = this.getArrayDataIndex(a, d);
            if (c === null) {
                d.grouped_amount = d.transfered_amount;
                a.push(d);
                return true
            }
            a[c].grouped_amount += d.transfered_amount;
            if (a[c].last_execution_time < d.last_execution_time) {
                a[c].last_execution_time = d.last_execution_time
            }
        }, this);
        return a
    },
    processData: function(d) {
        if (this.timeInterval == "hour") {
            this.tickInterval = this.timePeriod * 24;
            this.interval_array = this.getTimeLabelArray(this.tickInterval, "hr")
        } else {
            this.tickInterval = this.timePeriod;
            this.interval_array = this.getTimeLabelArray(this.tickInterval, "day")
        }
        var a = [];
        a = this.setDataIndex(d);
        var c = [];
        c = this.groupDataByTimeIndex(a);
        this.AddToolTip(c);
        c.sort(function(j, h) {
            var m = j.task_id;
            var l = h.task_id;
            var k = j.last_execution_time;
            var n = h.last_execution_time;
            if (m == l) {
                return (k < n) ? -1 : (k > n) ? 1 : 0
            } else {
                return (m < l) ? -1 : 1
            }
        });
        var f = [];
        Ext.each(c, function(j) {
            var h = false;
            Ext.each(f, function(k) {
                if (j.index === k.index) {
                    j.accumulate_amount = k.accumulate_amount;
                    k.accumulate_amount += j.grouped_amount;
                    h = true;
                    return
                }
            }, this);
            if (!h) {
                j.accumulate_amount = 0;
                f.push({
                    index: j.index,
                    accumulate_amount: j.grouped_amount
                })
            }
        }, this);
        var e = this.getMaxAmount(c);
        f = [];
        Ext.each(c, function(h) {
            get_pair = false;
            if (h.grouped_amount / e < SYNO.SDS.ActiveBackupOffice365.MinBarHeightPercentage) {
                h.final_transfered_amount = SYNO.SDS.ActiveBackupOffice365.MinBarHeightPercentage * e
            } else {
                h.final_transfered_amount = h.grouped_amount
            }
            Ext.each(f, function(j) {
                if (h.index === j.index) {
                    h.accumulate_amount = j.accumulate_amount;
                    j.accumulate_amount += h.final_transfered_amount;
                    get_pair = true;
                    return
                }
            }, this);
            if (!get_pair) {
                h.accumulate_amount = 0;
                f.push({
                    index: h.index,
                    accumulate_amount: h.final_transfered_amount
                })
            }
        }, this);
        e = this.getMaxAmount(c);
        var g = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getDivision(e);
        Ext.each(c, function(h) {
            h.normalized_max_amount = e / g;
            h.normalized_transfered_amount = 0;
            h.accumulate_normalized_transfered_amount = 0;
            h.normalized_unit = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(e);
            h.normalized_transfered_amount = h.final_transfered_amount / g;
            h.accumulate_normalized_transfered_amount = h.accumulate_amount / g
        }, this);
        Ext.each(c, function(h) {
            h.opacity = 1
        }, this);
        if (this.FocusTaskId !== -1) {
            Ext.each(c, function(h) {
                if (h.task_id !== this.FocusTaskId) {
                    h.opacity = 0.35
                }
            }, this)
        }
        var b = {
            bar_numbers: this.tickInterval,
            processed_data: c
        };
        return b
    },
    drawBackground: function(E, u, y) {
        var g = this.svgGraphics.append("g").attr("transform", "translate(0, -" + this.svgConfig.margin.top + ")");
        var e = g.append("rect").attr("width", y).attr("height", u + this.svgConfig.margin.top).attr("fill", "#F7F7F7").attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var c = g.append("line").attr("x1", 0).attr("y1", u * 3 / 4).attr("x2", y).attr("y2", u * 3 / 4).attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var h = g.append("line").attr("x1", 0).attr("y1", u * 2 / 4).attr("x2", y).attr("y2", u * 2 / 4).attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var C = g.append("line").attr("x1", 0).attr("y1", u * 1 / 4).attr("x2", y).attr("y2", u * 1 / 4).attr("stroke", "#e1ebf5").attr("stroke-width", "1px");
        var D = function(J, x) {
            if (J % 10 === 0) {
                return String(J / 10 + ".0 ")
            } else {
                return String(J / 10 + " ")
            }
        };
        var t = E[0].normalized_unit;
        var m = E[0].normalized_max_amount;
        m = m * (u + this.svgConfig.margin.top) / u;
        var k = Math.round(0);
        var w = Math.round(m * 1 / 4 * 10);
        var I = Math.round(m * 2 / 4 * 10);
        var l = Math.round(m * 3 / 4 * 10);
        var z = Math.round(m * 4 / 4 * 10);
        var s = D(k, t);
        var b = D(w, t);
        var r = D(I, t);
        var H = D(l, t);
        var q = D(z, t);
        var A = g.append("text").style("font-size", "12px").attr("fill", "#505A64").style("text-anchor", "end").attr("x", -5).attr("y", u * 4 / 4 + 10).text("(" + t + ")");
        var d = g.append("text").style("font-size", "12px").attr("fill", "#505A64").style("text-anchor", "end").attr("x", -5).attr("y", u * 3 / 4 + 10).text(b);
        var o = g.append("text").style("font-size", "12px").attr("fill", "#505A64").style("text-anchor", "end").attr("x", -5).attr("y", u * 2 / 4 + 10).text(r);
        var B = g.append("text").style("font-size", "12px").attr("fill", "#505A64").style("text-anchor", "end").attr("x", -5).attr("y", u * 1 / 4 + 10).text(H);
        var f = g.append("text").style("font-size", "12px").attr("fill", "#505A64").style("text-anchor", "end").attr("x", -5).attr("y", u * 0 / 4 + 10).text(q);
        var p = this.bar_width;
        var G = this.width_per_data;
        var F = this.bar_left_margin;
        var a = this.totalPageNumber - 1;
        var v = this.barNumber - ((a - this.pageOffset + 1) * this.barNumberPerPage);
        var j = this.barNumber - ((a - this.pageOffset) * this.barNumberPerPage);
        for (i = v; i < j; i++) {
            var n = G * (i - v) + F;
            g.append("line").attr("x1", n).attr("y1", u + 10).attr("x2", n).attr("y2", u + 14).attr("stroke", "#e1ebf5").attr("stroke-width", "2px");
            if (this.interval_array[this.tickInterval - 1 - i]) {
                if (this.interval_array[this.tickInterval - 1 - i].strTime.indexOf("/") !== -1 && this.timeInterval == "hour" || this.interval_array[this.tickInterval - 1 - i].strTime.indexOf("/") === -1 && this.timeInterval == "day") {
                    g.append("text").style("font-weight", "bold").style("font-size", "12px").attr("fill", "#505A64").attr("x", n + p / 2).attr("y", u + 30).style("text-anchor", "middle").text(this.interval_array[this.tickInterval - 1 - i].strTime)
                } else {
                    g.append("text").style("font-size", "12px").attr("fill", "#505A64").attr("x", n + p / 2).attr("y", u + 30).style("text-anchor", "middle").text(this.interval_array[this.tickInterval - 1 - i].strTime)
                }
                if (i === Math.floor((j - v) / 2 + v)) {
                    this.last_point_date = this.current_point_date;
                    if (this.timeInterval == "hour") {
                        this.current_point_date = this.interval_array[this.tickInterval - 1 - i].date.format("m/d")
                    } else {
                        this.current_point_date = this.interval_array[this.tickInterval - 1 - i].date.format("m/d") + "/00"
                    }
                    if (!this.last_point_date) {
                        this.last_point_date = this.current_point_date
                    }
                }
            }
        }
    },
    drawStatistics: function(b, g, c) {
        var a = this.bar_width;
        var d = this.width_per_data;
        var h = this.bar_left_margin;
        if (b.length === 0) {
            return
        }
        var l = this.d3;
        var j = this;
        var f = l.scale.linear().domain([0, b[0].normalized_max_amount]).range([g, 0]);
        var k = "url(#" + this.shadowId + ")";
        var e = this.svgGraphics.selectAll(".bar").data(b).enter().append("g").attr("class", "bar").attr("transform", function(n) {
            var m = ((n.index - 1) * d + h);
            return "translate(" + m + "," + f(n.accumulate_normalized_transfered_amount + n.normalized_transfered_amount) + ")"
        });
        e.append("rect").attr("stroke", "#FFFFFF").attr("stroke-width", "0px").attr("width", a).attr("fill", function(m) {
            return m.color
        }).attr("fill-opacity", function(m) {
            return m.opacity
        }).attr("synotcqtip", function(m) {
            return m.tool_tip
        }).attr("height", function(m) {
            return g - f(m.normalized_transfered_amount)
        }).on("mouseover", function(o, n, m) {
            j.select_bar = true;
            this.parentNode.parentNode.appendChild(this.parentNode);
            if (j.last_selected !== this) {
                l.select(j.last_selected).transition().duration(300).attr("stroke-width", "0px").attr("filter", null);
                j.last_selected = this
            }
            l.select(this).transition().duration(300).attr("stroke-width", "2px").attr("filter", k)
        }).on("mouseout", function(o, n, m) {
            l.select(this).transition().duration(300).attr("stroke-width", "0px").attr("filter", null)
        }).on("click", function(o, n, m) {
            j.click_bar = true;
            j.onClickBar(o)
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.TrendHistogramContainer.Container", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.color_task_id_pair = [];
        this.afterloaded = false
    },
    fillConfig: function(a) {
        this.stage_histogram = new SYNO.SDS.ActiveBackupOffice365.Histogram.StageBarChart({
            svgConfig: a.svgConfig,
            onClickBar: this.onClickItem.createDelegate(this),
            clickPreNextBtn: this.clickPreNextBtn.createDelegate(this)
        });
        this.legend_store = new Ext.data.JsonStore({
            fields: ["index", "task_id", "task_name", "tool_tip", "color", "opacity"]
        });
        this.legend = new SYNO.SDS.ActiveBackupOffice365.Model.TrendHistogramContainer.Legend({
            owner: this,
            appWin: this.appWin,
            cls: "legend",
            height: 197,
            store: this.legend_store,
            onClickLegend: this.onClickItem.createDelegate(this),
            autoFlexcroll: false,
            trackResetOnLoad: false
        });
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-trend-histogram-container",
            layout: "border",
            items: [{
                xtype: "panel",
                region: "east",
                border: false,
                width: 180,
                padding: "16px 0 10px 0",
                items: [this.legend]
            }, {
                xtype: "panel",
                region: "center",
                border: false,
                items: [{
                    xtype: "panel",
                    region: "north",
                    border: false,
                    height: 60,
                    items: [this.getTopBar(a)]
                }, {
                    xtype: "panel",
                    region: "center",
                    itemId: "histogram_card",
                    cls: "bar-chart",
                    border: false,
                    layout: "fit",
                    items: [this.stage_histogram]
                }]
            }]
        };
        return Ext.apply(a, b)
    },
    getTopBar: function(a) {
        var b = new SYNO.ux.Panel({
            owner: this,
            appWin: a.appWin,
            flex: 1,
            region: "east",
            cls: "btns_panel",
            id: this.btn_panel_id = Ext.id(),
            width: 344,
            height: 40,
            html: '<div class="time_range_btns_wrapper"><div class="value_wrapper"><div id = "' + this.btn_panel_id + '.hour" class=value hour">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "hour") + '</div></div><div class="seperator"></div><div class="value_wrapper"><div id = "' + this.btn_panel_id + '.day" class=value day">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "day") + "</div></div></div>"
        });
        this.top_bar_panel = new SYNO.ux.Panel({
            owner: this,
            appWin: a.appWin,
            itemId: "overview_histogram_top_bar",
            padding: "16px 23px 0 50px",
            items: [{
                xtype: "panel",
                cls: "top_bar_panel",
                border: false,
                layout: "border",
                height: 44,
                items: [{
                    xtype: "panel",
                    region: "center",
                    border: false
                }, b]
            }]
        });
        return this.top_bar_panel
    },
    init: function() {
        this.time_period_value = "day";
        Ext.get(this.btn_panel_id + ".day").addClass("selected");
        Ext.get(this.btn_panel_id + ".hour").removeClass("selected");
        Ext.get(this.btn_panel_id + ".day").addListener("click", Ext.createDelegate(this.selectDay, this));
        Ext.get(this.btn_panel_id + ".hour").addListener("click", Ext.createDelegate(this.selectHour, this))
    },
    selectDay: function(a) {
        this.setHistogramBtns("day")
    },
    selectHour: function(a) {
        this.setHistogramBtns("hour")
    },
    setHistogramBtns: function(a) {
        if (a === this.time_period_value) {
            return
        }
        if (a === "day") {
            Ext.get(this.btn_panel_id + ".day").addClass("selected");
            Ext.get(this.btn_panel_id + ".hour").removeClass("selected")
        }
        if (a === "hour") {
            Ext.get(this.btn_panel_id + ".hour").addClass("selected");
            Ext.get(this.btn_panel_id + ".day").removeClass("selected")
        }
        this.setTimeInterval(a);
        this.setPointedPageOffset();
        this.time_period_value = a
    },
    onClickItem: function(a) {
        this.focusData(a.task_id)
    },
    clickPreNextBtn: function() {
        this.refreshPanel()
    },
    setTimeInterval: function(a) {
        this.stage_histogram.setTimeInterval(a);
        this.refreshPanel()
    },
    setInitPageOffset: function() {
        this.stage_histogram.setInitPageOffset();
        this.refreshPanel()
    },
    setPointedPageOffset: function() {
        this.stage_histogram.setPointedPageOffset();
        this.refreshPanel()
    },
    setPageOffset: function(a) {
        this.stage_histogram.setPageOffset(a);
        this.refreshPanel()
    },
    focusData: function(a) {
        if (a === this.focus_task_id) {
            return
        }
        this.stage_histogram.setNewFocusTaskId(a);
        this.legend.setNewFocusTaskId(a);
        this.focus_task_id = a;
        this.refreshPanel()
    },
    resizeLoadData: function(a) {
        this.stage_histogram.setNewSvgConfig(a);
        this.refreshPanel()
    },
    refreshPanel: function() {
        this.stage_histogram.loadData(this.data);
        this.legend_store.loadData(this.color_task_id_pair)
    },
    loadData: function(b) {
        var a = b.slice();
        var c = [];
        Ext.each(a, function(d) {
            if (d.transfered_amount === 0) {
                return
            }
            c.push(d)
        }, this);
        this.colorData(c);
        this.data = c.slice();
        this.stage_histogram.loadData(c);
        this.legend_store.loadData(this.color_task_id_pair);
        if (!this.afterloaded) {
            this.setInitPageOffset();
            this.afterloaded = true
        }
    },
    colorData: function(b) {
        var a = SYNO.SDS.ActiveBackupOffice365.Config.HISTOGRAM_COLORS;
        this.color_task_id_pair = [];
        Ext.each(b, function(c) {
            var g = false;
            Ext.each(this.color_task_id_pair, function(h) {
                if (c.task_id === h.task_id) {
                    c.color = h.color;
                    g = true;
                    return
                }
            }, this);
            if (!g && this.color_task_id_pair.length < 6) {
                var d = a[(this.color_task_id_pair.length) % (a.length)];
                var f = Ext.util.Format.htmlEncode(c.task_name);
                this.color_task_id_pair.push({
                    task_id: c.task_id,
                    color: d,
                    task_name: f,
                    tool_tip: Ext.util.Format.htmlEncode(f)
                });
                c.color = d
            } else {
                if (!g) {
                    var e = a[6];
                    if (this.color_task_id_pair.length === 6) {
                        this.color_task_id_pair.push({
                            task_id: -2,
                            color: e,
                            task_name: SYNO.SDS.ActiveBackupOffice365.String("histogram", "others"),
                            tool_tip: SYNO.SDS.ActiveBackupOffice365.String("histogram", "others")
                        })
                    }
                    c.task_id = -2;
                    c.task_name = SYNO.SDS.ActiveBackupOffice365.String("histogram", "others");
                    c.color = e
                }
            }
        }, this)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.TrendHistogramContainer.Legend", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent(arguments);
        this.FocusTaskId = -1
    },
    createTpl: function() {
        var a = new Ext.XTemplate("", '<tpl for=".">', '<div class="legend-w" ext:qtip="{tool_tip}">', '<div class="rect" style="background-color:{color}; opacity:{opacity};" task_id = {task_id} ext:qtip="{tool_tip}"></div>', '<div class="name" task_id = {task_id} ext:qtip="{tool_tip}">', "{task_name}", "</div>", "</div>", "</tpl>");
        return a
    },
    setNewFocusTaskId: function(a) {
        this.FocusTaskId = a
    },
    prepareData: function(c, b, a) {
        c.opacity = 1;
        if (this.FocusTaskId === -1) {
            return c
        }
        if (c.task_id !== this.FocusTaskId) {
            c.opacity = 0.35
        }
        return c
    },
    onClick: function(g, b, f) {
        this.callParent(arguments);
        var c = Ext.get(b);
        var a = c.getAttribute("task_id");
        if (!a) {
            a = -1
        }
        var d = {
            task_id: parseInt(a, 10)
        };
        this.onClickLegend(d)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.TrendUsage", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.header_bar = new SYNO.ux.Panel({
            html: SYNO.SDS.ActiveBackupOffice365.String("overview", "trend_usage"),
            region: "north",
            cls: "overview_header",
            height: 36
        });
        this.svgConfig = {
            margin: {
                top: 14,
                right: 23,
                bottom: 30,
                left: 50
            },
            width: 900 - 180,
            height: 232 - 64
        };
        this.trend_histogram_container = new SYNO.SDS.ActiveBackupOffice365.Model.TrendHistogramContainer.Container({
            owner: this,
            itemId: "trend_histogram_container",
            region: "center",
            svgConfig: this.svgConfig,
            appWin: b.appWin
        });
        var a = {
            itemId: "trend_usage",
            cls: "card_panel_wrapper",
            layout: "fit",
            items: [{
                xtype: "panel",
                layout: "border",
                cls: "card_panel",
                border: false,
                items: [this.header_bar, this.trend_histogram_container]
            }]
        };
        return Ext.apply(a, b)
    },
    loadData: function(a) {
        this.trend_histogram_container.loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.OverViewStatisticPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner.application;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            itemId: "overview_panel",
            autoFlexcroll: true,
            border: false,
            cls: "syno-activebackupoffice365-overview-statistic-panel",
            items: [this.getInfoPanel(b), this.getHisogramPanel(b)]
        };
        return Ext.apply(a, b)
    },
    getInfoPanel: function(a) {
        this.user_service = new SYNO.SDS.ActiveBackupOffice365.View.UserService(a);
        this.last_backup_status = new SYNO.SDS.ActiveBackupOffice365.View.LastBackupStatus(a);
        this.user_usage = new SYNO.SDS.ActiveBackupOffice365.View.UserUsage(a);
        this.current_activities = new SYNO.SDS.ActiveBackupOffice365.View.CurrentActivities(a);
        this.last_event_log = new SYNO.SDS.ActiveBackupOffice365.View.LastEventLog(a);
        this.storage_usage = new SYNO.SDS.ActiveBackupOffice365.View.StorageUsage(a);
        this.group_info_panel = new SYNO.ux.Panel(Ext.apply({
            region: "center",
            itemId: "group_info_panel",
            cls: "group_info_panel",
            items: [this.user_service, this.last_backup_status, this.current_activities, this.last_event_log, this.storage_usage, this.user_usage]
        }, a));
        return this.group_info_panel
    },
    getHisogramPanel: function(a) {
        this.trend_usage = new SYNO.SDS.ActiveBackupOffice365.View.TrendUsage(a);
        this.group_histogram_panel = new SYNO.ux.Panel(Ext.apply({
            region: "south",
            itemId: "group_histogram_panel",
            cls: "group_histogram_panel",
            items: [this.trend_usage]
        }, a));
        return this.group_histogram_panel
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.BackupTaskListSlim", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent(arguments);
        this.addClass("syno-activebackupoffice365-task-listview-slim");
        this.Timers = {}
    },
    createTpl: function() {
        this.id = Ext.id();
        var a = '<div class="task-info"><div class="task_name" ext:qtip="{task_name_tool_tip:htmlEncode}"><b>{task_name_string:htmlEncode}</b><span class="error">{task_status_string:htmlEncode}</span></div><div class="wrapper"><div class="label">{backup_status_string:htmlEncode}</div><div class="value" ext:qtip="{backup_status_info:htmlEncode}" style="color:{status_color};">{backup_status_info:htmlEncode}</div></div><div class="wrapper"><div class="label">{time_status_string:htmlEncode}</div><div id="{cmp_id}" class="value">{time_status_info:htmlEncode}</div></div></div>';
        var c = '<div class="service-info"><div class="header"><div class="value"><p>' + SYNO.SDS.ActiveBackupOffice365.String("common", "drive") + '</p></div><div class="value"><p>' + SYNO.SDS.ActiveBackupOffice365.String("common", "mail") + '</p></div><div class="value"><p>' + SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail") + '</p></div><div class="value"><p>' + SYNO.SDS.ActiveBackupOffice365.String("common", "contact") + '</p></div><div class="value"><p>' + SYNO.SDS.ActiveBackupOffice365.String("common", "calendar") + '</p></div></div><div class="content_line1"><div class="value">{display_drive:htmlEncode}</div><div class="value">{display_mail:htmlEncode}</div><div class="value">{display_archive_mail:htmlEncode}</div><div class="value">{display_contact:htmlEncode}</div><div class="value">{display_calendar:htmlEncode}</div></div><div class="content_line2"><div class="value"><div ext:qtip="{drive_tool_tip:htmlEncode}" class="status_icon {drive_status_cls}"></div></div><div class="value"><div ext:qtip="{mail_tool_tip:htmlEncode}" class="status_icon {mail_status_cls}"></div></div><div class="value"><div ext:qtip="{archive_mail_tool_tip:htmlEncode}" class="status_icon {archive_mail_status_cls}"></div></div><div class="value"><div ext:qtip="{contact_tool_tip:htmlEncode}" class="status_icon {contact_status_cls}"></div></div><div class="value"><div ext:qtip="{calendar_tool_tip:htmlEncode}" class="status_icon {calendar_status_cls}"></div></div></div></div>';
        var b = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap">', '<div class="item-summary">', '<div class="item-icon status-icon {status_cls} {backup_policy_cls}"></div>', '<div class="basicinfo">', a, "</div>", c, "</div>", "</div>", "</tpl>");
        return b
    },
    prepareData: function(e, c, b) {
        this.checkDataStatus(e, c, b);
        if (e.backup_policy === SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS) {
            e.backup_policy_cls = "continuous"
        } else {
            if (e.enable_schedule) {
                e.backup_policy_cls = "schedule"
            } else {
                e.backup_policy_cls = "manual"
            }
        }
        e.backup_status_string = SYNO.SDS.ActiveBackupOffice365.String("task_status", "backup_status") + ": ";
        e.status_color = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(e.status);
        switch (e.status) {
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.NOT_BACKUP_YET:
                e.status_cls = "status-gray";
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.String("task_status", "ready");
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time") + ": ";
                e.time_status_info = "-";
                break;
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.OK:
                e.status_cls = "status-ok";
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.String("task_status", "success");
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time") + ": ";
                e.time_status_info = SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(e.last_execution_time);
                break;
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WAITING:
                e.status_cls = "status-waiting";
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.String("task_status", "waiting");
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time") + ": ";
                e.time_status_info = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getTimerValue(this.Timers, e.job_id);
                break;
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.QUEUING:
                e.status_cls = "status-queuing";
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.String("task_status", "queuing");
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time") + ": ";
                e.cmp_id = this.id + "_" + e.job_id + "_time_status";
                SYNO.SDS.ActiveBackupOffice365Lib.Utils.addTimer(this.Timers, e.job_id, e.elapsed_time, e.cmp_id);
                e.time_status_info = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getTimerValue(this.Timers, e.job_id);
                break;
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.BACKUPING:
                e.status_cls = "status-backuping";
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.Utils.getProcessingBackupString(e.processing_name);
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time") + ": ";
                e.cmp_id = this.id + "_" + e.job_id + "_time_status";
                SYNO.SDS.ActiveBackupOffice365Lib.Utils.addTimer(this.Timers, e.job_id, e.elapsed_time, e.cmp_id);
                e.time_status_info = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getTimerValue(this.Timers, e.job_id);
                break;
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING:
                e.status_cls = "status-warning";
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.String("common", "warning");
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time") + ": ";
                e.time_status_info = SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(e.last_execution_time);
                break;
            default:
                e.backup_status_info = SYNO.SDS.ActiveBackupOffice365.String("common", "error");
                e.time_status_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time") + ": ";
                e.time_status_info = SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(e.last_execution_time)
        }
        e.task_name_string = SYNO.SDS.ActiveBackupOffice365Lib.Utils.shortenText(e.task_name, 64);
        e.task_name_tool_tip = Ext.util.Format.htmlEncode(e.task_name);
        if (e.task_status !== SYNO.SDS.ActiveBackupOffice365.TaskStatus.ACTIVE) {
            e.status_cls = "status-gray";
            e.task_status_string = " (" + SYNO.SDS.ActiveBackupOffice365.String("common", "not_available") + ")";
            if (e.task_status === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_SHARED_MISSING) {
                e.task_name_tool_tip = SYNO.SDS.ActiveBackupOffice365.String("error", "task_not_available_shared_missing")
            } else {
                if (e.task_status === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_STORAGE_REMOVING) {
                    e.task_name_tool_tip = SYNO.SDS.ActiveBackupOffice365.String("error", "removing_storage")
                } else {
                    if (e.task_status === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_TASK_WILL_BE_DELETED) {
                        e.task_name_tool_tip = SYNO.SDS.ActiveBackupOffice365.String("error", "task_will_be_deleted")
                    }
                }
            }
        }
        e.display_drive = (e.enable_drive === 0) ? "-" : e.processed_drive + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", e.processed_drive);
        e.display_mail = (e.enable_mail === 0) ? "-" : e.processed_mail + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", e.processed_mail);
        e.display_archive_mail = (e.enable_archive_mail === 0) ? "-" : e.processed_archive_mail + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", e.processed_archive_mail);
        e.display_contact = (e.enable_contact === 0) ? "-" : e.processed_contact + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", e.processed_contact);
        e.display_calendar = (e.enable_calendar === 0) ? "-" : e.processed_calendar + " " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.formatQString("overview", "user", "users", e.processed_calendar);
        var a = function(g, j, f, h) {
            if (g === 0) {
                return "disable"
            }
            if (h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.NOT_BACKUP_YET) {
                return "not_backup_yet"
            }
            if (j === 0) {
                return "waiting"
            }
            return SYNO.SDS.ActiveBackupOffice365.Utils.getStatusCls(f)
        };
        e.drive_status_cls = a(e.enable_drive, e.processed_drive, e.status_drive, e.status);
        e.mail_status_cls = a(e.enable_mail, e.processed_mail, e.status_mail, e.status);
        e.archive_mail_status_cls = a(e.enable_archive_mail, e.processed_archive_mail, e.status_archive_mail, e.status);
        e.contact_status_cls = a(e.enable_contact, e.processed_contact, e.status_contact, e.status);
        e.calendar_status_cls = a(e.enable_calendar, e.processed_calendar, e.status_calendar, e.status);
        var d = function(g, h, k, f) {
            if (g === "disable") {
                return SYNO.SDS.ActiveBackupOffice365.String("common", "not_enable_service")
            } else {
                if (g === "not_backup_yet") {
                    return SYNO.SDS.ActiveBackupOffice365.String("task_status", "ready")
                } else {
                    if (g === "waiting") {
                        return SYNO.SDS.ActiveBackupOffice365.String("task_status", "preparing")
                    }
                }
            }
            var j = SYNO.SDS.ActiveBackupOffice365.String("task_status", "success") + ": " + h + "</br>";
            j += SYNO.SDS.ActiveBackupOffice365.String("task_status", "error") + ": " + k + "</br>";
            j += SYNO.SDS.ActiveBackupOffice365.String("common", "warning") + ": " + f + "</br>";
            return j
        };
        e.drive_tool_tip = d(e.drive_status_cls, e.processed_drive - e.error_drive - e.warning_drive, e.error_drive, e.warning_drive);
        e.mail_tool_tip = d(e.mail_status_cls, e.processed_mail - e.error_mail - e.warning_mail, e.error_mail, e.warning_mail);
        e.archive_mail_tool_tip = d(e.archive_mail_status_cls, e.processed_archive_mail - e.error_archive_mail - e.warning_archive_mail, e.error_archive_mail, e.warning_archive_mail);
        e.contact_tool_tip = d(e.contact_status_cls, e.processed_contact - e.error_contact - e.warning_contact, e.error_contact, e.warning_contact);
        e.calendar_tool_tip = d(e.calendar_status_cls, e.processed_calendar - e.error_calendar - e.warning_calendar, e.error_calendar, e.warning_calendar);
        return e
    },
    onClick: function(c, a, b) {
        this.callParent(arguments);
        this.last_selected_rec = this.getSelectedRecords();
        this.onClickListFn(this.last_selected_rec)
    },
    onDblClick: function(d, b, c) {
        this.last_selected_rec = this.getSelectedRecords();
        var a = this.last_selected_rec[0].get("task_id");
        this.onDbClickListFn(a)
    },
    checkDataStatus: function(g, f, d) {
        if (this.last_selected_rec) {
            var c = this.last_selected_rec[0].get("task_id");
            var b = this.last_selected_rec[0].get("task_status");
            var e = this.last_selected_rec[0].get("status");
            var h = this.last_selected_rec[0].get("backup_policy");
            var a = this.last_selected_rec[0].get("protected_user");
            if (g.task_id !== c) {
                return
            }
            if (g.task_status !== b || g.status !== e || g.backup_policy !== h || g.protected_user !== a) {
                this.onChangeSelectionStatus(this.last_selected_rec, g);
                this.last_selected_rec[0].data = g
            }
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.TaskListPanel", {
    extend: "Ext.Panel",
    task_list: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: [{
                xtype: "syno_button",
                btnStyle: "blue",
                cls: "btn_create",
                iconCls: "icon_create",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "create"),
                itemId: "btn_add",
                handler: function(d, f) {
                    this.fireEvent("add", d, f)
                },
                scope: this
            }, {
                xtype: "panel",
                hideBorders: true,
                border: false,
                html: '<div class= "separator-wrapper"><div class= "separator"></div></div>'
            }, {
                xtype: "syno_button",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "edit"),
                itemId: "btn_edit",
                cls: "btn_normal",
                handler: function(d, f) {
                    this.fireEvent("edit", d, f)
                },
                scope: this
            }, {
                xtype: "syno_button",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "backup"),
                itemId: "btn_backup",
                cls: "btn_normal",
                handler: function(d, f) {
                    this.fireEvent("backup", d, f)
                },
                scope: this
            }, {
                xtype: "syno_button",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "cancel"),
                itemId: "btn_cancel",
                cls: "btn_normal",
                handler: function(d, f) {
                    this.fireEvent("cancel", d, f)
                },
                scope: this
            }, {
                xtype: "syno_button",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "delete"),
                itemId: "btn_delete",
                cls: "btn_normal",
                handler: function(d, f) {
                    this.fireEvent("delete", d, f)
                },
                scope: this
            }, {
                xtype: "syno_button",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "detail"),
                itemId: "btn_detail",
                cls: "btn_normal",
                handler: function(d, f) {
                    this.fireEvent("detail", d, f)
                },
                scope: this
            }]
        });
        var a = {
            itemId: "windows_backup_panel",
            border: false,
            tbar: b,
            layout: "card",
            cls: "syno-activebackupoffice365-tasklist-panel",
            items: [{
                xtype: "panel",
                index: 0,
                border: false,
                items: this.getTaskList(c)
            }, {
                xtype: "panel",
                index: 1,
                border: false,
                layout: "fit",
                cls: "empty-panel",
                html: '<div class="background-wrapper"><div class="background"><div class="img"></div><div class="desc-title">' + SYNO.SDS.ActiveBackupOffice365.String("portal", "admin_no_task_title") + '</div><div class="desc-desc"></div></div></div>'
            }]
        };
        return Ext.apply(a, c)
    },
    getTaskList: function(a) {
        if (null === this.task_list) {
            this.task_list = new SYNO.SDS.ActiveBackupOffice365.Model.BackupTaskListSlim({
                owner: this,
                appWin: a.appWin,
                itemId: "tasklist",
                store: a.appWin.application.getStore("TaskList"),
                server_type: 1,
                autoFlexcroll: true,
                trackResetOnLoad: false,
                multiSelect: false,
                singleSelect: true,
                onClickListFn: null
            })
        }
        return this.task_list
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.ActivitiesList", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent(arguments);
        this.addClass("syno-activebackupoffice365-activities-listview");
        this.old_task_percentage_pair = {};
        this.new_task_percentage_pair = {};
        this.Timers = {}
    },
    createTpl: function() {
        this.id = Ext.id();
        var a = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap">', '<div class="form">', '<div class="header {header_cls}" ext:qtip="{header_tool_tip:htmlEncode}"><b>{header_string:htmlEncode}</b></div><div class="wrapper">', '<div class="label">{line1_string:htmlEncode}</div>', '<div class="value">{line1:htmlEncode}</div>', "</div>", '<div class="wrapper">', '<div class="label">{line2_string:htmlEncode}</div>', '<div class="value">{line2:htmlEncode}</div>', "</div>", '<div class="wrapper">', '<div class="label">{line3_string:htmlEncode}</div>', '<div id="{cmp_id}" class="value">{line3:htmlEncode}</div>', "</div>", '<div class="wrapper processing_name">', '<div class="label">{line4_string:htmlEncode}</div>', '<div class="value">{line4:htmlEncode}</div>', "</div>", '<div class="wrapper" style="{progress_bar}">', '<div class="label">{progress_string:htmlEncode}</div>', '<div class="restoring-progress-warpper">', '<div class="restoring-background">', '<div job_id="{job_id}" class="restoring-progress" style="width:{percentage_old}%"; ></div>', "</div>", '<div class="percentage">{percentage:htmlEncode}%</div>', "</div>", "</div>", "</div>", "</div>", "</tpl>");
        return a
    },
    prepareData: function(c, b, a) {
        this.new_task_percentage_pair[c.job_id] = c.percentage;
        if (this.old_task_percentage_pair[c.job_id]) {
            c.percentage_old = this.old_task_percentage_pair[c.job_id]
        } else {
            c.percentage_old = 0
        }
        c.header = c.task_name;
        c.header_string = SYNO.SDS.ActiveBackupOffice365Lib.Utils.shortenText(c.header, 64);
        c.header_tool_tip = Ext.util.Format.htmlEncode(c.header);
        if (c.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP) {
            c.line1_string = SYNO.SDS.ActiveBackupOffice365.String("common", "task_type") + ": ";
            c.line1 = SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeString(c.task_type);
            c.line2_string = SYNO.SDS.ActiveBackupOffice365.String("task_info", "backup_policy") + ": ";
            if (c.backup_policy === SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS) {
                c.line2 = SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "continuous_backup")
            } else {
                if (c.is_manual_backup) {
                    c.line2 = SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "manual_start")
                } else {
                    c.line2 = SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "schedule_start")
                }
            }
            c.line3_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time") + ": ";
            c.cmp_id = this.id + "_" + c.job_id + "_time_status";
            SYNO.SDS.ActiveBackupOffice365Lib.Utils.addTimer(this.Timers, c.job_id, c.elapsed_time, c.cmp_id);
            c.line3 = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getTimerValue(this.Timers, c.job_id);
            c.line4_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "progress") + ": ";
            if (c.processing_name === "") {
                c.line4 = SYNO.SDS.ActiveBackupOffice365.String("task_status", "queuing")
            } else {
                c.line4 = SYNO.SDS.ActiveBackupOffice365.Utils.getProcessingBackupString(c.processing_name)
            }
            c.progress_bar = "display: none;"
        } else {
            c.line1_string = SYNO.SDS.ActiveBackupOffice365.String("common", "task_type") + ": ";
            c.line1 = SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeString(c.task_type);
            c.line1 += " [" + SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeString(c.service_type) + "]";
            c.line2_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "account") + ": ";
            if (c.runner_name === "") {
                c.line2 = "-"
            } else {
                c.line2 = c.runner_name
            }
            c.line3_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time") + ": ";
            c.cmp_id = this.id + "_" + c.job_id + "_time_status";
            SYNO.SDS.ActiveBackupOffice365Lib.Utils.addTimer(this.Timers, c.job_id, c.elapsed_time, c.cmp_id);
            c.line3 = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getTimerValue(this.Timers, c.job_id);
            c.progress_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "progress") + ": "
        }
        return c
    },
    onClick: function(c, a, b) {
        this.callParent(arguments);
        this.last_selected_rec = this.getSelectedRecords();
        this.onClickListFn(this.last_selected_rec)
    },
    setProgress: function() {
        var a = this;
        var b = this.getEl().query(".restoring-progress");
        Ext.each(b, function(e) {
            var d = e.getAttribute("job_id");
            var c = a.new_task_percentage_pair[d];
            e.setStyle({
                width: c + "%"
            })
        });
        a.old_task_percentage_pair = a.new_task_percentage_pair;
        a.new_task_percentage_pair = {}
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ActivitiesPanel", {
    extend: "Ext.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: [{
                xtype: "syno_button",
                text: SYNO.SDS.ActiveBackupOffice365.String("btn", "cancel"),
                itemId: "btn_cancel",
                cls: "btn_normal",
                handler: function(d, f) {
                    this.fireEvent("cancel", d, f)
                },
                scope: this
            }]
        });
        var a = {
            itemId: "activities_panel",
            border: false,
            tbar: b,
            layout: "card",
            cls: "syno-activebackupoffice365-activities-panel",
            items: [{
                xtype: "panel",
                index: 0,
                border: false,
                items: this.getActivitiesList(c)
            }, {
                xtype: "panel",
                index: 1,
                border: false,
                layout: "fit",
                cls: "empty-panel",
                html: '<div class="background-wrapper"><div class="background"><div class="img"></div><div class="desc-title">' + SYNO.SDS.ActiveBackupOffice365.String("common", "no_running_activity") + '</div><div class="desc-desc"></div></div></div>'
            }]
        };
        return Ext.apply(a, c)
    },
    getActivitiesList: function(a) {
        this.activities_list = new SYNO.SDS.ActiveBackupOffice365.Model.ActivitiesList({
            owner: this,
            appWin: a.appWin,
            itemId: "activities_list",
            store: a.appWin.application.getStore("ActivitiesList"),
            autoFlexcroll: true,
            trackResetOnLoad: false,
            multiSelect: false,
            singleSelect: true,
            onClickListFn: null
        });
        return this.activities_list
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.searchPanel = null;
        this.defaultAnimation = ["#000", 1, {
            duration: 0.35
        }];
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            width: 368,
            heigh: 480,
            floating: true,
            labelAlign: "left",
            trackResetOnLoad: true,
            waitMsgTarget: true,
            border: true,
            bodyStyle: "padding: 20px; padding-top: 0px; font-size: 24px;",
            autoFlexcroll: false,
            defaults: {
                hideLabel: true,
                anchor: "100%"
            },
            itemId: "search_panel",
            items: [this.createKeyword(!b.enableKeyWord), this.createLogType(!b.enableLogType), this.createStatusType(!b.enableStatusType), this.createTaskType(!b.enableTaskType), this.createEventType(!b.enableEventType), this.createCustDate(!b.enableCustDate), this.createFootBar()]
        };
        return Ext.apply(a, b)
    },
    createKeyword: function(a) {
        return [{
            xtype: "syno_displayfield",
            hidden: a,
            value: _T("log", "attr_keyword") + _T("common", "colon"),
            flex: 1
        }, {
            xtype: "syno_textfield",
            hidden: a,
            name: "key_word",
            flex: 2,
            vaule: ""
        }]
    },
    createStatusType: function(a) {
        this.statusTypeSelector = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: "status",
            hidden: a,
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    [SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ALL_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "all_type")],
                    [SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.OK, SYNO.SDS.ActiveBackupOffice365.String("task_status", "success")],
                    [SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING, SYNO.SDS.ActiveBackupOffice365.String("common", "warning")],
                    [SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR, SYNO.SDS.ActiveBackupOffice365.String("task_status", "error")]
                ]
            }),
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            value: SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ALL_TYPE
        });
        return [{
            xtype: "syno_displayfield",
            hidden: a,
            value: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "status_type") + _T("common", "colon"),
            flex: 1
        }, this.statusTypeSelector]
    },
    createLogType: function(a) {
        this.logTypeSelector = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: "log_type",
            hidden: a,
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    [SYNO.SDS.ActiveBackupOffice365.LogType.ALL_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "all_type")],
                    [SYNO.SDS.ActiveBackupOffice365.LogType.INFO_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "info_type")],
                    [SYNO.SDS.ActiveBackupOffice365.LogType.WARNING_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "warning_type")],
                    [SYNO.SDS.ActiveBackupOffice365.LogType.ERROR_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "error_type")]
                ]
            }),
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            value: SYNO.SDS.ActiveBackupOffice365.LogType.ALL_TYPE
        });
        return [{
            xtype: "syno_displayfield",
            hidden: a,
            value: SYNO.SDS.ActiveBackupOffice365.String("log", "log_type") + _T("common", "colon"),
            flex: 1
        }, this.logTypeSelector]
    },
    createTaskType: function(a) {
        this.taskTypeSelector = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: "task_type",
            hidden: a,
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    [SYNO.SDS.ActiveBackupOffice365.TaskType.ALL_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "all_type")],
                    [SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP, SYNO.SDS.ActiveBackupOffice365.String("common", "backup")],
                    [SYNO.SDS.ActiveBackupOffice365.TaskType.RESTORE, SYNO.SDS.ActiveBackupOffice365.String("common", "restore")]
                ]
            }),
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            value: SYNO.SDS.ActiveBackupOffice365.TaskType.ALL_TYPE
        });
        return [{
            xtype: "syno_displayfield",
            hidden: a,
            value: SYNO.SDS.ActiveBackupOffice365.String("common", "task_type") + _T("common", "colon"),
            flex: 1
        }, this.taskTypeSelector]
    },
    createEventType: function(a) {
        this.eventTypeSelector = new SYNO.ux.ComboBox({
            mode: "local",
            editable: false,
            name: "event_type",
            hidden: a,
            store: new Ext.data.ArrayStore({
                autoDestroy: true,
                fields: ["value", "display"],
                data: [
                    [SYNO.SDS.ActiveBackupOffice365.DataType.ALL_TYPE, SYNO.SDS.ActiveBackupOffice365.String("log", "all_type")],
                    [SYNO.SDS.ActiveBackupOffice365.DataType.FILE_DATA, SYNO.SDS.ActiveBackupOffice365.String("log", "file_data")],
                    [SYNO.SDS.ActiveBackupOffice365.DataType.FILE_PATCH_META, SYNO.SDS.ActiveBackupOffice365.String("log", "file_metadata")],
                    [SYNO.SDS.ActiveBackupOffice365.DataType.FILE_REMOVE, SYNO.SDS.ActiveBackupOffice365.String("log", "file_delete")],
                    [SYNO.SDS.ActiveBackupOffice365.DataType.FOLDER_DATA, SYNO.SDS.ActiveBackupOffice365.String("log", "folder")],
                    [SYNO.SDS.ActiveBackupOffice365.DataType.FOLDER_PATCH_META, SYNO.SDS.ActiveBackupOffice365.String("log", "folder_metadata")],
                    [SYNO.SDS.ActiveBackupOffice365.DataType.FOLDER_REMOVE, SYNO.SDS.ActiveBackupOffice365.String("log", "folder_delete")]
                ]
            }),
            displayField: "display",
            valueField: "value",
            triggerAction: "all",
            value: SYNO.SDS.ActiveBackupOffice365.DataType.ALL_TYPE
        });
        return [{
            xtype: "syno_displayfield",
            hidden: a,
            value: SYNO.SDS.ActiveBackupOffice365.String("log", "data") + _T("common", "colon"),
            flex: 1
        }, this.eventTypeSelector]
    },
    createCustDate: function(a) {
        this.dateFrom = new SYNO.ux.DateField({
            name: "searchdatefrom",
            editable: false,
            format: "m/d/Y",
            emptyText: _T("log", "date_from"),
            value: "",
            listeners: {
                scope: this,
                select: function(c, b) {
                    this.form.findField("searchdateto").setMinValue(b)
                }
            }
        });
        this.dateTo = new SYNO.ux.DateField({
            name: "searchdateto",
            editable: false,
            format: "m/d/Y",
            emptyText: _T("log", "date_to"),
            value: "",
            listeners: {
                scope: this,
                select: function(c, b) {
                    this.form.findField("searchdatefrom").setMaxValue(b)
                }
            }
        });
        return [{
            xtype: "syno_displayfield",
            hidden: a,
            value: _T("time", "time_date") + _T("common", "colon")
        }, {
            xtype: "syno_compositefield",
            hidden: a,
            hideLabel: true,
            defaults: {
                flex: 1
            },
            defaultMargins: "0 8 0 0",
            items: [this.dateFrom, this.dateTo]
        }]
    },
    createFootBar: function() {
        return [{
            xtype: "toolbar",
            border: false,
            itemId: "btns",
            toolbarCls: "search-panel-fbar-btnPanel",
            items: [{
                xtype: "tbfill"
            }, {
                xtype: "syno_button",
                btnStyle: "blue",
                style: "margin-right: 10px",
                text: _T("log", "search"),
                itemId: "btn_search",
                handler: this.onSearch,
                scope: this
            }, {
                xtype: "syno_button",
                minWidth: 80,
                text: _T("common", "reset"),
                handler: this.onReset,
                scope: this
            }]
        }]
    },
    setKeyWord: function(a) {
        var b = this.getForm().findField("key_word");
        if (b && Ext.isString(a)) {
            b.setValue(a)
        }
        b.focus("", 1)
    },
    onSearch: function() {
        var d = {};
        var b = this.getForm();
        var g = b.findField("key_word").getValue();
        var h = b.findField("log_type").getValue();
        var e = b.findField("status").getValue();
        var f = b.findField("task_type").getValue();
        var a = b.findField("event_type").getValue();
        var c = b.findField("searchdatefrom").getRawValue();
        var j = b.findField("searchdateto").getRawValue();
        if (g) {
            d.key_word = g
        }
        if (e !== -1) {
            d.status = e
        }
        if (h !== -1) {
            d.log_type = h
        }
        if (f !== -1) {
            d.task_type = f
        }
        if (a !== -1) {
            switch (a) {
                case SYNO.SDS.ActiveBackupOffice365.DataType.FILE_DATA:
                    d.event_type = SYNO.SDS.ActiveBackupOffice365.EventType.DATA;
                    d.file_type = SYNO.SDS.ActiveBackupOffice365.FileType.FILE;
                    break;
                case SYNO.SDS.ActiveBackupOffice365.DataType.FILE_PATCH_META:
                    d.event_type = SYNO.SDS.ActiveBackupOffice365.EventType.PATCH_META;
                    d.file_type = SYNO.SDS.ActiveBackupOffice365.FileType.FILE;
                    break;
                case SYNO.SDS.ActiveBackupOffice365.DataType.FILE_REMOVE:
                    d.event_type = SYNO.SDS.ActiveBackupOffice365.EventType.REMOVE;
                    d.file_type = SYNO.SDS.ActiveBackupOffice365.FileType.FILE;
                    break;
                case SYNO.SDS.ActiveBackupOffice365.DataType.FOLDER_DATA:
                    d.event_type = SYNO.SDS.ActiveBackupOffice365.EventType.DATA;
                    d.file_type = SYNO.SDS.ActiveBackupOffice365.FileType.FOLDER;
                    break;
                case SYNO.SDS.ActiveBackupOffice365.DataType.FOLDER_PATCH_META:
                    d.event_type = SYNO.SDS.ActiveBackupOffice365.EventType.PATCH_META;
                    d.file_type = SYNO.SDS.ActiveBackupOffice365.FileType.FOLDER;
                    break;
                case SYNO.SDS.ActiveBackupOffice365.DataType.FOLDER_REMOVE:
                    d.event_type = SYNO.SDS.ActiveBackupOffice365.EventType.REMOVE;
                    d.file_type = SYNO.SDS.ActiveBackupOffice365.FileType.FOLDER;
                    break
            }
        }
        if (c) {
            d.date_from = new Date(c + " 00:00:00").getTime() / 1000
        }
        if (j) {
            d.date_to = new Date(j + " 23:59:59").getTime() / 1000
        }
        this.fireEvent("search", this, d)
    },
    onReset: function() {
        this.getForm().items.each(function(a) {
            if (a.isDirty()) {
                this.frameAnimation(a.el, this.defaultAnimation);
                return
            }
        }, this);
        this.getForm().reset();
        this.getForm().findField("searchdatefrom").setMaxValue(null);
        this.getForm().findField("searchdateto").setMinValue(null);
        this.onSearch()
    },
    frameAnimation: function(a, b) {
        if (a && a.isVisible()) {
            Ext.Element.prototype.frame.apply(a, b)
        }
    },
    setDate: function(c, b, a) {
        if (a === true) {
            this.frameAnimation(this.form.findField("searchdatefrom").el, this.defaultAnimation);
            this.frameAnimation(this.form.findField("searchdateto").el, this.defaultAnimation)
        }
        this.form.findField("searchdatefrom").setMaxValue(b);
        this.form.findField("searchdateto").setMinValue(c);
        this.form.findField("searchdatefrom").setValue(c);
        this.form.findField("searchdateto").setValue(b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField", {
    extend: "SYNO.ux.SearchField",
    initEvents: function() {
        this.callParent(arguments);
        this.mon(Ext.getDoc(), "mousedown", this.onMouseDown, this);
        this.mon(this, "keypress", function(b, a) {
            if (a.getKey() == Ext.EventObject.ENTER) {
                this.searchPanel.setKeyWord(this.getValue());
                this.searchPanel.onSearch()
            }
        }, this)
    },
    isInnerComponent: function(c, b) {
        var a = false;
        b.items.each(function(d) {
            if (d instanceof Ext.form.ComboBox) {
                if (d.view && c.within(d.view.getEl())) {
                    a = true;
                    return false
                }
            } else {
                if (d instanceof Ext.form.DateField) {
                    if (d.menu && c.within(d.menu.getEl())) {
                        a = true;
                        return false
                    }
                } else {
                    if (d instanceof Ext.form.CompositeField) {
                        if (this.isInnerComponent(c, d)) {
                            a = true;
                            return false
                        }
                    }
                }
            }
        }, this);
        return a
    },
    onMouseDown: function(b) {
        var a = this.searchPanel;
        if (a && a.isVisible() && !a.isDestroyed && !a.inEl && !b.within(a.getEl()) && !b.within(this.searchtrigger) && !this.isInnerComponent(b, this.searchPanel.getForm())) {
            a.hide()
        }
    },
    onSearchTriggerClick: function() {
        if (this.searchPanel.isVisible()) {
            this.searchPanel.hide();
            return
        }
        this.searchPanel.getEl().alignTo(this.wrap, "tr-br?", [0, 0]);
        this.searchPanel.show();
        this.searchPanel.setKeyWord(this.getValue())
    },
    onTriggerClick: function() {
        this.callParent();
        this.searchPanel.onReset();
        this.searchPanel.onSearch()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.LightPageBar", {
    extend: "Ext.Toolbar",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.addClass("syno-ux-pagingtoolbar");
        this.addClass("syno-activebackupoffice365-light-page-bar");
        this.offset = 0;
        this.loadByPageBar = false;
        this.resetPageHandler();
        this.checkBtns();
        this.store.addListener("datachanged", Ext.createDelegate(this.onDataChange, this))
    },
    fillConfig: function(c) {
        var b = Ext.Toolbar;
        this.prev = new Ext.BoxComponent({
            cls: "btn prev",
            listeners: {
                render: function(d) {
                    d.getEl().addListener("click", function(e, f) {
                        if (d.disabled) {
                            return
                        }
                        d.ownerCt.jumpPrevPageHandler()
                    })
                },
                scope: this
            }
        });
        this.next = new Ext.BoxComponent({
            cls: "btn next",
            listeners: {
                render: function(d) {
                    d.getEl().addListener("click", function(e, f) {
                        if (d.disabled) {
                            return
                        }
                        d.ownerCt.jumpNextPageHandler()
                    })
                },
                scope: this
            }
        });
        this.displayItem = new b.TextItem({});
        this.refresh = new b.Button({
            tooltip: this.refreshText,
            overflowText: this.refreshText,
            iconCls: "x-tbar-loading",
            handler: this.doRefresh,
            scope: this
        });
        var a = {
            items: ["->", this.displayItem, this.prev, this.next, "-", this.refresh]
        };
        return Ext.apply(a, c)
    },
    doRefresh: function() {
        this.loadStore()
    },
    jumpNextPageHandler: function() {
        this.offset += this.store.baseParams.limit;
        this.store.baseParams.offset = this.offset;
        this.loadStore()
    },
    jumpPrevPageHandler: function() {
        this.offset -= this.store.baseParams.limit;
        this.store.baseParams.offset = this.offset;
        this.loadStore()
    },
    setInfo: function(a) {
        if (this.store.getCount() === 0) {
            this.displayItem.setText(SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data"));
            return
        }
        var c = this.store.baseParams.offset + 1;
        var b = this.store.baseParams.offset + a;
        this.displayItem.setText(" " + c + " - " + b + " ")
    },
    resetPageHandler: function() {
        this.refresh.setDisabled(true);
        this.prev.setDisabled(true);
        this.next.setDisabled(true);
        this.offset = 0;
        this.store.baseParams.offset = this.offset
    },
    onDataChange: function() {
        if (this.loadByPageBar === false) {
            this.resetPageHandler()
        }
        this.loadByPageBar = false;
        this.checkBtns()
    },
    loadStore: function() {
        this.refresh.setDisabled(true);
        this.prev.setDisabled(true);
        this.next.setDisabled(true);
        if (!this.store) {
            return
        }
        this.loadByPageBar = true;
        this.store.load()
    },
    checkBtns: function() {
        this.refresh.setDisabled(false);
        if (this.store.getCount() < this.store.baseParams.limit) {
            this.setInfo(this.store.getCount())
        } else {
            this.next.setDisabled(false);
            this.setInfo(this.store.baseParams.limit)
        }
        if (this.offset > 0) {
            this.prev.setDisabled(false)
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.LogPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.logPanel = null;
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        this.pageSize = 200;
        var d = this.createStore();
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: true,
            enableStatusType: false,
            enableTaskType: false,
            enableEventType: false,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.SDS.ActiveBackupOffice365.Model.LightPageBar({
            store: d,
            pageSize: this.pageSize
        });
        var a = {
            itemId: "log_tab",
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: b,
            cls: "syno-activebackupoffice365-log-panel",
            store: d,
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_type"),
            dataIndex: "log_type",
            width: 100,
            sortable: false,
            id: "type",
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.INFO_TYPE) {
                    var k = SYNO.SDS.ActiveBackupOffice365.String("log", "info_type");
                    k = '<span class="info">' + k + "</span>"
                } else {
                    if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.ERROR_TYPE) {
                        k = SYNO.SDS.ActiveBackupOffice365.String("log", "error_type");
                        k = '<span class="error">' + k + "</span>"
                    } else {
                        if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.WARNING_TYPE) {
                            k = SYNO.SDS.ActiveBackupOffice365.String("log", "warning_type");
                            k = '<span class="warning">' + k + "</span>"
                        }
                    }
                }
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_description"),
            dataIndex: "description",
            width: 460,
            id: "description",
            sortable: false,
            renderer: (function(k, g, d, f, h, e) {
                var j = Ext.util.Format.htmlEncode(d.data.description);
                j = '<div class="desc" ext:qtip="' + Ext.util.Format.htmlEncode(j) + '">' + j + "</div>";
                if (d.data.task_execution_id > 0) {
                    j = '<div class="log_link_wrapper"><div class="log_link"></div></div>' + j
                } else {
                    j = '<div class="log_link_wrapper"></div>' + j
                }
                return j
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_general_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "log_type", "timestamp", "description", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "logs",
            baseParams: {
                offset: 0,
                limit: this.pageSize
            },
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.MainWindow", {
    extend: "SYNO.SDS.PageListAppWindow",
    constructor: function(b) {
        var a = this.fillConfig(b);
        this.callParent([a]);
        this.setWidth(SYNO.SDS.ActiveBackupOffice365.WinWidth);
        this.setHeight(SYNO.SDS.ActiveBackupOffice365.WinHeight);
        this.newAllPanel()
    },
    onClickHelp: function() {
        var a = "SYNO.SDS.ActiveBackupOffice365.Portal.Instance",
            b = this.getHelpParam();
        if (Ext.isString(b) && b.length) {
            a += ":" + b
        }
        SYNO.SDS.AppLaunch("SYNO.SDS.HelpBrowser.Application", {
            topic: a
        }, false)
    },
    fillConfig: function(b) {
        var a = [{
            text: SYNO.SDS.ActiveBackupOffice365.String("common", "overview"),
            cls: "list-title",
            iconCls: "syno-activebackupoffice365-overview-list-icon",
            fn: "SYNO.SDS.ActiveBackupOffice365.View.OverViewStatisticPanel"
        }, {
            text: SYNO.SDS.ActiveBackupOffice365.String("common", "task_list"),
            cls: "list-title",
            iconCls: "syno-activebackupoffice365-tasklist-icon",
            fn: "SYNO.SDS.ActiveBackupOffice365.View.TaskListPanel"
        }, {
            text: SYNO.SDS.ActiveBackupOffice365.String("common", "activities"),
            cls: "list-title",
            iconCls: "syno-activebackupoffice365-activities-icon",
            fn: "SYNO.SDS.ActiveBackupOffice365.View.ActivitiesPanel"
        }, {
            text: SYNO.SDS.ActiveBackupOffice365.String("common", "log_center"),
            cls: "list-title",
            iconCls: "syno-activebackupoffice365-log-list-icon",
            fn: "SYNO.SDS.ActiveBackupOffice365.View.LogPanel"
        }];
        return Ext.apply({
            itemId: "app_window",
            minWidth: SYNO.SDS.ActiveBackupOffice365.MinWidth,
            minHeight: SYNO.SDS.ActiveBackupOffice365.MinHeight,
            maximizable: true,
            minimizable: true,
            resizable: true,
            cls: "syno-activebackupoffice365",
            activePage: "SYNO.SDS.ActiveBackupOffice365.View.OverViewStatisticPanel",
            listItems: a
        }, b)
    },
    newAllPanel: function() {
        var b = this.pageCt;
        var a = this.createPage("SYNO.SDS.ActiveBackupOffice365.View.OverViewStatisticPanel");
        this.OverViewStatisticPanelId = a.id;
        b.add(a);
        a = this.createPage("SYNO.SDS.ActiveBackupOffice365.View.TaskListPanel");
        this.TaskListPanelId = a.id;
        b.add(a);
        a = this.createPage("SYNO.SDS.ActiveBackupOffice365.View.ActivitiesPanel");
        this.ActivitiesPanelId = a.id;
        b.add(a);
        a = this.createPage("SYNO.SDS.ActiveBackupOffice365.View.LogPanel");
        this.LogPanelId = a.id;
        b.add(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.AuthorizationPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = new SYNO.ux.FormPanel({
            border: false,
            frame: false,
            region: "center",
            itemId: "formpanel",
            cls: "formpanel",
            labelWidth: 300,
            fieldWidth: 260,
            padding: 0,
            autoFlexcroll: false,
            items: [{
                xtype: "box",
                itemId: "desc_panel",
                hideLabel: true,
                cls: "desc_panel",
                html: SYNO.SDS.ActiveBackupOffice365.String("desc", "office365_region")
            }, {
                xtype: "syno_radio",
                name: "backup_region",
                itemId: "office365_global",
                boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_global"),
                inputValue: 0,
                checked: true
            }, {
                xtype: "syno_radio",
                name: "backup_region",
                itemId: "office365_germany",
                boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_germany"),
                inputValue: 1
            }, {
                xtype: "syno_radio",
                name: "backup_region",
                itemId: "office365_china",
                boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_china"),
                inputValue: 2
            }, {
                xtype: "box",
                itemId: "note_panel",
                cls: "note_panel_wrapper",
                html: '<div class="note">' + SYNO.SDS.ActiveBackupOffice365.String("common", "note") + ':</div><div class="content">' + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "support_plan") + "</div>"
            }]
        });
        var a = {
            hideBorders: true,
            border: false,
            layout: "fit",
            cls: "authorization",
            items: [c]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.TaskSettingsPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        this.account_management_btn = new SYNO.ux.Button({
            xtype: "syno_button",
            text: SYNO.SDS.ActiveBackupOffice365.String("btn", "edit"),
            itemId: "account_management"
        });
        var b = new Ext.data.JsonStore({
            fields: ["desc", "is_usb_share", "name", "uuid", "vol_path"]
        });
        this.addManagedComponent(b);
        var d = new SYNO.ux.FormPanel({
            border: false,
            frame: false,
            region: "center",
            itemId: "formpanel",
            cls: "formpanel",
            padding: 0,
            labelWidth: 300,
            fieldWidth: 260,
            autoFlexcroll: true,
            items: [{
                xtype: "syno_textfield",
                itemId: "task_name",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "task_name"),
                allowBlank: false,
                regex: /^(\S|\S.*\S)$/,
                maxLength: 64
            }, {
                xtype: "syno_combobox",
                itemId: "share_name",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "share_name"),
                store: b,
                displayField: "name",
                valueField: "name",
                allowBlank: false,
                editable: false
            }, {
                xtype: "syno_compositefield",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("account_info", "selected"),
                items: [{
                    xtype: "syno_displayfield",
                    itemId: "user_label",
                    id: this.label_id = Ext.id(),
                    style: "padding-right: 2px;",
                    html: String.format(SYNO.SDS.ActiveBackupOffice365.String("account_info", "chosen_user_label"), '<span class="chosen_user">-</span>')
                }, this.account_management_btn]
            }, {
                xtype: "syno_displayfield",
                itemId: "enable_new_notify",
                style: "padding: 0; height: 28px;",
                value: SYNO.SDS.ActiveBackupOffice365.String("task_info", "enable_new_notify")
            }, {
                xtype: "compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_drive",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "drive"),
                    checked: true,
                    scope: this
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_mail",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "mail"),
                    checked: true,
                    scope: this
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_archive_mail",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail"),
                    checked: true,
                    scope: this
                }]
            }, {
                xtype: "compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_contact",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "contact"),
                    checked: true,
                    scope: this
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_calendar",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "calendar"),
                    checked: true,
                    scope: this
                }]
            }, {
                xtype: "syno_checkbox",
                itemId: "enable_user_restore",
                boxLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "enable_user_restore"),
                scope: this
            }, {
                xtype: "box",
                itemId: "note_panel",
                cls: "note_panel_wrapper",
                html: '<div class="note">' + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "note") + ':</div><div class="content">' + String.format(SYNO.SDS.ActiveBackupOffice365.String("desc", "account_management_desc"), '<span class="path_link">' + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "control_panel") + " > " + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "permission") + "</span>", "<b>" + SYNO.SDS.ActiveBackupOffice365.String("app", "portal_name") + "</b>") + "</div>",
                listeners: {
                    render: function(e) {
                        e.getEl().addListener("click", function(g, h) {
                            var f = Ext.fly(h);
                            if (f && (f.hasClass("path_link"))) {
                                e.fireEvent("click_path_link")
                            }
                        })
                    },
                    scope: this
                }
            }]
        });
        var a = {
            hideBorders: true,
            border: false,
            autoFlexcroll: false,
            layout: "border",
            cls: "task-settings",
            items: [d]
        };
        return Ext.apply(a, c)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.VersionControlPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = new SYNO.ux.FormPanel({
            border: false,
            frame: false,
            region: "center",
            itemId: "formpanel",
            padding: 0,
            cls: "formpanel",
            labelWidth: 300,
            fieldWidth: 260,
            autoFlexcroll: false,
            items: [{
                xtype: "syno_fieldset",
                title: SYNO.SDS.ActiveBackupOffice365.String("task_info", "backup_policy"),
                collapsible: false,
                items: [{
                    xtype: "syno_radio",
                    name: "backup_policy",
                    itemId: "continuous_backup",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "continuous_backup"),
                    inputValue: 0
                }, {
                    xtype: "syno_radio",
                    name: "backup_policy",
                    itemId: "disable_schedule",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "manual_start"),
                    inputValue: 1
                }, {
                    xtype: "syno_radio",
                    name: "backup_policy",
                    itemId: "enable_schedule",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "schedule_start"),
                    inputValue: 2
                }, {
                    xtype: "syno_button",
                    text: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "schedule_setting"),
                    itemId: "schedule_setting",
                    indent: 1
                }]
            }, {
                xtype: "syno_fieldset",
                title: SYNO.SDS.ActiveBackupOffice365.String("task_info", "rotation_policy"),
                collapsible: false,
                items: [{
                    xtype: "syno_radio",
                    name: "rotation_policy",
                    itemId: "preserve_all",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "preserve_all"),
                    inputValue: 0
                }, {
                    xtype: "compositefield",
                    hideLabel: true,
                    items: [{
                        xtype: "syno_radio",
                        width: 440,
                        name: "rotation_policy",
                        itemId: "preserve_in_days",
                        boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "preserve_in_days"),
                        inputValue: 1
                    }, {
                        xtype: "syno_numberfield",
                        itemId: "preserve_day_number",
                        width: 120,
                        disabled: true,
                        hideLabel: true,
                        regex: /^\d+$/,
                        allowBlank: false,
                        allowNegative: false,
                        maxlength: 4,
                        minValue: 1,
                        maxValue: 3650,
                        flex: 0
                    }, {
                        xtype: "syno_displayfield",
                        htmlEncode: false,
                        itemId: "tooltip",
                        width: 60
                    }]
                }]
            }]
        });
        var a = {
            hideBorders: true,
            border: false,
            autoFlexcroll: false,
            layout: "border",
            cls: "version-control",
            items: [{
                xtype: "syno_panel",
                items: [c]
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.SummaryStore", {
    extend: "Ext.data.JsonStore",
    constructor: function(b) {
        var a = {
            autoDestroy: true,
            fields: ["item", "value"]
        };
        this.callParent([Ext.apply(a, b)])
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.SummaryPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            colModel: this.createModel(b),
            store: new SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.SummaryStore()
        };
        return Ext.apply(a, b)
    },
    createModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "item"),
            dataIndex: "item",
            align: "left",
            sortable: false,
            width: 200
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "value"),
            dataIndex: "value",
            align: "left",
            sortable: false,
            width: 200,
            renderer: (function(k, g, d, f, j, e) {
                var h = Ext.util.Format.htmlEncode(d.data.value);
                if (g) {
                    g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(h) + '"'
                }
                return h
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.MainWindow", {
    extend: "SYNO.SDS.Wizard.ModalWindow",
    AuthorizationPanel: null,
    TaskSettingsPanel: null,
    VersionControlPanel: null,
    SummaryPanel: null,
    constructor: function(b) {
        this.owner = b.owner;
        this.setWidth(b.width);
        this.setHeight(b.height);
        this.AuthorizationPanel = new SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.AuthorizationPanel({
            owner: this,
            header: false,
            headline: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_desc_header"),
            description: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_desc_description"),
            itemId: "authorization",
            layout: "fit"
        });
        this.TaskSettingsPanel = new SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.TaskSettingsPanel({
            owner: this,
            header: false,
            headline: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "task_settings_header"),
            description: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "task_settings_description"),
            itemId: "task_settings",
            layout: "fit"
        });
        this.VersionControlPanel = new SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.VersionControlPanel({
            owner: this,
            header: false,
            headline: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "version_control_header"),
            description: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "version_control_description"),
            itemId: "version_control",
            layout: "fit"
        });
        this.SummaryPanel = new SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.SummaryPanel({
            owner: this,
            header: false,
            headline: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "summary_header"),
            description: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "summary_description"),
            itemId: "summary",
            layout: "fit"
        });
        var a = Ext.apply({
            itemId: "main_window",
            title: SYNO.SDS.ActiveBackupOffice365.String("common", "create_wizard"),
            dsmStyle: "v5",
            cls: "syno-activebackupoffice365-create-wizard",
            steps: [this.AuthorizationPanel, this.TaskSettingsPanel, this.VersionControlPanel, this.SummaryPanel]
        }, b);
        this.callParent([a])
    }
});
Ext.ns("SYNO.SDS.ActiveBackupOffice365");
SYNO.SDS.ActiveBackupOffice365.OpenOauthWindow = function(g, e, f) {
    if (g.oauth_window) {
        g.oauth_window.close();
        g.oauth_window = null
    }
    var h = window.location.origin;
    if (!h) {
        h = window.location.protocol + "//" + window.location.host
    }
    var j, d, a, c;
    if (e === SYNO.SDS.ActiveBackupOffice365.Region.GLOBAL) {
        j = "https://login.microsoftonline.com";
        d = "af08ce07-1df9-4a39-b6e6-092ac934eb21";
        a = "https://synooauth.synology.com/ActiveBackupForOffice365/office365.php";
        c = "https://graph.windows.net"
    } else {
        if (e === SYNO.SDS.ActiveBackupOffice365.Region.GERMANY) {
            j = "https://login.microsoftonline.de";
            d = "fa841305-5500-402e-857c-2a0c67b9921f";
            a = "https://synooauth.synology.com/ActiveBackupForOffice365/office365_germany.php";
            c = "https://graph.cloudapi.de"
        } else {
            if (e === SYNO.SDS.ActiveBackupOffice365.Region.CHINA) {
                j = "https://login.chinacloudapi.cn";
                d = "cc1843a6-bdae-4ea0-94d4-0fc26303f636";
                a = "https://synooauth.synology.com/ActiveBackupForOffice365/office365_china.php";
                c = "https://microsoftgraph.chinacloudapi.cn"
            }
        }
    }
    var b = j + "/common/oauth2/authorize";
    b += "?client_id=" + d;
    b += "&prompt=admin_consent";
    b += "&scope=openid";
    b += "&response_type=code";
    b += "&nonce=synologyactive";
    b += "&redirect_uri=" + a;
    b += "&resource=" + c;
    b += "&state=" + h;
    window.ABO365_Callback = f.createDelegate(g);
    g.oauth_window = (window.open(encodeURI(b), "", "width=850, height=740"))
};
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.AuthorizationPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    task_info: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window authorization": {
                activate: this.OnActivate
            },
            "main_window authorization office365_global": {
                check: this.onCheckRegion
            },
            "main_window authorization office365_germany": {
                check: this.onCheckRegion
            },
            "main_window authorization office365_china": {
                check: this.onCheckRegion
            }
        });
        this.componentQuery("main_window authorization").getNext = Ext.createDelegate(this.getNext, this)
    },
    webapiCallback: function(g, f, e, c) {
        this.componentQuery("main_window").clearStatusBusy();
        if (f.has_fail) {
            var a = SYNO.API.Util.GetFirstError(f);
            this.application.show_msg_box(SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(a));
            return
        }
        var d = SYNO.API.Util.GetValByAPI(f, "SYNO.ActiveBackupOffice365", "test_connection");
        var b = SYNO.API.Util.GetValByAPI(f, "SYNO.ActiveBackupOffice365", "list_remote_user");
        if (d.error_code !== 0) {
            this.application.show_msg_box(SYNO.SDS.ActiveBackupOffice365.GetErrorString(d.error_code));
            return
        } else {
            if (b.error_code !== 0) {
                this.application.show_msg_box(SYNO.SDS.ActiveBackupOffice365.GetErrorString(b.error_code));
                return
            } else {
                this.task_info.remote_connection_info.tid = d.tid;
                this.task_info.remote_connection_info.unique_name = d.unique_name;
                this.task_info.remote_connection_info.graph_access_token = d.graph_access_token;
                this.task_info.user_list = b.users;
                this.task_info.chosen_user = b.chosen_user;
                this.task_info.total_user = b.total_user;
                this.task_info.remote_connection_info.admin_unique_id = b.admin_unique_id;
                this.task_info.step = "task_settings";
                this.application.pass_task_info("AuthorizationPanel", "TaskSettingsPanel");
                this.application.go_to("task_settings")
            }
        }
    },
    getNext: function() {
        var a = function(b) {
            b.region = this.task_info.remote_connection_info.region;
            this.componentQuery("main_window").setStatusBusy({
                text: SYNO.SDS.ActiveBackupOffice365.String("loading", "connecting_cloud")
            });
            this.sendWebAPI({
                compound: {
                    stopwhenerror: true,
                    params: [{
                        api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
                        version: 1,
                        method: "test_connection",
                        params: {
                            remote_connection_info: b
                        }
                    }, {
                        api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
                        version: 1,
                        method: "list_remote_user",
                        params: {
                            remote_connection_info: b
                        }
                    }]
                },
                callback: this.webapiCallback.createDelegate(this),
                scope: this
            })
        }.createDelegate(this);
        SYNO.SDS.ActiveBackupOffice365.OpenOauthWindow(this, this.task_info.remote_connection_info.region, a);
        return false
    },
    onCheckRegion: function(b, a) {
        if (b.getItemId() === "office365_global" && a) {
            this.task_info.remote_connection_info.region = SYNO.SDS.ActiveBackupOffice365.Region.GLOBAL
        } else {
            if (b.getItemId() === "office365_germany" && a) {
                this.task_info.remote_connection_info.region = SYNO.SDS.ActiveBackupOffice365.Region.GERMANY
            } else {
                if (b.getItemId() === "office365_china" && a) {
                    this.task_info.remote_connection_info.region = SYNO.SDS.ActiveBackupOffice365.Region.CHINA
                }
            }
        }
    },
    OnActivate: function() {
        if (this.task_info.step === "authorization") {
            this.setAllComponentInit()
        }
    },
    setAllComponentInit: function() {},
    validateAllComponentValue: function() {
        return true
    },
    getAllComponentValue: function() {}
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.AccountManagement", {
    extend: "SYNO.SDS.ModalWindow",
    pageSize: 100,
    mail_select_info: null,
    archive_mail_select_info: null,
    contact_select_info: null,
    calendar_select_info: null,
    drive_select_info: null,
    checkState: {
        SelectAll: "select_all",
        SelectNone: "select_none",
        SelectGray: "select_gray"
    },
    constructor: function(a) {
        this.owner = a.owner;
        this.callback = a.callback;
        this.title = a.window_title;
        this.callParent([this.fillConfig(a)]);
        this.init()
    },
    fillConfig: function(b) {
        this.apply_btn = new SYNO.ux.Button({
            btnStyle: "blue",
            text: _T("common", "apply"),
            itemId: "apply_button"
        });
        this.cancel_btn = new SYNO.ux.Button({
            btnStyle: "gray",
            text: _T("common", "cancel"),
            itemId: "cancel_button"
        });
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-account-management",
            closable: false,
            title: this.window_title,
            minWidth: b.width,
            minHeight: b.height,
            resizable: true,
            maximizable: false,
            minimizable: false,
            border: false,
            layout: "fit",
            items: [this.getGrid(b)],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [this.apply_btn, this.cancel_btn]
            }
        };
        return Ext.apply(a, b)
    },
    getGrid: function(b) {
        var c = this.createStore();
        this.searchfield = new SYNO.ux.TextFilter({
            iconStyle: "filter",
            itemId: "filter",
            emptyText: _JSLIBSTR("uicommon", "search"),
            enableKeyEvents: true
        });
        var a = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            cls: "tool-bar",
            items: ["->", this.searchfield]
        });
        var d = function(e) {
            return
        };
        this.enableDriveColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "drive"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "drive"),
            dataIndex: "enable_drive",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: d,
            fixed: true
        });
        this.enableMailColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "mail"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "mail"),
            dataIndex: "enable_mail",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: d,
            fixed: true
        });
        this.enableArchiveMailColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail_brief"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail"),
            dataIndex: "enable_archive_mail",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: d,
            fixed: true
        });
        this.enableContactColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "contact"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "contact"),
            dataIndex: "enable_contact",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: d,
            fixed: true
        });
        this.enableCalendarColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "calendar"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "calendar"),
            dataIndex: "enable_calendar",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: d,
            fixed: true
        });
        this.pagingBar = new SYNO.ux.PagingToolbar({
            store: c,
            pageSize: this.pageSize,
            displayInfo: true,
            doLoad: this.pageDoLoad,
            showRefreshBtn: false,
            owner: this
        });
        this.grid = new SYNO.ux.GridPanel({
            tbar: a,
            cls: "grid",
            store: c,
            colModel: this.createColumnModel(b),
            plugins: [this.enableDriveColumn, this.enableMailColumn, this.enableArchiveMailColumn, this.enableContactColumn, this.enableCalendarColumn],
            enableColumnMove: false,
            enableHdMenu: false,
            bbar: this.pagingBar,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            })
        });
        return this.grid
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "email"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("account_info", "email"),
            dataIndex: "email",
            width: 200,
            id: "email",
            renderer: (function(k, h, d, g, j, e) {
                var f = Ext.util.Format.htmlEncode(d.data.email);
                h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return f
            }).createDelegate(this)
        }, this.enableDriveColumn, this.enableMailColumn, this.enableArchiveMailColumn, this.enableContactColumn, this.enableCalendarColumn];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    onLoad: function(b, a, c, d) {
        b.totalLength = this.searched_user_list.length
    },
    getSelectAllState: function(a, b) {
        if (b.enable_count === 0) {
            a.box_el.removeClass("syno-ux-cb-checked");
            a.box_el.removeClass("syno-ux-cb-grayed");
            return this.checkState.SelectNone
        } else {
            if (b.enable_count == this.searched_user_list.length) {
                a.box_el.removeClass("syno-ux-cb-grayed");
                a.box_el.addClass("syno-ux-cb-checked");
                return this.checkState.SelectAll
            } else {
                a.box_el.removeClass("syno-ux-cb-checked");
                a.box_el.addClass("syno-ux-cb-grayed");
                return this.checkState.SelectGray
            }
        }
    },
    loadSearchedUserlist: function(g, a) {
        var d, e;
        var c = this.searched_user_list.slice(g, a);
        var f = this.grid.getStore();
        f.loadData(c);
        f.suspendEvents();
        for (d = 0, e = f.getCount(); d < e; d++) {
            var b = f.getAt(d);
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_drive", b.get("origin_enable_drive"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_mail", b.get("origin_enable_mail"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_archive_mail", b.get("origin_enable_archive_mail"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_contact", b.get("origin_enable_contact"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_calendar", b.get("origin_enable_calendar"))
        }
        this.grid.getView().refresh();
        f.resumeEvents();
        this.mail_select_info.state = this.getSelectAllState(this.enableMailColumn, this.mail_select_info);
        this.archive_mail_select_info.state = this.getSelectAllState(this.enableArchiveMailColumn, this.archive_mail_select_info);
        this.contact_select_info.state = this.getSelectAllState(this.enableContactColumn, this.contact_select_info);
        this.calendar_select_info.state = this.getSelectAllState(this.enableCalendarColumn, this.calendar_select_info);
        this.drive_select_info.state = this.getSelectAllState(this.enableDriveColumn, this.drive_select_info)
    },
    pageDoLoad: function(e) {
        this.start = e;
        this.end = e + this.pageSize;
        this.owner.loadSearchedUserlist(e, this.end);
        this.cursor = e;
        var c = this.getPageData(),
            a = c.activePage,
            b = c.pages;
        this.first.setDisabled(a == 1);
        this.prev.setDisabled(a == 1);
        this.next.setDisabled(a == b);
        this.last.setDisabled(a == b);
        this.setFocusPage(c.activePage)
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            fields: ["id", "email", "user_name", "account_status", "enable_drive", "enable_mail", "enable_archive_mail", "enable_contact", "enable_calendar", "origin_enable_drive", "origin_enable_mail", "origin_enable_archive_mail", "origin_enable_contact", "origin_enable_calendar"],
            listeners: {
                scope: this,
                load: this.onLoad,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    },
    init: function() {
        this.apply_btn.addListener("click", Ext.createDelegate(this.onApply, this));
        this.cancel_btn.addListener("click", Ext.createDelegate(this.onCancel, this));
        this.searchfield.addListener("keyup", Ext.createDelegate(this.onKeyUp, this));
        this.searchfield.trigger.addListener("click", Ext.createDelegate(this.onKeyUpSearch, this));
        this.grid.addListener("cellclick", Ext.createDelegate(this.onCellClick, this));
        this.grid.addListener("headerclick", Ext.createDelegate(this.onHeaderClick, this))
    },
    onKeyUp: function(c, b, a) {
        if ((b && b.getKey() === Ext.EventObject.ENTER) || (c && c.getValue() === "")) {
            this.onKeyUpSearch()
        }
    },
    onKeyUpSearch: function() {
        var e = this.searchfield.getValue();
        var d = e.toUpperCase();
        this.searched_user_list = [];
        for (var b = 0, c = this.user_list.length; b < c; b++) {
            var a = this.user_list[b];
            if (a.email.toUpperCase().indexOf(d) !== -1) {
                this.searched_user_list.push(a)
            }
        }
        this.getInitSearchedInfo();
        this.loadSearchedUserlist(0, this.pageSize)
    },
    getEnableCount: function() {
        var c, e;
        var d = this.user_list;
        var b = 0;
        for (c = 0, e = d.length; c < e; c++) {
            var a = d[c];
            if (a.enable_drive === false && a.enable_mail === false && a.enable_archive_mail === false && a.enable_contact === false && a.enable_calendar === false) {
                b++
            }
        }
        return d.length - b
    },
    getData: function() {
        var a = {};
        a.user_list = this.user_list;
        return a
    },
    setStatusError: function(b, a) {
        b = b || {};
        Ext.applyIf(b, {
            text: _T("common", "error_system"),
            iconCls: this.owner.isV5Style() ? "syno-ux-statusbar-error" : "x-status-error"
        });
        a.setStatus(b)
    },
    onApply: function() {
        var c = this.getEnableCount();
        if (c === 0) {
            var b = this.getFooterToolbar();
            this.setStatusError({
                text: SYNO.SDS.ActiveBackupOffice365.String("warning", "no_backup_target"),
                clear: true
            }, b);
            return
        }
        var a = this.getData();
        a.chosen_user = c;
        this.callback(a);
        this.close()
    },
    onCancel: function() {
        Ext.each(this.user_list, function(a) {
            a.enable_drive = a.origin_enable_drive;
            a.enable_mail = a.origin_enable_mail;
            a.enable_archive_mail = a.origin_enable_archive_mail;
            a.enable_contact = a.origin_enable_contact;
            a.enable_calendar = a.origin_enable_calendar
        });
        this.close()
    },
    getListData: function(d, c) {
        for (var a = 0, b = c.length; a < b; a++) {
            if (d === c[a].id) {
                return c[a]
            }
        }
    },
    getEnableKey: function(a) {
        switch (a) {
            case 1:
                return "enable_drive";
            case 2:
                return "enable_mail";
            case 3:
                return "enable_archive_mail";
            case 4:
                return "enable_contact";
            case 5:
                return "enable_calendar";
            default:
                return ""
        }
    },
    onServiceCellSelect: function(a, h, j, d, c) {
        var g = a.getStore().getAt(h);
        var b = g.get("id");
        var f = g.get(c);
        var e = this.getListData(b, this.searched_user_list);
        e[c] = f;
        if (f) {
            d.enable_count++
        } else {
            d.enable_count--
        }
        d.state = this.getSelectAllState(j, d)
    },
    onCellClick: function(b, d, c) {
        var a = this.getEnableKey(c);
        if (c === 1) {
            this.onServiceCellSelect(b, d, this.enableDriveColumn, this.drive_select_info, a)
        } else {
            if (c === 2) {
                this.onServiceCellSelect(b, d, this.enableMailColumn, this.mail_select_info, a)
            } else {
                if (c === 3) {
                    this.onServiceCellSelect(b, d, this.enableArchiveMailColumn, this.archive_mail_select_info, a)
                } else {
                    if (c === 4) {
                        this.onServiceCellSelect(b, d, this.enableContactColumn, this.contact_select_info, a)
                    } else {
                        if (c === 5) {
                            this.onServiceCellSelect(b, d, this.enableCalendarColumn, this.calendar_select_info, a)
                        }
                    }
                }
            }
        }
    },
    onServiceSelectAll: function(c, f, g, b) {
        var e = g.enable_count < this.searched_user_list.length;
        if (e) {
            g.enable_count = this.searched_user_list.length
        } else {
            g.enable_count = 0
        }
        for (var a = 0, d = this.searched_user_list.length; a < d; a++) {
            this.searched_user_list[a][b] = e
        }
        g.state = this.getSelectAllState(f, g)
    },
    onHeaderClick: function(b, d, a) {
        var e = a.getTarget("input", 1, true);
        if (!e) {
            return
        }
        var c = this.getEnableKey(d);
        if (d === 1) {
            this.onServiceSelectAll(b, this.enableDriveColumn, this.drive_select_info, c)
        } else {
            if (d === 2) {
                this.onServiceSelectAll(b, this.enableMailColumn, this.mail_select_info, c)
            } else {
                if (d === 3) {
                    this.onServiceSelectAll(b, this.enableArchiveMailColumn, this.archive_mail_select_info, c)
                } else {
                    if (d === 4) {
                        this.onServiceSelectAll(b, this.enableContactColumn, this.contact_select_info, c)
                    } else {
                        if (d === 5) {
                            this.onServiceSelectAll(b, this.enableCalendarColumn, this.calendar_select_info, c)
                        }
                    }
                }
            }
        }
    },
    getInitSearchedInfo: function() {
        var a = this;
        var d = function() {
            return {
                state: a.checkState.SelectAll,
                enable_count: 0
            }
        };
        this.drive_select_info = d();
        this.mail_select_info = d();
        this.archive_mail_select_info = d();
        this.contact_select_info = d();
        this.calendar_select_info = d();
        var b, c;
        for (b = 0, c = this.searched_user_list.length; b < c; b++) {
            if (this.searched_user_list[b].enable_drive) {
                this.drive_select_info.enable_count++
            }
            if (this.searched_user_list[b].enable_mail) {
                this.mail_select_info.enable_count++
            }
            if (this.searched_user_list[b].enable_archive_mail) {
                this.archive_mail_select_info.enable_count++
            }
            if (this.searched_user_list[b].enable_contact) {
                this.contact_select_info.enable_count++
            }
            if (this.searched_user_list[b].enable_calendar) {
                this.calendar_select_info.enable_count++
            }
        }
    },
    setData: function(a) {
        this.user_list = a.slice();
        this.searched_user_list = a.slice();
        var c, d;
        for (c = 0, d = this.user_list.length; c < d; c++) {
            var b = this.user_list[c];
            b.origin_enable_drive = b.enable_drive;
            b.origin_enable_mail = b.enable_mail;
            b.origin_enable_archive_mail = b.enable_archive_mail;
            b.origin_enable_contact = b.enable_contact;
            b.origin_enable_calendar = b.enable_calendar
        }
        this.getInitSearchedInfo();
        this.loadSearchedUserlist(0, this.pageSize)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.TaskSettingsPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    task_info: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window task_settings": {
                activate: this.OnActivate
            }
        });
        this.componentQuery("main_window task_settings note_panel").addListener("click_path_link", Ext.createDelegate(this.onClickPathLink, this));
        this.componentQuery("main_window task_settings").account_management_btn.addListener("click", Ext.createDelegate(this.onClickAccountManagement, this));
        this.componentQuery("main_window task_settings").getNext = Ext.createDelegate(this.getNext, this);
        var a = this.componentQuery("main_window task_settings formpanel share_name");
        SYNO.SDS.Utils.AddTip(a.getEl(), SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "local_path_desc"));
        var b = this.componentQuery("main_window task_settings enable_new_notify");
        SYNO.SDS.Utils.AddTip(b.getEl(), String.format(SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "enable_new_notify_desc"), SYNO.SDS.ActiveBackupOffice365.CloudName));
        var c = this.componentQuery("main_window task_settings enable_user_restore");
        SYNO.SDS.Utils.AddTip(c.getEl(), String.format(SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "enable_portal_desc")))
    },
    loadShare: function() {
        this.sendWebAPI({
            api: "SYNO.Core.Share",
            version: 1,
            method: "list",
            params: {
                shareType: ["local", "dec"]
            },
            callback: function(d, b, c) {
                if (!d) {
                    return
                }
                var a = this.componentQuery("main_window task_settings formpanel share_name");
                a.getStore().removeAll();
                a.getStore().loadData(b.shares);
                if (a.getStore().getCount() === 0) {
                    this.confirmAddSharefolder()
                }
            },
            scope: this
        })
    },
    confirmAddSharefolder: function() {
        this.componentQuery("main_window").getMsgBox().goToControllPanel = function(d, c, b, a) {
            this.show({
                title: d,
                msg: c,
                buttons: {
                    yes: SYNO.SDS.ActiveBackupOffice365.String("btn", "go_to_control_panel"),
                    no: true
                },
                fn: b,
                scope: a,
                icon: "ext-mb-question",
                minWidth: 100
            });
            return this
        };
        this.componentQuery("main_window").getMsgBox().goToControllPanel(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("error", "no_share"), function(a) {
            if ("yes" === a) {
                SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", {
                    fn: "SYNO.SDS.AdminCenter.Share.Main"
                })
            }
            this.componentQuery("main_window").close()
        }, this)
    },
    getNext: function() {
        if (!this.validateAllComponentValue()) {
            this.application.show_msg_box(_T("common", "forminvalid"));
            return false
        }
        if (this.task_info.chosen_user === 0) {
            this.application.show_msg_box(SYNO.SDS.ActiveBackupOffice365.String("warning", "no_backup_target"));
            return false
        }
        this.testTaskSettings();
        return false
    },
    testTaskSettings: function() {
        var b = this.componentQuery("main_window task_settings formpanel task_name").getValue();
        var a = this.componentQuery("main_window task_settings formpanel share_name").getValue();
        this.application.show_status_busy();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "test_task_settings",
            params: {
                task_name: b,
                share_name: a
            },
            callback: function(f, e, d, c) {
                this.application.clear_status_busy();
                if (!f) {
                    var g = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(e));
                    this.application.show_msg_box(g);
                    return
                }
                this.getAllComponentValue();
                this.task_info.step = "version_control";
                this.application.pass_task_info("TaskSettingsPanel", "VersionControlPanel");
                this.application.go_to("version_control")
            },
            scope: this
        })
    },
    OnActivate: function() {
        if (this.task_info.step === "task_settings") {
            this.setAllComponentInit()
        }
    },
    updateLabel: function(a) {
        var b = this.componentQuery("main_window task_settings user_label");
        var d = a.chosen_user.toString(10);
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getQuantifierString(d, SYNO.SDS.ActiveBackupOffice365.String("account_info", "chosen_user_label"), SYNO.SDS.ActiveBackupOffice365.String("account_info", "chosen_users_label"));
        Ext.get(b.id).update(String.format(c, '<span class="chosen_user">' + d + "</span>"));
        this.componentQuery("main_window task_settings formpanel").doLayout()
    },
    setAllComponentInit: function() {
        this.componentQuery("main_window task_settings task_name").reset();
        this.componentQuery("main_window task_settings formpanel share_name").reset();
        this.loadShare();
        this.updateLabel(this.task_info)
    },
    validateAllComponentValue: function() {
        return (this.componentQuery("main_window task_settings task_name").validate() && this.componentQuery("main_window task_settings formpanel share_name").validate())
    },
    getAllComponentValue: function() {
        this.task_info.task_name = this.componentQuery("main_window task_settings formpanel task_name").getValue();
        this.task_info.share_name = this.componentQuery("main_window task_settings formpanel share_name").getValue();
        this.task_info.enable_auto_add_drive = this.componentQuery("main_window task_settings formpanel enable_auto_add_drive").getValue();
        this.task_info.enable_auto_add_mail = this.componentQuery("main_window task_settings formpanel enable_auto_add_mail").getValue();
        this.task_info.enable_auto_add_archive_mail = this.componentQuery("main_window task_settings formpanel enable_auto_add_archive_mail").getValue();
        this.task_info.enable_auto_add_contact = this.componentQuery("main_window task_settings formpanel enable_auto_add_contact").getValue();
        this.task_info.enable_auto_add_calendar = this.componentQuery("main_window task_settings formpanel enable_auto_add_calendar").getValue();
        this.task_info.enable_user_restore = this.componentQuery("main_window task_settings formpanel enable_user_restore").getValue()
    },
    onClickAccountManagement: function() {
        var b = function(c) {
            if (c) {
                this.updateLabel(c);
                this.task_info.chosen_user = c.chosen_user;
                this.task_info.user_list = c.user_list
            }
        }.createDelegate(this);
        var a = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Model.AccountManagement, {
            owner: this.componentQuery("main_window"),
            width: 900,
            height: 560,
            callback: b,
            title: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "account_management")
        });
        a.setData(this.task_info.user_list);
        a.show()
    },
    onClickPathLink: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", {
            fn: "SYNO.SDS.AdminCenter.AppRulePrivileges.Main"
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.VersionControlPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    task_info: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window version_control": {
                activate: this.OnActivate
            },
            "main_window version_control continuous_backup": {
                check: this.onCheckBackupPolicy
            },
            "main_window version_control disable_schedule": {
                check: this.onCheckBackupPolicy
            },
            "main_window version_control enable_schedule": {
                check: this.onCheckBackupPolicy
            },
            "main_window version_control preserve_all": {
                check: this.onCheckRotationPolicy
            },
            "main_window version_control preserve_in_days": {
                check: this.onCheckRotationPolicy
            },
            "main_window version_control schedule_setting": {
                click: this.onClickScheduleSetting
            }
        });
        this.setAllComponentInit();
        this.componentQuery("main_window version_control").getNext = Ext.createDelegate(this.getNext, this);
        var a = this.componentQuery("main_window version_control continuous_backup");
        SYNO.SDS.Utils.AddTip(a.getEl(), SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "continuous_backup_desc"));
        var b = this.componentQuery("main_window version_control tooltip");
        SYNO.SDS.Utils.AddTip(b.getEl(), SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "rotation_policy_desc"))
    },
    getNext: function() {
        if (!this.validateAllComponentValue()) {
            this.application.show_msg_box(_T("common", "forminvalid"));
            return false
        }
        this.getAllComponentValue();
        this.task_info.step = "summary";
        this.application.pass_task_info("VersionControlPanel", "SummaryPanel");
        return "summary"
    },
    OnActivate: function() {
        if (this.task_info.step === "version_control") {
            this.setAllComponentInit()
        }
    },
    setAllComponentInit: function() {
        this.componentQuery("main_window version_control continuous_backup").setValue(true);
        this.componentQuery("main_window version_control preserve_all").setValue(true);
        this.componentQuery("main_window version_control preserve_in_days").setValue(false);
        this.componentQuery("main_window version_control preserve_day_number").setValue(30);
        this.componentQuery("main_window version_control preserve_day_number").setDisabled(true);
        this.schedule = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getDefaultSchedule()
    },
    validateAllComponentValue: function() {
        return (this.componentQuery("main_window version_control preserve_day_number").validate())
    },
    getAllComponentValue: function() {
        if (this.componentQuery("main_window version_control continuous_backup").getValue() === true) {
            this.task_info.backup_policy = SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS
        } else {
            this.task_info.backup_policy = SYNO.SDS.ActiveBackupOffice365.BackupPolicy.TRADITIONAL
        }
        this.task_info.enable_schedule = this.componentQuery("main_window version_control enable_schedule").getValue();
        this.task_info.schedule = this.schedule;
        if (this.componentQuery("main_window version_control preserve_all").getValue() === true) {
            this.task_info.rotation_policy = SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_ALL
        } else {
            this.task_info.rotation_policy = SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_IN_DAYS
        }
        this.task_info.preserve_day_number = this.componentQuery("main_window version_control preserve_day_number").getValue()
    },
    onCheckBackupPolicy: function(b, a) {
        if (b.getItemId() === "continuous_backup" && a) {
            this.componentQuery("main_window version_control schedule_setting").setDisabled(true)
        } else {
            if (b.getItemId() === "disable_schedule" && a) {
                this.componentQuery("main_window version_control schedule_setting").setDisabled(true)
            } else {
                if (b.getItemId() === "enable_schedule" && a) {
                    this.componentQuery("main_window version_control schedule_setting").setDisabled(false)
                }
            }
        }
    },
    onCheckRotationPolicy: function(b, a) {
        if (b.getItemId() === "preserve_all" && a) {
            this.componentQuery("main_window version_control preserve_day_number").setDisabled(true)
        } else {
            if (b.getItemId() === "preserve_in_days" && a) {
                this.componentQuery("main_window version_control preserve_day_number").setDisabled(false)
            }
        }
    },
    onClickScheduleSetting: function() {
        var b = function(c) {
            if (c) {
                Ext.apply(this.schedule, c)
            }
        }.createDelegate(this);
        var a = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Model.ScheduleSetting, {
            owner: this.componentQuery("main_window"),
            width: 560,
            height: 530,
            callback: b,
            title: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "schedule_setting")
        });
        a.setData(this.schedule);
        a.show()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.SummaryPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    task_info: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window summary": {
                activate: this.onActivated
            }
        });
        this.componentQuery("main_window summary").getNext = Ext.createDelegate(this.getNext, this)
    },
    getNext: function() {
        this.application.show_status_busy(SYNO.SDS.ActiveBackupOffice365.String("loading", "creating_task"));
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "create_task",
            params: {
                task_info: this.task_info
            },
            callback: function(d, c, b, a) {
                this.application.clear_status_busy();
                if (!d) {
                    var e = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(c));
                    this.application.show_msg_box(e);
                    return
                }
                this.application.task_info = this.task_info;
                this.application.new_task_id = c.task_id;
                if (this.task_info.backup_policy !== SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS) {
                    this.confirmBackup(c.task_id)
                } else {
                    this.componentQuery("main_window").hide();
                    this.componentQuery("main_window").close()
                }
            },
            scope: this
        });
        return false
    },
    confirmBackup: function(a) {
        this.componentQuery("main_window").getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_create_and_backup_task"), function(b) {
            if ("yes" === b) {
                this.doBackup(a)
            }
            this.componentQuery("main_window").hide();
            this.componentQuery("main_window").close()
        }, this)
    },
    doBackup: function(a) {
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "backup_task",
            params: {
                task_id: a
            },
            callback: function(e, d, c, b) {
                if (!e) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("common", "error"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(d));
                    return
                }
            },
            scope: this
        })
    },
    onActivated: function() {
        var c = [];
        var b = 0;
        for (var d in this.task_info) {
            if (this.task_info.hasOwnProperty(d)) {
                if (d === "step" || d === "user_list" || d === "schedule" || d === "remote_connection_info" || d === "chosen_user" || d === "total_user" || d === "enable_schedule" || d === "preserve_day_number") {
                    continue
                }
                var f = this.task_info[d];
                if (d === "backup_policy") {
                    if (f === SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS) {
                        f = SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "continuous_backup")
                    } else {
                        if (this.task_info.enable_schedule) {
                            f = SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "enable_schedule")
                        } else {
                            f = SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "manual_start")
                        }
                    }
                }
                if (d === "rotation_policy") {
                    if (f === SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_ALL) {
                        f = SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "preserve_all")
                    } else {
                        f = String.format(SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "preserve_in_days_tpl"), this.task_info.preserve_day_number)
                    }
                }
                if (d === "enable_auto_add_drive" || d === "enable_auto_add_mail" || d === "enable_auto_add_archive_mail" || d === "enable_auto_add_contact" || d === "enable_auto_add_calendar" || d === "enable_user_restore") {
                    if (f === true) {
                        f = SYNO.SDS.ActiveBackupOffice365.String("common", "enable")
                    } else {
                        f = SYNO.SDS.ActiveBackupOffice365.String("common", "disable")
                    }
                }
                c.push({
                    index: b,
                    item: SYNO.SDS.ActiveBackupOffice365.String("task_info", d),
                    value: f
                });
                b = b + 10
            }
        }
        var e = function(h, g) {
            if (h.index == g.index) {
                return 0
            }
            if (h.index < g.index) {
                return -1
            }
            return 1
        };
        var a = c.sort(e);
        this.componentQuery("main_window summary").getStore().loadData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Widget",
    viewport: "SYNO.SDS.ActiveBackupOffice365.View.CreateWizard.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.AuthorizationPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.TaskSettingsPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.VersionControlPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.SummaryPanel"],
    models: [],
    stores: [],
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a]);
        this.ondestroy_callback = a.ondestroy_callback;
        this.getController("AuthorizationPanel").task_info = this.get_init_task_info("authorization")
    },
    init: function() {
        this.control({
            main_window: {
                destroy: this.onDestroy
            }
        })
    },
    onDestroy: function() {
        var a = {};
        if (this.task_info) {
            a = this.task_info
        }
        a.task_id = this.new_task_id;
        a.status = SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.BACKUPING;
        this.ondestroy_callback(a)
    },
    show_msg_box: function(b, a) {
        if (typeof b === "string" || b instanceof String) {
            this.componentQuery("main_window").getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), b, a)
        }
    },
    show_status_busy: function(a) {
        if (typeof a === "string" || a instanceof String) {
            this.componentQuery("main_window").setStatusBusy({
                text: a
            })
        } else {
            this.componentQuery("main_window").setStatusBusy()
        }
    },
    clear_status_busy: function() {
        this.componentQuery("main_window").clearStatusBusy()
    },
    go_to: function(a) {
        if (typeof a === "string") {
            this.componentQuery("main_window").goNext(a)
        }
    },
    back_to: function(a) {
        if (typeof a === "string") {
            this.componentQuery("main_window").goBack(a)
        }
    },
    pass_task_info: function(a, d) {
        var c = this.getController(a);
        var e = this.getController(d);
        e.task_info = {};
        for (var b in c.task_info) {
            if (c.task_info.hasOwnProperty(b)) {
                e.task_info[b] = c.task_info[b]
            }
        }
    },
    get_init_task_info: function(a) {
        return {
            step: a,
            remote_connection_info: {
                tid: "",
                unique_name: "",
                admin_unique_id: "",
                resource: "",
                region: SYNO.SDS.ActiveBackupOffice365.Region.GLOBAL,
                graph_access_token: "",
                graph_refresh_token: "",
                onedrive_access_token: "",
                onedrive_refresh_token: ""
            },
            task_name: "",
            share_name: "",
            enable_auto_add_drive: false,
            enable_auto_add_mail: false,
            enable_auto_add_archive_mail: false,
            enable_auto_add_contact: false,
            enable_auto_add_calendar: false,
            enable_user_restore: false,
            user_list: [],
            chosen_user: 0,
            total_user: 0,
            backup_policy: 0,
            enable_schedule: false,
            schedule: {},
            rotation_policy: 0,
            preserve_day_number: 0
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.TaskSettingsPanel", {
    extend: "SYNO.ux.FormPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            cls: "task-settings",
            labelWidth: 300,
            fieldWidth: 445,
            padding: 5,
            autoFlexcroll: false,
            items: [{
                xtype: "syno_displayfield",
                itemId: "office365_region",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_region")
            }, {
                xtype: "syno_displayfield",
                itemId: "administrator_account_email",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "administrator_account_email")
            }, {
                xtype: "syno_textfield",
                itemId: "task_name",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "task_name"),
                allowBlank: false,
                regex: /^(\S|\S.*\S)$/,
                maxLength: 64
            }, {
                xtype: "syno_textfield",
                itemId: "local_path",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "local_path"),
                allowBlank: false,
                disabled: true,
                maxLength: 64
            }, {
                xtype: "syno_displayfield",
                itemId: "enable_new_notify",
                style: "padding: 0; height: 28px;",
                value: SYNO.SDS.ActiveBackupOffice365.String("task_info", "enable_new_notify")
            }, {
                xtype: "compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_drive",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "drive"),
                    scope: this
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_mail",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "mail"),
                    scope: this
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_archive_mail",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail"),
                    scope: this
                }]
            }, {
                xtype: "compositefield",
                hideLabel: true,
                items: [{
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_contact",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "contact"),
                    scope: this
                }, {
                    xtype: "syno_checkbox",
                    indent: 1,
                    width: 200,
                    itemId: "enable_auto_add_calendar",
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "calendar"),
                    scope: this
                }]
            }, {
                xtype: "syno_checkbox",
                itemId: "enable_user_restore",
                boxLabel: SYNO.SDS.ActiveBackupOffice365.String("task_info", "enable_user_restore"),
                scope: this
            }, {
                xtype: "box",
                itemId: "note_panel",
                cls: "note_panel_wrapper",
                html: '<div class="note">' + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "note") + ':</div><div class="content">' + String.format(SYNO.SDS.ActiveBackupOffice365.String("desc", "account_management_desc"), '<span class="path_link">' + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "control_panel") + " > " + SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "permission") + "</span>", "<b>" + SYNO.SDS.ActiveBackupOffice365.String("app", "portal_name") + "</b>") + "</div>",
                listeners: {
                    render: function(c) {
                        c.getEl().addListener("click", function(e, f) {
                            var d = Ext.fly(f);
                            if (d && (d.hasClass("path_link"))) {
                                c.fireEvent("click_path_link")
                            }
                        })
                    },
                    scope: this
                }
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.RotationPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = new SYNO.ux.FormPanel({
            border: false,
            frame: false,
            region: "center",
            itemId: "formpanel",
            cls: "formpanel",
            labelWidth: 300,
            fieldWidth: 300,
            autoFlexcroll: false,
            items: [{
                xtype: "syno_fieldset",
                title: SYNO.SDS.ActiveBackupOffice365.String("task_info", "backup_policy"),
                collapsible: false,
                items: [{
                    xtype: "syno_radio",
                    name: "backup_policy",
                    itemId: "continuous_backup",
                    check: false,
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "continuous_backup"),
                    inputValue: 0
                }, {
                    xtype: "syno_radio",
                    name: "backup_policy",
                    itemId: "disable_schedule",
                    check: false,
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "manual_start"),
                    inputValue: 1
                }, {
                    xtype: "syno_radio",
                    name: "backup_policy",
                    itemId: "enable_schedule",
                    check: false,
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("backup_policy", "schedule_start"),
                    inputValue: 2
                }, {
                    xtype: "syno_button",
                    text: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "schedule_setting"),
                    itemId: "schedule_setting",
                    indent: 1
                }]
            }, {
                xtype: "syno_fieldset",
                title: SYNO.SDS.ActiveBackupOffice365.String("task_info", "rotation_policy"),
                collapsible: false,
                items: [{
                    xtype: "syno_radio",
                    name: "rotation_policy",
                    itemId: "preserve_all",
                    check: false,
                    boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "preserve_all"),
                    inputValue: 0
                }, {
                    xtype: "compositefield",
                    hideLabel: true,
                    items: [{
                        xtype: "syno_radio",
                        width: 440,
                        name: "rotation_policy",
                        itemId: "preserve_in_days",
                        check: false,
                        boxLabel: SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "preserve_in_days"),
                        inputValue: 1
                    }, {
                        xtype: "syno_numberfield",
                        itemId: "preserve_day_number",
                        disabled: true,
                        hideLabel: true,
                        regex: /^\d+$/,
                        allowBlank: false,
                        allowNegative: false,
                        maxlength: 4,
                        minValue: 1,
                        maxValue: 3650,
                        flex: 0
                    }, {
                        xtype: "syno_displayfield",
                        htmlEncode: false,
                        itemId: "tooltip",
                        width: 60
                    }]
                }]
            }]
        });
        var a = {
            hideBorders: true,
            border: false,
            autoFlexcroll: false,
            cls: "rotation",
            items: [{
                xtype: "syno_panel",
                items: [c]
            }]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.AccountManagementPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 100,
    mail_select_info: null,
    archive_mail_select_info: null,
    contact_select_info: null,
    calendar_select_info: null,
    drive_select_info: null,
    checkState: {
        SelectAll: "select_all",
        SelectNone: "select_none",
        SelectGray: "select_gray"
    },
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore();
        this.removeStorageBtn = new SYNO.ux.Button({
            text: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_btn"),
            disabled: true
        });
        this.searchfield = new SYNO.ux.TextFilter({
            iconStyle: "filter",
            itemId: "filter",
            emptyText: _JSLIBSTR("uicommon", "search"),
            enableKeyEvents: true
        });
        this.btn_refresh = new SYNO.ux.Button({
            itemId: "btn_refresh",
            text: SYNO.SDS.ActiveBackupOffice365.String("btn", "refresh_user_list")
        });
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            cls: "tool-bar",
            items: [this.removeStorageBtn, this.btn_refresh, "->", this.searchfield]
        });
        var e = function() {
            return
        };
        this.enableDriveColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "drive"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "drive"),
            dataIndex: "enable_drive",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: e,
            fixed: true
        });
        this.enableMailColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "mail"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "mail"),
            dataIndex: "enable_mail",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: e,
            fixed: true
        });
        this.enableArchiveMailColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail_brief"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail"),
            dataIndex: "enable_archive_mail",
            enableFastSelectAll: true,
            width: 100,
            checkSelectAll: e,
            fixed: true
        });
        this.enableContactColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "contact"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "contact"),
            dataIndex: "enable_contact",
            enableFastSelectAll: true,
            checkSelectAll: e,
            width: 100,
            fixed: true
        });
        this.enableCalendarColumn = new SYNO.ux.EnableColumn({
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "calendar"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("common", "calendar"),
            dataIndex: "enable_calendar",
            enableFastSelectAll: true,
            checkSelectAll: e,
            width: 100,
            fixed: true
        });
        this.pagingBar = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true,
            doLoad: this.pageDoLoad,
            showRefreshBtn: false,
            owner: this
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: b,
            cls: "account-management",
            store: d,
            colModel: this.createColumnModel(c),
            plugins: [this.enableDriveColumn, this.enableMailColumn, this.enableArchiveMailColumn, this.enableContactColumn, this.enableCalendarColumn],
            enableColumnMove: false,
            enableHdMenu: false,
            bbar: this.pagingBar,
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: true
            })
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "email"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("account_info", "email"),
            dataIndex: "email",
            width: 200,
            id: "email",
            renderer: (function(l, j, d, g, k, e) {
                var h = (d.data.account_status === SYNO.SDS.ActiveBackupOffice365.AccountStatus.DELETED);
                var f = Ext.util.Format.htmlEncode(d.data.email);
                if (h) {
                    f += " (" + SYNO.SDS.ActiveBackupOffice365.String("account_info", "email_deleted") + ")";
                    j.css = "deleted-user"
                }
                j.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return f
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "size"),
            dataIndex: "local_used_storage",
            align: "center",
            id: "local_used_storage",
            width: 80,
            renderer: function(k, e, d, l, g, f) {
                if (!d.data.is_user_repo_exist) {
                    return "--"
                }
                var h = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(k);
                var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(k);
                return h + " " + j
            }
        }, this.enableDriveColumn, this.enableMailColumn, this.enableArchiveMailColumn, this.enableContactColumn, this.enableCalendarColumn];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    onLoad: function(b, a, c, d) {
        b.totalLength = this.searched_user_list.length
    },
    getSelectAllState: function(a, b) {
        if (b.enable_count === 0) {
            a.box_el.removeClass("syno-ux-cb-checked");
            a.box_el.removeClass("syno-ux-cb-grayed");
            return this.checkState.SelectNone
        } else {
            if (b.enable_count == this.searched_user_list.length) {
                a.box_el.removeClass("syno-ux-cb-grayed");
                a.box_el.addClass("syno-ux-cb-checked");
                return this.checkState.SelectAll
            } else {
                a.box_el.removeClass("syno-ux-cb-checked");
                a.box_el.addClass("syno-ux-cb-grayed");
                return this.checkState.SelectGray
            }
        }
    },
    loadSearchedUserlist: function(g, a) {
        var d, e;
        var c = this.searched_user_list.slice(g, a);
        var f = this.getStore();
        f.loadData(c);
        f.suspendEvents();
        for (d = 0, e = f.getCount(); d < e; d++) {
            var b = f.getAt(d);
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_drive", b.get("origin_enable_drive"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_mail", b.get("origin_enable_mail"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_archive_mail", b.get("origin_enable_archive_mail"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_contact", b.get("origin_enable_contact"));
            SYNO.SDS.ActiveBackupOffice365.Utils.setDirtyOrigin(b, "enable_calendar", b.get("origin_enable_calendar"))
        }
        this.getView().refresh();
        f.resumeEvents();
        this.mail_select_info.state = this.getSelectAllState(this.enableMailColumn, this.mail_select_info);
        this.archive_mail_select_info.state = this.getSelectAllState(this.enableArchiveMailColumn, this.archive_mail_select_info);
        this.contact_select_info.state = this.getSelectAllState(this.enableContactColumn, this.contact_select_info);
        this.calendar_select_info.state = this.getSelectAllState(this.enableCalendarColumn, this.calendar_select_info);
        this.drive_select_info.state = this.getSelectAllState(this.enableDriveColumn, this.drive_select_info)
    },
    pageDoLoad: function(e) {
        this.start = e;
        this.end = e + this.pageSize;
        this.owner.loadSearchedUserlist(e, this.end);
        this.cursor = e;
        var c = this.getPageData(),
            a = c.activePage,
            b = c.pages;
        this.first.setDisabled(a == 1);
        this.prev.setDisabled(a == 1);
        this.next.setDisabled(a == b);
        this.last.setDisabled(a == b);
        this.setFocusPage(c.activePage)
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            fields: ["id", "email", "user_name", "account_status", "enable_drive", "enable_mail", "enable_archive_mail", "enable_contact", "enable_calendar", "origin_enable_drive", "origin_enable_mail", "origin_enable_archive_mail", "origin_enable_contact", "origin_enable_calendar", "local_used_storage", "is_user_repo_exist"],
            listeners: {
                scope: this,
                load: this.onLoad,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.MainWindow", {
    extend: "SYNO.SDS.ModalWindow",
    panel_task_settings: null,
    panel_account_management: null,
    panel_rotation: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.task_id = a.task_id
    },
    fillConfig: function(b) {
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-settings-tabpanel",
            closable: false,
            title: b.window_title,
            resizable: false,
            border: true,
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                itemId: "settings_tab",
                activeTab: 0,
                cls: "tabpanel",
                deferredRender: false,
                items: this.getTabs(b)
            }],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [{
                    text: _T("common", "apply"),
                    xtype: "syno_button",
                    btnStyle: "blue",
                    itemId: "apply_button",
                    disabled: _S("demo_mode"),
                    tooltip: _S("demo_mode") ? _JSLIBSTR("uicommon", "error_demo") : ""
                }, {
                    text: _T("common", "cancel"),
                    xtype: "syno_button",
                    btnStyle: "gray",
                    itemId: "cancel_button"
                }]
            }
        };
        return Ext.apply(a, b)
    },
    getTabs: function(a) {
        this.panel_task_settings = new SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.TaskSettingsPanel(Ext.apply({
            itemId: "task_settings",
            title: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "task_settings"),
            owner: this.owner
        }, a));
        this.panel_account_management = new SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.AccountManagementPanel(Ext.apply({
            itemId: "account_management",
            title: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "user_list"),
            owner: this.owner
        }, a));
        this.panel_rotation = new SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.RotationPanel(Ext.apply({
            itemId: "rotation",
            title: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "rotation"),
            owner: this.owner
        }, a));
        return [this.panel_task_settings, this.panel_account_management, this.panel_rotation]
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.TaskSettingsPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window settings_tab task_settings": {
                activate: this.onActivated
            }
        });
        this.componentQuery("main_window settings_tab task_settings note_panel").addListener("click_path_link", Ext.createDelegate(this.onClickPathLink, this));
        var a = this.componentQuery("main_window settings_tab task_settings enable_new_notify");
        SYNO.SDS.Utils.AddTip(a.getEl(), String.format(SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "enable_new_notify_desc"), SYNO.SDS.ActiveBackupOffice365.CloudName));
        var b = this.componentQuery("main_window settings_tab task_settings enable_user_restore");
        SYNO.SDS.Utils.AddTip(b.getEl(), SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "enable_portal_desc"))
    },
    setData: function(a) {
        if (a.region === SYNO.SDS.ActiveBackupOffice365.Region.GERMANY) {
            this.componentQuery("main_window settings_tab task_settings office365_region").setValue(SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_germany"))
        } else {
            if (a.region === SYNO.SDS.ActiveBackupOffice365.Region.CHINA) {
                this.componentQuery("main_window settings_tab task_settings office365_region").setValue(SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_china"))
            } else {
                this.componentQuery("main_window settings_tab task_settings office365_region").setValue(SYNO.SDS.ActiveBackupOffice365.String("create_wizard", "office365_global"))
            }
        }
        this.componentQuery("main_window settings_tab task_settings administrator_account_email").setValue(a.administrator_account_email);
        this.componentQuery("main_window settings_tab task_settings task_name").setValue(a.task_name);
        this.componentQuery("main_window settings_tab task_settings local_path").setValue(a.local_path);
        this.componentQuery("main_window settings_tab task_settings enable_auto_add_drive").setValue(a.enable_auto_add_drive);
        this.componentQuery("main_window settings_tab task_settings enable_auto_add_mail").setValue(a.enable_auto_add_mail);
        this.componentQuery("main_window settings_tab task_settings enable_auto_add_archive_mail").setValue(a.enable_auto_add_archive_mail);
        this.componentQuery("main_window settings_tab task_settings enable_auto_add_contact").setValue(a.enable_auto_add_contact);
        this.componentQuery("main_window settings_tab task_settings enable_auto_add_calendar").setValue(a.enable_auto_add_calendar);
        this.componentQuery("main_window settings_tab task_settings enable_user_restore").setValue(a.enable_user_restore)
    },
    getData: function() {
        var a = {};
        a.task_name = this.componentQuery("main_window settings_tab task_settings task_name").getValue();
        a.local_path = this.componentQuery("main_window settings_tab task_settings local_path").getValue();
        a.enable_auto_add_drive = this.componentQuery("main_window settings_tab task_settings enable_auto_add_drive").getValue();
        a.enable_auto_add_mail = this.componentQuery("main_window settings_tab task_settings enable_auto_add_mail").getValue();
        a.enable_auto_add_archive_mail = this.componentQuery("main_window settings_tab task_settings enable_auto_add_archive_mail").getValue();
        a.enable_auto_add_contact = this.componentQuery("main_window settings_tab task_settings enable_auto_add_contact").getValue();
        a.enable_auto_add_calendar = this.componentQuery("main_window settings_tab task_settings enable_auto_add_calendar").getValue();
        a.enable_user_restore = this.componentQuery("main_window settings_tab task_settings enable_user_restore").getValue();
        return a
    },
    validate: function() {
        return (this.componentQuery("main_window settings_tab task_name").validate())
    },
    onActivated: function() {},
    onClickPathLink: function() {
        SYNO.SDS.AppLaunch("SYNO.SDS.AdminCenter.Application", {
            fn: "SYNO.SDS.AdminCenter.AppRulePrivileges.Main"
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.ScheduleSetting", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callback = a.callback;
        this.callParent([this.fillConfig(a)]);
        this.init()
    },
    fillConfig: function(b) {
        this.apply_btn = new SYNO.ux.Button({
            btnStyle: "blue",
            text: _T("common", "apply"),
            itemId: "apply_button"
        });
        this.cancel_btn = new SYNO.ux.Button({
            btnStyle: "gray",
            text: _T("common", "cancel"),
            itemId: "cancel_button"
        });
        this.EditSchedulePanel = new SYNO.SDS.TaskScheduler2.EditSchedulePanel(b);
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-advance-setting",
            closable: true,
            resizable: false,
            border: true,
            layout: "fit",
            items: [this.EditSchedulePanel],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [this.apply_btn, this.cancel_btn]
            }
        };
        return Ext.apply(a, b)
    },
    init: function() {
        this.apply_btn.addListener("click", Ext.createDelegate(this.onApply, this));
        this.cancel_btn.addListener("click", Ext.createDelegate(this.onCancel, this))
    },
    onApply: function() {
        var a = this.EditSchedulePanel.getData();
        this.callback(a);
        this.close()
    },
    onCancel: function() {
        this.close()
    },
    setData: function(a) {
        this.EditSchedulePanel.setData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.RotationPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window settings_tab rotation": {
                activate: this.onActivated
            },
            "main_window rotation continuous_backup": {
                check: this.onCheckBackupPolicy
            },
            "main_window rotation disable_schedule": {
                check: this.onCheckBackupPolicy
            },
            "main_window rotation enable_schedule": {
                check: this.onCheckBackupPolicy
            },
            "main_window rotation preserve_all": {
                check: this.onCheckRotationPolicy
            },
            "main_window rotation preserve_in_days": {
                check: this.onCheckRotationPolicy
            },
            "main_window rotation schedule_setting": {
                click: this.onClickScheduleSetting
            }
        });
        var a = this.componentQuery("main_window rotation continuous_backup");
        SYNO.SDS.Utils.AddTip(a.getEl(), SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "continuous_backup_desc"));
        var b = this.componentQuery("main_window rotation tooltip");
        SYNO.SDS.Utils.AddTip(b.getEl(), SYNO.SDS.ActiveBackupOffice365.String("tool_tip", "rotation_policy_desc"))
    },
    setData: function(a) {
        if (SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS === a.backup_policy) {
            this.componentQuery("main_window settings_tab rotation continuous_backup").setValue(true)
        } else {
            if (SYNO.SDS.ActiveBackupOffice365.BackupPolicy.TRADITIONAL === a.backup_policy) {
                if (a.enable_schedule) {
                    this.componentQuery("main_window settings_tab rotation enable_schedule").setValue(true)
                } else {
                    this.componentQuery("main_window settings_tab rotation disable_schedule").setValue(true)
                }
            }
        }
        if (SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_ALL === a.rotation_policy) {
            this.componentQuery("main_window settings_tab rotation preserve_all").setValue(true)
        } else {
            if (SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_IN_DAYS === a.rotation_policy) {
                this.componentQuery("main_window settings_tab rotation preserve_in_days").setValue(true)
            }
        }
        this.componentQuery("main_window settings_tab rotation preserve_day_number").setValue(a.preserve_day_number);
        this.schedule = {};
        Ext.apply(this.schedule, a.schedule)
    },
    getData: function() {
        var a = {};
        if (this.componentQuery("main_window rotation continuous_backup").getValue() === true) {
            a.backup_policy = SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS
        } else {
            a.backup_policy = SYNO.SDS.ActiveBackupOffice365.BackupPolicy.TRADITIONAL
        }
        a.enable_schedule = this.componentQuery("main_window rotation enable_schedule").getValue();
        a.schedule = this.schedule;
        if (this.componentQuery("main_window rotation preserve_all").getValue() === true) {
            a.rotation_policy = SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_ALL
        } else {
            a.rotation_policy = SYNO.SDS.ActiveBackupOffice365.RotationPolicy.PRESERVE_IN_DAYS
        }
        a.preserve_day_number = this.componentQuery("main_window rotation preserve_day_number").getValue();
        return a
    },
    validate: function() {
        return (this.componentQuery("main_window rotation preserve_day_number").validate())
    },
    onActivated: function() {},
    onCheckBackupPolicy: function(b, a) {
        if (b.getItemId() === "continuous_backup" && a) {
            this.componentQuery("main_window rotation schedule_setting").setDisabled(true)
        } else {
            if (b.getItemId() === "disable_schedule" && a) {
                this.componentQuery("main_window rotation schedule_setting").setDisabled(true)
            } else {
                if (b.getItemId() === "enable_schedule" && a) {
                    this.componentQuery("main_window rotation schedule_setting").setDisabled(false)
                }
            }
        }
    },
    onCheckRotationPolicy: function(b, a) {
        if (b.getItemId() === "preserve_all" && a) {
            this.componentQuery("main_window rotation preserve_day_number").setDisabled(true)
        } else {
            if (b.getItemId() === "preserve_in_days" && a) {
                this.componentQuery("main_window rotation preserve_day_number").setDisabled(false)
            }
        }
    },
    onClickScheduleSetting: function() {
        var b = function(c) {
            if (c) {
                Ext.apply(this.schedule, c)
            }
        }.createDelegate(this);
        var a = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Model.ScheduleSetting, {
            owner: this.componentQuery("main_window"),
            width: 560,
            height: 530,
            callback: b,
            title: SYNO.SDS.ActiveBackupOffice365.String("settings_tab_panel", "schedule_setting")
        });
        a.setData(this.schedule);
        a.show()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.RemoveStorage", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callback = a.callback;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.apply_btn = new SYNO.ux.Button({
            btnStyle: "red",
            disabled: true,
            text: _T("common", "delete"),
            itemId: "apply_button",
            handler: this.onApply,
            scope: this
        });
        this.cancel_btn = new SYNO.ux.Button({
            btnStyle: "gray",
            text: _T("common", "cancel"),
            itemId: "cancel_button",
            handler: this.onCancel,
            scope: this
        });
        this.deleteColumn = new SYNO.ux.EnableColumn({
            dataIndex: "delete_storage",
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_delete"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_delete"),
            width: 100,
            bindRowClick: true,
            renderer: function(g, e, d) {
                var f = ("gray" === g ? "grayed" : g ? "checked" : "unchecked"),
                    c = (f === "grayed") ? "mixed" : (f === "checked"),
                    h = (d) ? d.id + "_" + this.dataIndex : Ext.id();
                if (!d.data.is_repo_exist) {
                    f = "disabled"
                }
                e = e || {};
                e.attr = 'aria-labelledby="' + h + '" for="' + h + '"';
                return String.format('<div class="syno-ux-grid-enable-column-{0}" aria-label="' + this.orgHeader + '" role="checkbox" aria-checked="{1}" tabIndex="-1" id="{2}"></div>', f, c, h)
            },
            isIgnore: function(d, c) {
                if (!c.data.is_repo_exist) {
                    return true
                }
                return false
            },
            fixed: true
        });
        var a = {
            cls: "syno-activebackupoffice365-remove-storage without-dirty-red-grid",
            closable: true,
            resizable: false,
            border: true,
            items: [{
                xtype: "label",
                cls: "description",
                html: String.format(SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_desc"), b.email)
            }, {
                xtype: "box",
                cls: "email",
                html: b.email
            }, {
                xtype: "syno_gridpanel",
                height: 186,
                store: this.createStore(b.task_id, b.user_id),
                plugins: [this.deleteColumn],
                colModel: this.createColumnModel(),
                enableColumnMove: false,
                enableHdMenu: false,
                selModel: new Ext.grid.RowSelectionModel({
                    singleSelect: true
                })
            }, {
                xtype: "syno_checkbox",
                boxLabel: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_checkbox"),
                listeners: {
                    check: function(d, c) {
                        this.apply_btn.setDisabled(!c)
                    },
                    scope: this
                }
            }],
            fbar: {
                xtype: "statusbar",
                defaultText: "&nbsp",
                statusAlign: "left",
                buttonAlign: "left",
                items: [this.apply_btn, this.cancel_btn]
            }
        };
        return Ext.apply(a, b)
    },
    onApply: function() {
        var c = !!(this.store.getById(SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE).data.delete_storage);
        var e = !!(this.store.getById(SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL).data.delete_storage);
        var a = !!(this.store.getById(SYNO.SDS.ActiveBackupOffice365.ServiceType.ARCHIVE_MAIL).data.delete_storage);
        var b = !!(this.store.getById(SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT).data.delete_storage);
        var d = !!(this.store.getById(SYNO.SDS.ActiveBackupOffice365.ServiceType.CALENDAR).data.delete_storage);
        if (!c && !e && !a && !b && !d) {
            this.close();
            return
        }
        this.setStatusBusy();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "delete_user_storage",
            timeout: 1000 * 60 * 60 * 60,
            params: {
                task_id: this.task_id,
                user_id: this.user_id,
                is_delete_drive: c,
                is_delete_mail: e,
                is_delete_archive_mail: a,
                is_delete_contact: b,
                is_delete_calendar: d
            },
            callback: function(j, h, g, f) {
                if (!j) {
                    this.clearStatusBusy();
                    this.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(h));
                    return
                }
                this.callback(h);
                this.close()
            },
            scope: this
        })
    },
    onCancel: function() {
        this.close()
    },
    createColumnModel: function() {
        var b = [this.deleteColumn, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_service"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_service"),
            dataIndex: "service",
            renderer: function(g, d, c, h, f, e) {
                if (c.data.delete_storage) {
                    d.css += "delete-storage "
                }
                return SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeString(g)
            }
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "size"),
            tooltip: SYNO.SDS.ActiveBackupOffice365.String("account_info", "size"),
            dataIndex: "storage",
            align: "center",
            id: "size",
            width: 80,
            renderer: function(j, d, c, k, f, e) {
                if (!c.data.is_repo_exist) {
                    return "--"
                }
                if (c.data.delete_storage) {
                    d.css += "delete-storage "
                }
                var g = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(j);
                var h = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(j);
                return g + " " + h
            }
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    createStore: function(b, a) {
        var c = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "list_user_storage",
            version: 1,
            autoLoad: true,
            fields: ["delete_storage", "service", "storage", "is_repo_exist"],
            totalProperty: "total",
            idProperty: "service",
            root: "storage",
            baseParams: {
                task_id: b,
                user_id: a
            },
            appWindow: this
        });
        this.store = c;
        this.addManagedComponent(c);
        return c
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.AccountManagementPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    selected_record: undefined,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window account_management": {
                activate: this.onActivated,
                cellclick: this.onCellClick,
                headerclick: this.onHeaderClick
            }
        });
        this.panel = this.componentQuery("main_window account_management");
        this.panel.getSelectionModel().addListener("selectionchange", Ext.createDelegate(this.onSelectionchange, this));
        this.data_store = this.panel.getStore();
        this.panel.searchfield.addListener("keyup", Ext.createDelegate(this.onKeyUp, this));
        this.panel.searchfield.trigger.addListener("click", Ext.createDelegate(this.onKeyUpSearch, this));
        this.panel.btn_refresh.addListener("click", Ext.createDelegate(this.onClickRefresh, this));
        this.panel.removeStorageBtn.addListener("click", Ext.createDelegate(this.onClickRemoveStorage, this))
    },
    getListData: function(d, c) {
        for (var a = 0, b = c.length; a < b; a++) {
            if (d === c[a].id) {
                return c[a]
            }
        }
    },
    getEnableKey: function(a) {
        switch (a) {
            case 2:
                return "enable_drive";
            case 3:
                return "enable_mail";
            case 4:
                return "enable_archive_mail";
            case 5:
                return "enable_contact";
            case 6:
                return "enable_calendar";
            default:
                return ""
        }
    },
    onServiceCellSelect: function(a, h, j, d, c) {
        var g = a.getStore().getAt(h);
        var b = g.get("id");
        var f = g.get(c);
        var e = this.getListData(b, a.searched_user_list);
        e[c] = f;
        if (f) {
            d.enable_count++
        } else {
            d.enable_count--
        }
        d.state = a.getSelectAllState(j, d)
    },
    onCellClick: function(b, d, c) {
        var a = this.getEnableKey(c);
        if (c === 2) {
            this.onServiceCellSelect(b, d, b.enableDriveColumn, b.drive_select_info, a)
        } else {
            if (c === 3) {
                this.onServiceCellSelect(b, d, b.enableMailColumn, b.mail_select_info, a)
            } else {
                if (c === 4) {
                    this.onServiceCellSelect(b, d, b.enableArchiveMailColumn, b.archive_mail_select_info, a)
                } else {
                    if (c === 5) {
                        this.onServiceCellSelect(b, d, b.enableContactColumn, b.contact_select_info, a)
                    } else {
                        if (c === 6) {
                            this.onServiceCellSelect(b, d, b.enableCalendarColumn, b.calendar_select_info, a)
                        }
                    }
                }
            }
        }
    },
    onServiceSelectAll: function(c, f, g, b) {
        var e = g.enable_count < c.searched_user_list.length;
        if (e) {
            g.enable_count = c.searched_user_list.length
        } else {
            g.enable_count = 0
        }
        for (var a = 0, d = c.searched_user_list.length; a < d; a++) {
            c.searched_user_list[a][b] = e
        }
        g.state = c.getSelectAllState(f, g)
    },
    onHeaderClick: function(b, d, a) {
        var e = a.getTarget("input", 1, true);
        if (!e) {
            return
        }
        var c = this.getEnableKey(d);
        if (d === 2) {
            this.onServiceSelectAll(b, b.enableDriveColumn, b.drive_select_info, c)
        } else {
            if (d === 3) {
                this.onServiceSelectAll(b, b.enableMailColumn, b.mail_select_info, c)
            } else {
                if (d === 4) {
                    this.onServiceSelectAll(b, b.enableArchiveMailColumn, b.archive_mail_select_info, c)
                } else {
                    if (d === 5) {
                        this.onServiceSelectAll(b, b.enableContactColumn, b.contact_select_info, c)
                    } else {
                        if (d === 6) {
                            this.onServiceSelectAll(b, b.enableCalendarColumn, b.calendar_select_info, c)
                        }
                    }
                }
            }
        }
    },
    getInitSearchedInfo: function() {
        var a = this;
        var d = function() {
            return {
                state: a.panel.checkState.SelectAll,
                enable_count: 0
            }
        };
        this.panel.drive_select_info = d();
        this.panel.mail_select_info = d();
        this.panel.archive_mail_select_info = d();
        this.panel.contact_select_info = d();
        this.panel.calendar_select_info = d();
        var b, c;
        for (b = 0, c = this.panel.searched_user_list.length; b < c; b++) {
            if (this.panel.searched_user_list[b].enable_drive) {
                this.panel.drive_select_info.enable_count++
            }
            if (this.panel.searched_user_list[b].enable_mail) {
                this.panel.mail_select_info.enable_count++
            }
            if (this.panel.searched_user_list[b].enable_archive_mail) {
                this.panel.archive_mail_select_info.enable_count++
            }
            if (this.panel.searched_user_list[b].enable_contact) {
                this.panel.contact_select_info.enable_count++
            }
            if (this.panel.searched_user_list[b].enable_calendar) {
                this.panel.calendar_select_info.enable_count++
            }
        }
    },
    loadUser: function(a) {
        this.panel.user_list = a.slice();
        this.panel.searched_user_list = a.slice();
        var c, d;
        for (c = 0, d = this.panel.user_list.length; c < d; c++) {
            var b = this.panel.user_list[c];
            b.origin_enable_drive = b.enable_drive;
            b.origin_enable_mail = b.enable_mail;
            b.origin_enable_archive_mail = b.enable_archive_mail;
            b.origin_enable_contact = b.enable_contact;
            b.origin_enable_calendar = b.enable_calendar
        }
        this.getInitSearchedInfo();
        this.panel.loadSearchedUserlist(0, this.panel.pageSize)
    },
    setData: function(a) {
        this.task_info = a;
        this.loadUser(a.user_list);
        this.task_id = a.task_id;
        this.panel.btn_refresh.setDisabled(this.task_info.task_status !== SYNO.SDS.ActiveBackupOffice365.TaskStatus.ACTIVE)
    },
    onSelectionchange: function(b) {
        this.selected_record = b.getSelected();
        var a = (this.selected_record && this.selected_record.data.is_user_repo_exist && this.task_info.task_status === SYNO.SDS.ActiveBackupOffice365.TaskStatus.ACTIVE);
        this.panel.removeStorageBtn.setDisabled(!a)
    },
    getData: function() {
        var d = {};
        var c = [];
        var e, g;
        var f = this.panel.user_list;
        var b = 0;
        for (e = 0, g = f.length; e < g; e++) {
            var a = f[e];
            if (a.enable_drive === false && a.enable_mail === false && a.enable_archive_mail === false && a.enable_contact === false && a.enable_calendar === false) {
                b++
            }
            if (a.origin_enable_drive !== a.enable_drive || a.origin_enable_mail !== a.enable_mail || a.origin_enable_archive_mail !== a.enable_archive_mail || a.origin_enable_contact !== a.enable_contact || a.origin_enable_calendar !== a.enable_calendar) {
                c.push(a)
            }
        }
        d.user_list = c;
        this.componentQuery("main_window account_management").choosedUser = f.length - b;
        return d
    },
    validate: function() {
        return true
    },
    onActivated: function() {},
    onClickRemoveStorage: function() {
        var b = function(d) {
            if (d) {
                this.loadUser(d.user_list);
                var c = this.componentQuery("main_window");
                c.fireEvent("licensedatachanged", c, d.license);
                this.onKeyUpSearch()
            }
        }.createDelegate(this);
        var a = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Model.RemoveStorage, {
            owner: this.componentQuery("main_window"),
            width: 726,
            height: 496,
            title: SYNO.SDS.ActiveBackupOffice365.String("account_info", "remove_storage_title"),
            task_id: this.task_id,
            user_id: this.selected_record.data.id,
            email: this.selected_record.data.email,
            callback: b
        });
        a.show()
    },
    onKeyUp: function(c, b, a) {
        if ((b && b.getKey() === Ext.EventObject.ENTER) || (c && c.getValue() === "")) {
            this.onKeyUpSearch()
        }
    },
    onKeyUpSearch: function() {
        var e = this.panel.searchfield.getValue();
        var d = e.toUpperCase();
        this.panel.searched_user_list = [];
        for (var b = 0, c = this.panel.user_list.length; b < c; b++) {
            var a = this.panel.user_list[b];
            if (a.email.toUpperCase().indexOf(d) !== -1) {
                this.panel.searched_user_list.push(a)
            }
        }
        this.getInitSearchedInfo();
        this.panel.loadSearchedUserlist(0, this.panel.pageSize)
    },
    onClickRefresh: function() {
        var a = this.componentQuery("main_window");
        a.setStatusBusy();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "update_user_list",
            timeout: 180000,
            params: {
                task_id: this.task_id
            },
            callback: function(e, d, c, b) {
                a.clearStatusBusy();
                if (!e) {
                    var f = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(d);
                    a.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), f);
                    return
                }
                this.loadUser(d.user_list);
                a.fireEvent("licensedatachanged", a, d.license);
                this.onKeyUpSearch()
            },
            scope: this
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Widget",
    viewport: "SYNO.SDS.ActiveBackupOffice365.View.SettingsTabPanel.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.TaskSettingsPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.RotationPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.AccountManagementPanel"],
    models: [],
    stores: [],
    new_backup_policy: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a]);
        this.ondestroy_callback = a.ondestroy_callback;
        this.task_id = a.task_id
    },
    init: function() {
        this.control({
            main_window: {
                destroy: this.onDestroy,
                beforeshow: this.onBeforeshow
            },
            "main_window apply_button": {
                click: this.onApply
            },
            "main_window cancel_button": {
                click: this.onCancel
            }
        })
    },
    onDestroy: function() {
        this.ondestroy_callback(this.new_backup_policy)
    },
    setStatusError: function(b, a) {
        b = b || {};
        Ext.applyIf(b, {
            text: _T("common", "error_system"),
            iconCls: this.owner.isV5Style() ? "syno-ux-statusbar-error" : "x-status-error"
        });
        a.setStatus(b)
    },
    setStatusOK: function(b, a) {
        b = b || {};
        Ext.applyIf(b, {
            text: _T("common", "setting_applied"),
            iconCls: this.owner.isV5Style() ? "syno-ux-statusbar-success" : "x-status-valid"
        });
        a.setStatus(b)
    },
    onApply: function() {
        var b = this.getData();
        if (!this.validate()) {
            return
        }
        var c = this.isUserListDirty(b);
        if (this.isDirty(b, this.task_info) || c) {
            var a = "";
            if (c || b.backup_policy !== this.task_info.backup_policy) {
                a = SYNO.SDS.ActiveBackupOffice365.String("warning", "backup_list_confirm_info")
            } else {
                a = SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_modification")
            }
            this.componentQuery("main_window").getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), a, function(d) {
                if ("yes" === d) {
                    b.is_backup_list_changed = c;
                    this.doCommit(b)
                }
            }, this)
        } else {
            this.getViewport().close()
        }
    },
    validate: function() {
        var d = this.componentQuery("main_window").getFooterToolbar();
        var c = this.app().getController("TaskSettingsPanel").validate();
        if (!c) {
            this.componentQuery("main_window settings_tab").setActiveTab("task_settings");
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            }, d);
            return false
        }
        var b = this.app().getController("RotationPanel").validate();
        if (!b) {
            this.componentQuery("main_window settings_tab").setActiveTab("rotation");
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            }, d);
            return false
        }
        var a = this.app().getController("AccountManagementPanel").validate();
        if (!a) {
            this.componentQuery("main_window settings_tab").setActiveTab("account_management");
            this.setStatusError({
                text: _T("common", "forminvalid"),
                clear: true
            }, d);
            return false
        }
        if (this.componentQuery("main_window settings_tab account_management").choosedUser === 0) {
            this.componentQuery("main_window settings_tab").setActiveTab("account_management");
            this.setStatusError({
                text: SYNO.SDS.ActiveBackupOffice365.String("warning", "no_backup_target"),
                clear: true
            }, d);
            return false
        }
        return true
    },
    getData: function(d) {
        var c = {
            task_id: this.task_info.task_id
        };
        var e = this.app().getController("TaskSettingsPanel").getData();
        var b = this.app().getController("RotationPanel").getData();
        var a = this.app().getController("AccountManagementPanel").getData();
        Ext.apply(c, e);
        Ext.apply(c, a);
        Ext.apply(c, b);
        return c
    },
    doCommit: function(a) {
        this.setTaskSetting(a)
    },
    setTaskSetting: function(a) {
        this.getViewport().setStatusBusy({
            text: SYNO.SDS.ActiveBackupOffice365.String("loading", "saving_settings")
        });
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "set_task_setting",
            params: {
                task_info: a
            },
            callback: function(e, d, c, b) {
                this.getViewport().clearStatusBusy();
                if (!e) {
                    var f = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(d);
                    this.componentQuery("main_window").getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("common", "error"), f);
                    return
                }
                this.new_backup_policy = a.backup_policy;
                this.getViewport().close()
            },
            scope: this
        })
    },
    isDirty: function(b, d) {
        var a = false;
        for (var c in b) {
            if (b.hasOwnProperty(c) && d[c] !== b[c]) {
                if (c === "schedule" || c === "user_list") {
                    continue
                }
                a = true;
                return a
            }
        }
        if (this.isScheduleDirty(b.schedule, d.schedule)) {
            a = true;
            return a
        }
        return a
    },
    isScheduleDirty: function(c, d) {
        var a = false;
        for (var b in c) {
            if (c.hasOwnProperty(b) && c[b] !== d[b]) {
                a = true;
                return a
            }
        }
        return a
    },
    isUserListDirty: function(a) {
        if (a.user_list.length === 0) {
            return false
        }
        return true
    },
    onCancel: function() {
        var a = this.getData();
        if (this.isDirty(a, this.task_info) || this.isUserListDirty(a)) {
            this.componentQuery("main_window").getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_modification_and_leave"), function(b) {
                if ("yes" === b) {
                    this.getViewport().close()
                }
            }, this)
        } else {
            this.getViewport().close()
        }
    },
    onBeforeshow: function() {
        if (this.task_info.task_status === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_TASK_WILL_BE_DELETED) {
            this.componentQuery("main_window settings_tab account_management").setDisabled(true);
            this.componentQuery("main_window settings_tab rotation").setDisabled(true);
            this.componentQuery("main_window apply_button").setDisabled(true)
        }
        this.app().getController("AccountManagementPanel").setData(this.task_info);
        this.app().getController("TaskSettingsPanel").setData(this.task_info);
        this.app().getController("RotationPanel").setData(this.task_info)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.ServiceStatusMenu", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            width: 360,
            floating: true,
            cls: "syno-activebackupoffice365-service-status-menu",
            bodyStyle: "padding: 0px 18px 10px;",
            id: this.menu_id = Ext.id(),
            autoFlexcroll: false,
            html: '<div class="wrapper"><div class="header" id="' + this.menu_id + '.email">-</div><div class="item-wrapper"><div class="label">' + SYNO.SDS.ActiveBackupOffice365.String("common", "drive") + '</div><div class="value" id="' + this.menu_id + '.drive">-</div></div><div class="item-wrapper"><div class="label">' + SYNO.SDS.ActiveBackupOffice365.String("common", "mail") + '</div><div class="value" id="' + this.menu_id + '.mail">-</div></div><div class="item-wrapper"><div class="label">' + SYNO.SDS.ActiveBackupOffice365.String("common", "archive_mail") + '</div><div class="value" id="' + this.menu_id + '.archive_mail">-</div></div><div class="item-wrapper"><div class="label">' + SYNO.SDS.ActiveBackupOffice365.String("common", "contact") + '</div><div class="value" id="' + this.menu_id + '.contact">-</div></div><div class="item-wrapper"><div class="label">' + SYNO.SDS.ActiveBackupOffice365.String("common", "calendar") + '</div><div class="value" id="' + this.menu_id + '.calendar">-</div></div></div>'
        };
        return Ext.apply(a, b)
    },
    setData: function(a) {
        Ext.get(this.menu_id + ".email").update(a.email);
        var b = function(g, c, d, h) {
            g.un("click", this.fireClickStatus, this);
            var f = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(c);
            var e = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(c);
            if (c !== SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR && c !== SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING && c !== SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.OK) {
                g.update(SYNO.SDS.ActiveBackupOffice365.String("common", "not_enable_service"));
                return
            }
            g.update('<span style="color:' + e + '; cursor: pointer; text-decoration: underline;">' + f + "</span>");
            this.mon(g, "click", this.fireClickStatus, this, {
                email: a.email,
                service_type: h
            })
        }.createDelegate(this);
        b(Ext.get(this.menu_id + ".drive"), a.drive_status, a.drive_error_code, SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE);
        b(Ext.get(this.menu_id + ".mail"), a.mail_status, a.mail_error_code, SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL);
        b(Ext.get(this.menu_id + ".archive_mail"), a.archive_mail_status, a.archive_mail_error_code, SYNO.SDS.ActiveBackupOffice365.ServiceType.ARCHIVE_MAIL);
        b(Ext.get(this.menu_id + ".contact"), a.contact_status, a.contact_error_code, SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT);
        b(Ext.get(this.menu_id + ".calendar"), a.calendar_status, a.calendar_error_code, SYNO.SDS.ActiveBackupOffice365.ServiceType.CALENDAR)
    },
    fireClickStatus: function(b, a, c) {
        this.fireEvent("click_status", c)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.UserStatusPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.task_execution_id = a.task_execution_id;
        this.baseParams = {
            task_id: this.task_id,
            task_execution_id: this.task_execution_id,
            offset: 0,
            limit: this.pageSize
        };
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        this.serviceStatusMenu = new SYNO.SDS.ActiveBackupOffice365.Model.ServiceStatusMenu({
            renderTo: Ext.getBody(),
            shadow: true,
            hidden: true,
            owner: this
        });
        var d = this.createStore(c);
        this.last_backup_label = new Ext.BoxComponent({
            cls: "last_backup_label_wrapper",
            html: '<div class="note">' + SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "newest_backup") + '</div><div class="icon"></div>'
        });
        this.searchfield = new SYNO.ux.TextFilter({
            iconStyle: "filter",
            itemId: "filter",
            emptyText: _JSLIBSTR("uicommon", "search"),
            enableKeyEvents: true
        });
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            cls: "tool-bar",
            items: ["->", (c.log_detail_panel === true) ? "" : this.last_backup_label, this.searchfield]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            tbar: b,
            cls: "user_status",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e,
            viewConfig: {
                getRowClass: function(f, g, h) {
                    h.tstyle += "padding: 3px 0;"
                }
            }
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var e = (c.log_detail_panel === true) ? {
            header: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "duration"),
            dataIndex: "duration",
            id: "duration",
            width: 250,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.convertTimeFormat
        } : {
            header: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time"),
            dataIndex: "last_execution_time",
            id: "last_execution_time",
            width: 250,
            renderer: (function(n, j, f, h, l, g) {
                var k = f.data.last_execution_time;
                var m = SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(k);
                return m
            }).createDelegate(this)
        };
        var d = (c.log_detail_panel === true) ? {
            header: SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size"),
            dataIndex: "transfered_amount",
            id: "transfered_amount",
            width: 150,
            renderer: (function(h, l, k, o, f, n) {
                var j = k.data;
                var g = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(j.transfered_amount);
                var m = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(j.transfered_amount);
                return g + " " + m
            }).createDelegate(this)
        } : {
            header: SYNO.SDS.ActiveBackupOffice365.String("histogram", "space_usage"),
            dataIndex: "used_storage",
            id: "used_storage",
            width: 150,
            renderer: (function(g, l, j, o, f, n) {
                var h = j.data;
                var k = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(h.used_storage);
                var m = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(h.used_storage);
                return k + " " + m
            }).createDelegate(this)
        };
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "email"),
            dataIndex: "email",
            width: 350,
            id: "email",
            renderer: (function(n, k, f, j, l, g) {
                var h = Ext.util.Format.htmlEncode(f.data.email);
                var m = Ext.util.Format.htmlEncode(h);
                if (f.data.is_latest_job === true) {
                    h = '<div class="last_backup_icon"></div><div class="email" ext:qtip="' + m + '">' + h + "</div>"
                } else {
                    h = '<div class="email_only" ext:qtip="' + m + '">' + h + "</div>"
                }
                return h
            }).createDelegate(this)
        }, e, d, {
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "status"),
            dataIndex: "status",
            id: "status",
            width: 200,
            renderer: (function(n, k, f, h, l, g) {
                if (f.data.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.NOT_BACKUP_YET) {
                    return "-"
                }
                var j = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(f.data.status);
                var m = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(f.data.status);
                return '<span class= "service_status_link" style="color:' + j + '">' + m + "</span>"
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: true,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "list_local_user",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["id", "task_execution_id", "is_latest_job", "email", "user_name", "remote_status", "status", "drive_status", "mail_status", "archive_mail_status", "contact_status", "calendar_status", "drive_error_code", "mail_error_code", "archive_mail_error_code", "contact_error_code", "calendar_error_code", "last_execution_time", "duration", "used_storage", "transfered_amount", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "user_list",
            baseParams: this.baseParams,
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.FileLogPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.task_execution_id = a.task_execution_id;
        this.baseParams = {
            task_id: this.task_id,
            task_execution_id: this.task_execution_id,
            offset: 0,
            limit: this.pageSize
        };
        if (this.task_execution_id === undefined) {
            this.baseParams.task_type = SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP
        }
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: false,
            enableStatusType: true,
            enableTaskType: false,
            enableEventType: true,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: (c.hide_tb === true) ? null : b,
            cls: "file_log",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var a = {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "source"),
            dataIndex: "source",
            id: "source",
            width: 100,
            renderer: (function(s, p, m, o, r, n) {
                var q = Ext.util.Format.htmlEncode(m.data.source);
                p.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(q) + '"';
                return q
            }).createDelegate(this)
        };
        var j = {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "destination"),
            dataIndex: "destination",
            id: "destination",
            width: 100,
            renderer: (function(s, q, n, p, r, o) {
                var m = Ext.util.Format.htmlEncode(n.data.destination);
                q.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(m) + '"';
                return m
            }).createDelegate(this)
        };
        var l = {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "user_account"),
            dataIndex: "user_account",
            id: "user_account",
            width: 100,
            renderer: (function(s, q, m, o, r, n) {
                var p = Ext.util.Format.htmlEncode(m.data.user_account);
                q.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(p) + '"';
                return p
            }).createDelegate(this)
        };
        var h = {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_name"),
            dataIndex: "file_name",
            id: "file_name",
            width: 300,
            renderer: (function(s, q, m, p, r, n) {
                var o = Ext.util.Format.htmlEncode(m.data.file_path);
                q.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(o) + '"';
                return Ext.util.Format.htmlEncode(m.data.file_name)
            }).createDelegate(this)
        };
        var d = {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "data"),
            dataIndex: "file_type",
            id: "file_type",
            width: 100,
            renderer: (function(t, p, m, o, r, n) {
                var q = m.data;
                var s = SYNO.SDS.ActiveBackupOffice365.Utils.getDataTypeString(q.file_type, q.event_type);
                return s
            }).createDelegate(this)
        };
        var g = {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_size"),
            dataIndex: "file_size",
            id: "file_size",
            width: 100,
            renderer: (function(n, q, p, t, m, s) {
                var o = p.data;
                if (o.file_type === SYNO.SDS.ActiveBackupOffice365.FileType.FOLDER || o.event_type === SYNO.SDS.ActiveBackupOffice365.DataType.FILE_REMOVE) {
                    return ""
                }
                var u = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(o.file_size);
                var r = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(o.file_size);
                return u + " " + r
            }).createDelegate(this)
        };
        var f = {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        };
        var e = {
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "status"),
            dataIndex: "status",
            width: 100,
            sortable: false,
            id: "type",
            renderer: (function(n, t, r, v, m, u) {
                var q = r.data.status;
                var p = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(q);
                var s = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(q);
                var o = r.data.error_code;
                if (o !== 0) {
                    t.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(SYNO.SDS.ActiveBackupOffice365.GetErrorString(o)) + '"'
                }
                return '<span style="color:' + p + '">' + s + "</span>"
            }).createDelegate(this)
        };
        var b = [];
        if (c.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.RESTORE) {
            b.push(a);
            b.push(j)
        } else {
            b.push(l)
        }
        b.push(h);
        b.push(d);
        b.push(g);
        b.push(f);
        b.push(e);
        var k = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return k
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_file_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "status", "task_type", "event_type", "user_account", "source", "destination", "email", "description", "file_name", "file_path", "file_size", "file_type", "timestamp", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "file_logs",
            baseParams: this.baseParams,
            appWindow: this,
            listeners: {
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.MailLogPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.task_execution_id = a.task_execution_id;
        this.baseParams = {
            task_id: this.task_id,
            task_execution_id: this.task_execution_id,
            offset: 0,
            limit: this.pageSize
        };
        if (this.task_execution_id === undefined) {
            this.baseParams.task_type = SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP
        }
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: true,
            enableStatusType: false,
            enableTaskType: false,
            enableEventType: false,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: (c.hide_tb === true) ? null : b,
            cls: "mail_log",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_type"),
            dataIndex: "log_type",
            width: 100,
            sortable: false,
            id: "type",
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.INFO_TYPE) {
                    var k = SYNO.SDS.ActiveBackupOffice365.String("log", "info_type");
                    k = '<span style="color:green">' + k + "</span>"
                } else {
                    if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.ERROR_TYPE) {
                        k = SYNO.SDS.ActiveBackupOffice365.String("log", "error_type");
                        k = '<span style="color:red">' + k + "</span>"
                    } else {
                        if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.WARNING_TYPE) {
                            k = SYNO.SDS.ActiveBackupOffice365.String("log", "warning_type");
                            k = '<span style="color:orange">' + k + "</span>"
                        }
                    }
                }
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_description"),
            dataIndex: "description",
            width: 600,
            id: "description",
            sortable: false,
            renderer: (function(k, g, d, f, h, e) {
                var j = Ext.util.Format.htmlEncode(d.data.description);
                g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"';
                return j
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_mail_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "log_type", "timestamp", "description", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "logs",
            baseParams: this.baseParams,
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.ContactLogPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.task_execution_id = a.task_execution_id;
        this.baseParams = {
            task_id: this.task_id,
            task_execution_id: this.task_execution_id,
            offset: 0,
            limit: this.pageSize
        };
        if (this.task_execution_id === undefined) {
            this.baseParams.task_type = SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP
        }
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: true,
            enableStatusType: false,
            enableTaskType: false,
            enableEventType: false,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: (c.hide_tb === true) ? null : b,
            cls: "contact_log",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_type"),
            dataIndex: "log_type",
            width: 100,
            sortable: false,
            id: "type",
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.INFO_TYPE) {
                    var k = SYNO.SDS.ActiveBackupOffice365.String("log", "info_type");
                    k = '<span style="color:green">' + k + "</span>"
                } else {
                    if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.ERROR_TYPE) {
                        k = SYNO.SDS.ActiveBackupOffice365.String("log", "error_type");
                        k = '<span style="color:red">' + k + "</span>"
                    } else {
                        if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.WARNING_TYPE) {
                            k = SYNO.SDS.ActiveBackupOffice365.String("log", "warning_type");
                            k = '<span style="color:orange">' + k + "</span>"
                        }
                    }
                }
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_description"),
            dataIndex: "description",
            width: 600,
            id: "description",
            sortable: false,
            renderer: (function(k, g, d, f, h, e) {
                var j = Ext.util.Format.htmlEncode(d.data.description);
                g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"';
                return j
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_contact_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "log_type", "timestamp", "description", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "logs",
            baseParams: this.baseParams,
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.CalendarLogPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.task_execution_id = a.task_execution_id;
        this.baseParams = {
            task_id: this.task_id,
            task_execution_id: this.task_execution_id,
            offset: 0,
            limit: this.pageSize
        };
        if (this.task_execution_id === undefined) {
            this.baseParams.task_type = SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP
        }
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: true,
            enableStatusType: false,
            enableTaskType: false,
            enableEventType: false,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: (c.hide_tb === true) ? null : b,
            cls: "calendar_log",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_type"),
            dataIndex: "log_type",
            width: 100,
            sortable: false,
            id: "type",
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.INFO_TYPE) {
                    var k = SYNO.SDS.ActiveBackupOffice365.String("log", "info_type");
                    k = '<span style="color:green">' + k + "</span>"
                } else {
                    if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.ERROR_TYPE) {
                        k = SYNO.SDS.ActiveBackupOffice365.String("log", "error_type");
                        k = '<span style="color:red">' + k + "</span>"
                    } else {
                        if (h.log_type == SYNO.SDS.ActiveBackupOffice365.LogType.WARNING_TYPE) {
                            k = SYNO.SDS.ActiveBackupOffice365.String("log", "warning_type");
                            k = '<span style="color:orange">' + k + "</span>"
                        }
                    }
                }
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_description"),
            dataIndex: "description",
            width: 600,
            id: "description",
            sortable: false,
            renderer: (function(k, g, d, f, h, e) {
                var j = Ext.util.Format.htmlEncode(d.data.description);
                g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(j) + '"';
                return j
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_calendar_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "log_type", "timestamp", "description", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "logs",
            baseParams: this.baseParams,
            appWindow: this,
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.MainWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.task_id = a.task_id
    },
    fillConfig: function(b) {
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-service_detail_window",
            closable: true,
            title: b.window_title,
            maximizable: true,
            resizable: true,
            minWidth: b.width,
            minHeight: b.height,
            padding: "0 20px",
            border: true,
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                itemId: "service_detail_window",
                activeTab: 0,
                cls: "tabpanel",
                deferredRender: false,
                items: this.getTabs(b)
            }]
        };
        return Ext.apply(a, b)
    },
    getTabs: function(a) {
        this.panel_user_status = new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.UserStatusPanel({
            itemId: "user_status",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "user"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height
        });
        this.panel_file_log = new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.FileLogPanel({
            itemId: "file_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "file_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height
        });
        this.panel_mail_log = new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.MailLogPanel({
            itemId: "mail_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "mail_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height
        });
        this.panel_contact_log = new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.ContactLogPanel({
            itemId: "contact_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "contact_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height
        });
        this.panel_calendar_log = new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.CalendarLogPanel({
            itemId: "calendar_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "calendar_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height
        });
        return [this.panel_user_status, this.panel_file_log, this.panel_mail_log, this.panel_contact_log, this.panel_calendar_log]
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.UserStatusPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    isServiceStatusMenuOpen: false,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window service_detail_window user_status": {
                activate: this.onActivated
            }
        });
        this.panel = this.componentQuery("main_window user_status");
        this.data_store = this.panel.getStore();
        this.data_store.load();
        this.serviceStatusMenu = this.panel.serviceStatusMenu;
        this.serviceStatusMenu.addListener("click_status", Ext.createDelegate(this.onClickStatus, this));
        this.panel.searchfield.addListener("keyup", Ext.createDelegate(this.onKeyUp, this));
        this.panel.searchfield.trigger.addListener("click", Ext.createDelegate(this.onSearch, this));
        this.panel.addListener("rowclick", this.onRowClick, this);
        this.mon(Ext.getDoc(), "mousedown", this.onMouseDown, this)
    },
    onClickStatus: function(c) {
        var b = function(d) {
            return d.split("@")[0]
        };
        var a = b(c.email);
        switch (c.service_type) {
            case SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE:
                this.application.getController("FileLogPanel").findField.setValue(a);
                this.application.getController("FileLogPanel").searchPanel.setKeyWord(a);
                this.application.getController("FileLogPanel").searchPanel.onSearch();
                this.componentQuery("main_window service_detail_window").setActiveTab("file_log");
                break;
            case SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL:
            case SYNO.SDS.ActiveBackupOffice365.ServiceType.ARCHIVE_MAIL:
                this.application.getController("MailLogPanel").findField.setValue(a);
                this.application.getController("MailLogPanel").searchPanel.setKeyWord(a);
                this.application.getController("MailLogPanel").searchPanel.onSearch();
                this.componentQuery("main_window service_detail_window").setActiveTab("mail_log");
                break;
            case SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT:
                this.application.getController("ContactLogPanel").findField.setValue(a);
                this.application.getController("ContactLogPanel").searchPanel.setKeyWord(a);
                this.application.getController("ContactLogPanel").searchPanel.onSearch();
                this.componentQuery("main_window service_detail_window").setActiveTab("contact_log");
                break;
            case SYNO.SDS.ActiveBackupOffice365.ServiceType.CALENDAR:
                this.application.getController("CalendarLogPanel").findField.setValue(a);
                this.application.getController("CalendarLogPanel").searchPanel.setKeyWord(a);
                this.application.getController("CalendarLogPanel").searchPanel.onSearch();
                this.componentQuery("main_window service_detail_window").setActiveTab("calendar_log");
                break
        }
        this.serviceStatusMenu.hide();
        this.isServiceStatusMenuOpen = false
    },
    setData: function(a, b) {
        if (a) {
            this.task_id = a
        }
        if (b) {
            this.task_execution_id = b
        }
    },
    getData: function() {},
    onRowClick: function(a, d, c) {
        this.selected_data = this.data_store.getAt(d).data;
        var b = Ext.fly(c.getTarget());
        if (b && (b.hasClass("service_status_link"))) {
            this.openServiceStatusMenu(b)
        }
    },
    openServiceStatusMenu: function(a) {
        if (this.isServiceStatusMenuOpen) {
            this.serviceStatusMenu.hide();
            this.isServiceStatusMenuOpen = false;
            return
        }
        this.serviceStatusMenu.setData(this.selected_data);
        this.serviceStatusMenu.getEl().alignTo(a, "tl-br?", [-210, 12]);
        this.serviceStatusMenu.show();
        this.isServiceStatusMenuOpen = true
    },
    onMouseDown: function(b) {
        var a = this.serviceStatusMenu;
        if (a && a.isVisible() && !a.isDestroyed && !a.inEl && !b.within(a.getEl())) {
            a.hide();
            this.isServiceStatusMenuOpen = false
        }
    },
    onActivated: function() {},
    onKeyUp: function(c, b, a) {
        if (b && b.getKey() === Ext.EventObject.ENTER) {
            this.onSearch()
        }
    },
    onSearch: function() {
        var a = {
            key_word: this.panel.searchfield.getValue()
        };
        this.data_store.baseParams = Ext.apply({}, a, this.panel.baseParams);
        this.data_store.load()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.FileLogPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    isSearchPanelOpen: false,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window service_detail_window file_log": {
                activate: this.onActivated,
                rowclick: this.onRowClick,
                rowdblclick: this.onRowDoubleClick
            }
        });
        this.log_panel = this.componentQuery("main_window service_detail_window file_log");
        this.data_store = this.log_panel.getStore();
        this.loadStore();
        this.findField = this.componentQuery("main_window service_detail_window file_log").findField;
        this.searchPanel = this.componentQuery("main_window service_detail_window file_log").searchPanel;
        this.mon(this.searchPanel, "search", this.onSearch, this)
    },
    setData: function(a) {},
    getData: function() {},
    onSearch: function(a, b) {
        this.data_store.baseParams = Ext.apply({}, b, this.log_panel.baseParams);
        this.loadStore()
    },
    onActivated: function() {},
    loadStore: function() {
        this.data_store.load()
    },
    onRowClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    },
    onRowDoubleClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.MailLogPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    isSearchPanelOpen: false,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window service_detail_window mail_log": {
                activate: this.onActivated,
                rowclick: this.onRowClick,
                rowdblclick: this.onRowDoubleClick
            }
        });
        this.log_panel = this.componentQuery("main_window service_detail_window mail_log");
        this.data_store = this.log_panel.getStore();
        this.loadStore();
        this.findField = this.componentQuery("main_window service_detail_window mail_log").findField;
        this.searchPanel = this.componentQuery("main_window service_detail_window mail_log").searchPanel;
        this.mon(this.searchPanel, "search", this.onSearch, this)
    },
    setData: function(a) {},
    getData: function() {},
    onSearch: function(a, b) {
        this.data_store.baseParams = Ext.apply({}, b, this.log_panel.baseParams);
        this.loadStore()
    },
    onActivated: function() {},
    loadStore: function() {
        this.data_store.load()
    },
    onRowClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    },
    onRowDoubleClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.ContactLogPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    isSearchPanelOpen: false,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window service_detail_window contact_log": {
                activate: this.onActivated,
                rowclick: this.onRowClick,
                rowdblclick: this.onRowDoubleClick
            }
        });
        this.log_panel = this.componentQuery("main_window service_detail_window contact_log");
        this.data_store = this.log_panel.getStore();
        this.loadStore();
        this.findField = this.componentQuery("main_window service_detail_window contact_log").findField;
        this.searchPanel = this.componentQuery("main_window service_detail_window contact_log").searchPanel;
        this.mon(this.searchPanel, "search", this.onSearch, this)
    },
    setData: function(a) {},
    getData: function() {},
    onSearch: function(a, b) {
        this.data_store.baseParams = Ext.apply({}, b, this.log_panel.baseParams);
        this.loadStore()
    },
    onActivated: function() {},
    loadStore: function() {
        this.data_store.load()
    },
    onRowClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    },
    onRowDoubleClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.CalendarLogPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    isSearchPanelOpen: false,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window service_detail_window calendar_log": {
                activate: this.onActivated,
                rowclick: this.onRowClick,
                rowdblclick: this.onRowDoubleClick
            }
        });
        this.log_panel = this.componentQuery("main_window service_detail_window calendar_log");
        this.data_store = this.log_panel.getStore();
        this.loadStore();
        this.findField = this.componentQuery("main_window service_detail_window calendar_log").findField;
        this.searchPanel = this.componentQuery("main_window service_detail_window calendar_log").searchPanel;
        this.mon(this.searchPanel, "search", this.onSearch, this)
    },
    setData: function(a) {},
    getData: function() {},
    onSearch: function(a, b) {
        this.data_store.baseParams = Ext.apply({}, b, this.log_panel.baseParams);
        this.loadStore()
    },
    onActivated: function() {},
    loadStore: function() {
        this.data_store.load()
    },
    onRowClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    },
    onRowDoubleClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Widget",
    viewport: "SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.UserStatusPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.FileLogPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.MailLogPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.ContactLogPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.CalendarLogPanel"],
    models: [],
    stores: [],
    constructor: function(a) {
        this.callParent([a]);
        this.ondestroy_callback = a.ondestroy_callback;
        this.task_id = a.task_id;
        this.restore_tasks = []
    },
    init: function() {
        this.control({
            main_window: {
                destroy: this.onDestroy,
                beforeshow: this.onBeforeshow
            }
        })
    },
    onDestroy: function() {
        this.ondestroy_callback()
    },
    onBeforeshow: function() {
        this.app().getController("UserStatusPanel").setData(this.task_id)
    },
    setActiveTab: function(a) {
        this.componentQuery("main_window detail_info_window").setActiveTab(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    backup_history: [],
    tasks: [],
    detail_window: null,
    restore_window: null,
    color_task_id_pair: null,
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.activationCheck()
    },
    activationCheck: function() {
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "get_activation",
            scope: this,
            callback: function(d, c, b, a) {
                if (!d) {
                    var e = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(c));
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), e, function() {
                        this.owner.close()
                    }, this);
                    return
                }
                if (!c.activated) {
                    this.activationWindow = new SYNO.SDS.ActiveBackupOffice365.View.ActivationWindow({
                        owner: this.owner,
                        requestId: c.serial_number,
                        title: SYNO.SDS.ActiveBackupOffice365.String("package", "activation_title"),
                        description: SYNO.SDS.ActiveBackupOffice365.String("package", "activation_desc"),
                        packageName: "activebackupforoffice365",
                        cgiPath: "webman/3rdparty/ActiveBackup-Office365/activebackupoffice365-cgi.cgi",
                        scope: this,
                        callback: this.onActivated
                    });
                    this.activationWindow.open()
                } else {
                    this.loadInitOverviewData()
                }
            }
        })
    },
    onActivated: function(a, b) {
        if (!Ext.isEmpty(a.error)) {
            this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.String("error", "unknow"));
            return
        }
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "set_activation",
            scope: this,
            params: {
                serial_number: b
            },
            callback: function(f, e, d, c) {
                if (!f) {
                    var g = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(e));
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), g);
                    return
                } else {
                    this.activationWindow.close();
                    this.loadInitOverviewData()
                }
            }
        })
    },
    onDestroy: function() {
        this.stopConnPollTask()
    },
    stopConnPollTask: function() {
        if (this.connPollId) {
            this.pollUnreg(this.connPollId);
            this.connPollId = null
        }
    },
    startConnPollTask: function(a) {
        if (this.connPollId) {
            return
        }
        var b = function(l, f, g, c) {
            if (!l) {
                return
            }
            this.owner.clearStatusBusy();
            var h = f.tasks;
            var d = f.users;
            var e = f.service_usage;
            var k = f.event_log;
            if (this.isDirty(h, this.tasks, "task_id")) {
                this.application.getStore("OverViewTasksStatistics").loadData(h);
                this.setTaskListPanels(h);
                var j = this.isTaskNameDirty(h, this.tasks);
                this.loadHistogramData(j);
                this.tasks = h
            }
            if (this.isDirty(d, this.users, "unique_id")) {
                this.application.getStore("OverViewUsersStatistics").loadData(d);
                this.users = d
            }
            if (this.isDirty(e, this.service_usage, "service_type")) {
                this.application.getStore("OverViewServiceUsage").loadData(e);
                this.service_usage = e
            }
            if (this.isTaskLogDirty(k, this.event_log)) {
                this.event_log = k;
                this.application.getController("LastEventLog").loadData(k)
            }
        };
        this.connPollId = this.pollReg({
            immediate: a,
            interval: 4,
            webapi: {
                api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
                method: "list_tasks",
                version: 1
            },
            status_callback: b,
            scope: this
        })
    },
    createWizard: function() {
        this.stopConnPollTask();
        var a = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Controller.CreateWizard.MainWindow, {
            owner: this.owner,
            ondestroy_callback: this.createWizardCallback.createDelegate(this),
            width: 722,
            height: 526
        });
        a.getViewport().open()
    },
    createWizardCallback: function(a) {
        if (a.task_id) {
            this.owner.setStatusBusy()
        }
        this.startConnPollTask(true)
    },
    SettingsWindow: function(a) {
        this.stopConnPollTask();
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "get_task_setting",
            params: {
                task_id: a
            },
            callback: function(f, e, d, b) {
                this.owner.clearStatusBusy();
                if (!f) {
                    var g = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(e));
                    if (SYNO.API.Util.GetFirstError(e).code === SYNO.SDS.ActiveBackupOffice365.WebapiCode.WEBAPI_BM_ERR_LOCAL_BKPFOLDER_NOT_FOUND) {
                        g = g + "(" + SYNO.API.Util.GetFirstError(e).errors.not_found_path + ")"
                    }
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), g);
                    return
                }
                var c = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Controller.SettingsTabPanel.MainWindow, {
                    owner: this.owner,
                    ondestroy_callback: this.settingsWindowCallback.createDelegate(this),
                    task_id: a,
                    width: 900,
                    height: 560,
                    window_title: SYNO.SDS.ActiveBackupOffice365.String("common", "edit"),
                    task_info: e.task_info
                });
                c.getViewport().open()
            },
            scope: this
        })
    },
    settingsWindowCallback: function(a) {
        this.startConnPollTask(true)
    },
    DetailInfoWindow: function(a) {
        this.detail_tabpanel = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.MainWindow, {
            owner: this.owner,
            ondestroy_callback: this.detailInfoWindowCallback.createDelegate(this),
            task_id: a.task_id,
            width: 980,
            height: 560,
            title: SYNO.SDS.ActiveBackupOffice365.String("common", "detail") + ": " + a.task_name
        });
        this.detail_tabpanel.getViewport().open()
    },
    detailInfoWindowCallback: function() {
        this.detail_tabpanel = null
    },
    loadInitOverviewData: function() {
        var c = [];
        this.owner.setStatusBusy();
        var b = Math.round(new Date().getTime() / 1000);
        var a = b - 45 * 60 * 60 * 24;
        this.sendWebAPI({
            compound: {
                stopwhenerror: true,
                params: [{
                    api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
                    version: 1,
                    method: "list_tasks"
                }, {
                    api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
                    version: 1,
                    method: "list_task_logs",
                    params: {
                        job_type: SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP,
                        start_run_time: a,
                        end_run_time: b,
                        transfered_size_from: 0,
                        offset: 0,
                        limit: 10000
                    }
                }]
            },
            callback: function(p, h, j, d) {
                this.owner.clearStatusBusy();
                if (h.has_fail) {
                    var o = SYNO.API.Util.GetFirstError(h);
                    var e = function() {
                        this.owner.close()
                    };
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(o), e, this);
                    return
                }
                var k = SYNO.API.Util.GetValByAPI(h, "SYNO.ActiveBackupOffice365", "list_tasks");
                var l = k.tasks;
                var f = k.users;
                var g = k.service_usage;
                var n = k.event_log;
                var m = SYNO.API.Util.GetValByAPI(h, "SYNO.ActiveBackupOffice365", "list_task_logs");
                var q = m.task_logs;
                this.tasks = l;
                this.users = f;
                this.service_usage = g;
                this.event_log = n;
                this.application.getStore("OverViewTasksStatistics").loadData(l);
                this.application.getStore("OverViewUsersStatistics").loadData(f);
                this.application.getStore("OverViewServiceUsage").loadData(g);
                this.application.getController("LastEventLog").loadData(n);
                this.setTaskListPanels(l);
                this.task_logs = q;
                this.application.getStore("OverViewTrendUsage").loadData(q);
                this.startConnPollTask(true);
                if (l.length === 0 && n.length === 0) {
                    this.owner.selectPage("SYNO.SDS.ActiveBackupOffice365.View.TaskListPanel");
                    this.createWizard()
                }
            },
            scope: this
        })
    },
    loadHistogramData: function(c) {
        var b = Math.round(new Date().getTime() / 1000);
        var a = b - 45 * 60 * 60 * 24;
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "list_task_logs",
            params: {
                job_type: SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP,
                start_run_time: a,
                end_run_time: b,
                transfered_size_from: 0,
                offset: 0,
                limit: 10000
            },
            callback: function(h, g, f, d) {
                if (!h) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(g))
                }
                var e = g.task_logs;
                if (c || this.isTaskLogDirty(e, this.task_logs)) {
                    this.task_logs = e;
                    this.application.getStore("OverViewTrendUsage").loadData(e)
                }
            },
            scope: this
        })
    },
    isTaskNameDirty: function(b, c) {
        var a = false;
        Ext.each(c, function(d) {
            Ext.each(b, function(e) {
                if (d.task_id === e.task_id && d.task_name !== e.task_name) {
                    a = true;
                    return false
                }
            });
            if (a) {
                return false
            }
        });
        return a
    },
    isTaskLogDirty: function(b, a) {
        if (b.length !== a.length) {
            return true
        }
        var d = 0;
        var c = 0;
        if (b.length > 0) {
            d = b[0].last_execution_time
        }
        if (a.length > 0) {
            c = a[0].last_execution_time
        }
        if (d !== c) {
            return true
        }
        return false
    },
    isDirty: function(b, d, c) {
        if (b.length === 0) {
            return true
        }
        if (b.length !== d.length) {
            return true
        }
        var a = false;
        Ext.each(b, function(f) {
            var e = false;
            Ext.each(d, function(h) {
                if (f[c] === h[c]) {
                    e = true;
                    for (var g in f) {
                        if (JSON.stringify(f[g]) !== JSON.stringify(h[g])) {
                            a = true;
                            return false
                        }
                    }
                }
            }, this);
            if (a) {
                return false
            }
            if (!e) {
                a = true;
                return false
            }
        }, this);
        return a
    },
    setTaskListPanels: function(f) {
        if (!f) {
            f = this.tasks
        }
        Ext.each(f, function(g) {
            Ext.each(this.tasks, function(h) {
                if (g.task_id === h.task_id) {
                    g.is_deleting = h.is_deleting
                }
            }, this)
        }, this);
        var b = [];
        Ext.each(f, function(g) {
            if (!g.is_deleting) {
                b.push(g)
            }
        }, this);
        var a = Ext.getCmp(this.owner.TaskListPanelId);
        var d = Ext.getCmp(this.owner.ActivitiesPanelId);
        var e = b.progress_list;
        if (b.length > 0) {
            a.layout.setActiveItem(0);
            this.application.getStore("TaskList").loadData(b);
            var c = [];
            Ext.each(b, function(g) {
                Ext.each(g.progress_list, function(h) {
                    if (!h.is_deleting) {
                        c.push(h)
                    }
                }, this)
            }, this);
            this.application.getStore("ActivitiesList").loadData(c);
            if (c.length > 0) {
                d.layout.setActiveItem(0);
                this.application.getController("ActivitiesPanel").activities_list.setProgress()
            } else {
                this.application.getController("ActivitiesPanel").setBtnsStatus();
                d.layout.setActiveItem(1)
            }
        } else {
            this.application.getStore("ActivitiesList").loadData([]);
            this.application.getController("TaskListPanel").setBtnsStatus();
            a.layout.setActiveItem(1);
            this.application.getController("ActivitiesPanel").setBtnsStatus();
            d.layout.setActiveItem(1)
        }
    },
    setTaskStatus: function(b, a) {
        Ext.each(this.tasks, function(c) {
            if (c.task_id === b) {
                c.status = a
            }
        }, this);
        this.setTaskListPanels()
    },
    setTaskDeleting: function(a, b) {
        Ext.each(this.tasks, function(c) {
            if (c.task_id === a) {
                c.is_deleting = b;
                return
            }
        }, this)
    },
    setJobDeleting: function(a, c, b) {
        Ext.each(this.tasks, function(d) {
            if (d.task_id === a) {
                Ext.each(d.progress_list, function(e) {
                    if (e.job_id === c) {
                        e.is_deleting = b
                    }
                    return false
                }, this);
                return false
            }
        }, this)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.OverViewStatisticPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId);
        this.overview_statistic_panel.addListener("resize", Ext.createDelegate(this.onResize, this));
        this.vertical_height = 278;
        this.onResize(this, 916, 536)
    },
    onDestroy: function() {},
    onResize: function(l, b, g, j, d, h) {
        var f = "vertical";
        if (b > 1393) {
            f = "horizontal"
        }
        if (f === "vertical") {
            var e = b - 6;
            var a = e / 2;
            this.overview_statistic_panel.group_info_panel.setWidth(e);
            this.overview_statistic_panel.group_info_panel.setHeight(3 * this.vertical_height);
            this.overview_statistic_panel.user_service.setWidth(a);
            this.overview_statistic_panel.user_service.setHeight(this.vertical_height);
            this.overview_statistic_panel.user_usage.setWidth(a);
            this.overview_statistic_panel.user_usage.setHeight(this.vertical_height);
            this.overview_statistic_panel.last_backup_status.setWidth(a);
            this.overview_statistic_panel.last_backup_status.setHeight(this.vertical_height);
            this.overview_statistic_panel.last_event_log.setWidth(a);
            this.overview_statistic_panel.last_event_log.setHeight(this.vertical_height);
            this.overview_statistic_panel.storage_usage.setWidth(a);
            this.overview_statistic_panel.storage_usage.setHeight(this.vertical_height);
            this.overview_statistic_panel.current_activities.setWidth(a);
            this.overview_statistic_panel.current_activities.setHeight(this.vertical_height);
            this.overview_statistic_panel.group_histogram_panel.setWidth(e);
            this.overview_statistic_panel.group_histogram_panel.setHeight(this.vertical_height);
            this.overview_statistic_panel.trend_usage.setWidth(a * 2);
            this.overview_statistic_panel.trend_usage.setHeight(this.vertical_height)
        } else {
            var k = b - 6;
            var c = k / 3;
            this.overview_statistic_panel.group_info_panel.setWidth(k);
            this.overview_statistic_panel.group_info_panel.setHeight(2 * this.vertical_height);
            this.overview_statistic_panel.user_service.setWidth(c);
            this.overview_statistic_panel.user_service.setHeight(this.vertical_height);
            this.overview_statistic_panel.user_usage.setWidth(c);
            this.overview_statistic_panel.user_usage.setHeight(this.vertical_height);
            this.overview_statistic_panel.last_backup_status.setWidth(c);
            this.overview_statistic_panel.last_backup_status.setHeight(this.vertical_height);
            this.overview_statistic_panel.last_event_log.setWidth(c);
            this.overview_statistic_panel.last_event_log.setHeight(this.vertical_height);
            this.overview_statistic_panel.storage_usage.setWidth(c);
            this.overview_statistic_panel.storage_usage.setHeight(this.vertical_height);
            this.overview_statistic_panel.current_activities.setWidth(c);
            this.overview_statistic_panel.current_activities.setHeight(this.vertical_height);
            this.overview_statistic_panel.group_histogram_panel.setWidth(k);
            this.overview_statistic_panel.group_histogram_panel.setHeight(this.vertical_height);
            this.overview_statistic_panel.trend_usage.setWidth(c * 3);
            this.overview_statistic_panel.trend_usage.setHeight(this.vertical_height)
        }
        this.overview_statistic_panel.doLayout()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.UserService", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        var a = this.app().getStore("OverViewTasksStatistics");
        a.addListener("datachanged", Ext.createDelegate(this.onDataChange, this));
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId)
    },
    onDataChange: function() {
        var a = this.application.getStore("OverViewTasksStatistics");
        var b = [];
        a.each(function(c) {
            var e = {};
            for (var d in c.data) {
                if (c.data.hasOwnProperty(d)) {
                    e[d] = c.data[d]
                }
            }
            b.push(e)
        });
        this.overview_statistic_panel.user_service.loadData(b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.UserUsage", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window")
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.LastBackupStatus", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId);
        this.status_calendar_container = this.overview_statistic_panel.last_backup_status.status_calendar_container;
        this.status_calendar_container.addListener("jump_to", Ext.createDelegate(this.jump, this))
    },
    jump: function(a) {
        this.application.getController("LogPanel").find_field.reset();
        this.application.getController("LogPanel").search_panel.setDate(new Date(a.min_last_run_time * 1000), new Date(a.last_run_time * 1000), false);
        this.application.getController("LogPanel").search_panel.onSearch();
        this.application.getController("LogPanel").onConditionalJump = true;
        this.owner.selectPage("SYNO.SDS.ActiveBackupOffice365.View.LogPanel")
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.LastEventLog", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId);
        this.data_store = this.overview_statistic_panel.last_event_log.event_log_container.grid.getStore();
        this.panel = this.overview_statistic_panel.last_event_log;
        Ext.get(this.panel.jump_btn_id).addListener("click", Ext.createDelegate(this.jump, this))
    },
    loadData: function(a) {
        this.data_store.loadData(a)
    },
    jump: function() {
        this.owner.selectPage("SYNO.SDS.ActiveBackupOffice365.View.LogPanel")
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.StorageUsage", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        var a = this.app().getStore("OverViewServiceUsage");
        a.addListener("datachanged", Ext.createDelegate(this.onDataChange, this));
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId)
    },
    onDataChange: function() {
        var a = this.application.getStore("OverViewServiceUsage");
        var b = [];
        a.each(function(c) {
            var e = {};
            for (var d in c.data) {
                if (c.data.hasOwnProperty(d)) {
                    e[d] = c.data[d]
                }
            }
            b.push(e)
        });
        this.overview_statistic_panel.storage_usage.loadData(b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.CurrentActivities", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId);
        this.panel = this.overview_statistic_panel.current_activities;
        Ext.get(this.panel.jump_btn_id).addListener("click", Ext.createDelegate(this.jump, this))
    },
    jump: function() {
        this.owner.selectPage("SYNO.SDS.ActiveBackupOffice365.View.ActivitiesPanel")
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.TrendUsage", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        var a = this.app().getStore("OverViewTrendUsage");
        a.addListener("datachanged", Ext.createDelegate(this.onDataChange, this));
        this.overview_statistic_panel = Ext.getCmp(this.owner.OverViewStatisticPanelId);
        this.panel = this.overview_statistic_panel.trend_usage;
        this.panel.trend_histogram_container.addListener("resize", Ext.createDelegate(this.onResize, this));
        this.panel.trend_histogram_container.init()
    },
    onDataChange: function() {
        var a = this.application.getStore("OverViewTrendUsage");
        var b = [];
        a.each(function(c) {
            var e = {};
            for (var d in c.data) {
                if (c.data.hasOwnProperty(d)) {
                    e[d] = c.data[d]
                }
            }
            b.push(e)
        });
        this.panel.loadData(b)
    },
    onResize: function(d, g, e, b, f, a) {
        var c = this.panel.svgConfig;
        if (g) {
            c.width = g - 180
        }
        if (e) {
            c.height = e - 64
        }
        this.panel.trend_histogram_container.resizeLoadData(c);
        this.panel.doLayout()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.TaskListPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    selected_rec: null,
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.backup_panel = Ext.getCmp(this.owner.TaskListPanelId);
        this.backup_panel.addListener("resize", Ext.createDelegate(this.onResize, this));
        this.backup_panel.addListener("activate", Ext.createDelegate(this.onActivate, this));
        this.backup_panel.addListener("add", Ext.createDelegate(this.onAdd, this));
        this.backup_panel.addListener("edit", Ext.createDelegate(this.onEdit, this));
        this.backup_panel.addListener("backup", Ext.createDelegate(this.onBackup, this));
        this.backup_panel.addListener("delete", Ext.createDelegate(this.onDelete, this));
        this.backup_panel.addListener("detail", Ext.createDelegate(this.onDetail, this));
        this.backup_panel.addListener("cancel", Ext.createDelegate(this.onCancelFn, this));
        this.tasklist = this.backup_panel.find("itemId", "tasklist")[0];
        this.tasklist.onClickListFn = Ext.createDelegate(this.onClickListFn, this);
        this.tasklist.onDbClickListFn = Ext.createDelegate(this.onDbClickListFn, this);
        this.tasklist.onClickRestoreStatus = Ext.createDelegate(this.onClickRestoreStatus, this);
        this.tasklist.onChangeSelectionStatus = Ext.createDelegate(this.onChangeSelectionStatus, this)
    },
    onResize: function(c, f, d, b, e, a) {
        this.tasklist.setWidth(f);
        this.tasklist.setHeight(d - 50)
    },
    onActivate: function() {
        this.setBtnsStatus();
        this.tasklist.clearSelections()
    },
    onAdd: function() {
        this.application.getController("MainWindow").createWizard();
        this.setBtnsStatus();
        this.tasklist.clearSelections()
    },
    onEdit: function() {
        var a = this.selected_rec.get("task_id");
        this.application.getController("MainWindow").SettingsWindow(a)
    },
    onBackup: function() {
        this.owner.getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_backup_task"), function(a) {
            if ("yes" === a) {
                this.doBackup()
            }
        }, this)
    },
    doBackup: function() {
        var a = this.selected_rec.get("task_id");
        this.application.getController("MainWindow").stopConnPollTask();
        this.application.getController("MainWindow").setTaskStatus(a, SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WAITING);
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "backup_task",
            params: {
                task_id: a
            },
            callback: function(e, d, c, b) {
                this.application.getController("MainWindow").startConnPollTask(true);
                if (!e) {
                    var f = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(d);
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("common", "error"), f);
                    return
                }
            },
            scope: this
        })
    },
    onDelete: function() {
        this.owner.getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_delete_task"), function(a) {
            if ("yes" === a) {
                this.doDelete()
            }
        }, this)
    },
    onDetail: function() {
        var a = {
            task_id: this.selected_rec.get("task_id"),
            task_name: this.selected_rec.get("task_name")
        };
        this.application.getController("MainWindow").DetailInfoWindow(a)
    },
    doDelete: function() {
        var a = this.selected_rec.get("task_id");
        this.application.getController("MainWindow").setTaskDeleting(a, true);
        this.application.getController("MainWindow").setTaskListPanels();
        this.setBtnsStatus(undefined);
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            timeout: 300000,
            method: "delete_task",
            params: {
                task_id: a
            },
            callback: function(e, d, c, b) {
                if (!e) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("common", "error"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(d));
                    this.application.getController("MainWindow").setTaskDeleting(a, false);
                    return
                }
            },
            scope: this
        })
    },
    onChangeSelectionStatus: function(b, a) {
        this.setBtnsStatus(a.task_status, a.status, a.backup_policy);
        this.selected_rec = b[0]
    },
    onClickListFn: function(b) {
        if (1 !== b.length) {
            this.setBtnsStatus();
            return
        }
        this.selected_rec = b[0];
        var d = this.selected_rec.get("task_status");
        var a = this.selected_rec.get("status");
        var c = this.selected_rec.get("backup_policy");
        this.setBtnsStatus(d, a, c)
    },
    onDbClickListFn: function(a) {
        this.onDetail()
    },
    onClickRestoreStatus: function(a, b) {
        this.application.getController("MainWindow").RestoreWindow(a, b)
    },
    onCancelFn: function() {
        var a = this.selected_rec.get("task_id");
        var b = this.selected_rec.get("job_id");
        this.owner.getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_cancel_task"), function(c) {
            if ("yes" === c) {
                this.doCancel(a, b)
            }
        }, this)
    },
    doCancel: function(a, b) {
        this.application.getController("MainWindow").stopConnPollTask();
        this.application.getController("MainWindow").setTaskStatus(a, SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WAITING);
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "cancel_task",
            params: {
                task_id: a,
                job_id: b
            },
            callback: function(f, e, d, c) {
                this.application.getController("MainWindow").startConnPollTask(true);
                if (!f) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("common", "error"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(e));
                    return
                }
            },
            scope: this
        })
    },
    setBtnsStatus: function(m, g, a) {
        var j = true;
        var o = true;
        var d = true;
        var e = true;
        var n = true;
        if (g !== undefined) {
            if (m === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_SHARED_MISSING) {
                j = false;
                o = true;
                d = true;
                e = false;
                n = false
            } else {
                if (m === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_TASK_WILL_BE_DELETED) {
                    j = false;
                    o = true;
                    d = true;
                    e = false;
                    n = true
                } else {
                    if (m === SYNO.SDS.ActiveBackupOffice365.TaskStatus.INACTIVE_STORAGE_REMOVING) {
                        j = false;
                        o = true;
                        d = true;
                        e = true;
                        n = false
                    } else {
                        if (a === SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS) {
                            j = false;
                            o = true;
                            d = true;
                            e = false;
                            n = false
                        } else {
                            switch (g) {
                                case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.NOT_BACKUP_YET:
                                    j = false;
                                    o = false;
                                    d = true;
                                    e = false;
                                    n = false;
                                    break;
                                case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WAITING:
                                    j = true;
                                    o = true;
                                    d = true;
                                    e = false;
                                    n = false;
                                    break;
                                case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.QUEUING:
                                case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.BACKUPING:
                                case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.RESTORING:
                                    j = false;
                                    o = true;
                                    d = false;
                                    e = false;
                                    n = false;
                                    break;
                                default:
                                    j = false;
                                    o = false;
                                    d = true;
                                    e = false;
                                    n = false
                            }
                        }
                    }
                }
            }
        }
        var f = this.backup_panel.getTopToolbar();
        var h = f.find("itemId", "btn_edit")[0];
        var l = f.find("itemId", "btn_backup")[0];
        var c = f.find("itemId", "btn_cancel")[0];
        var b = f.find("itemId", "btn_delete")[0];
        var k = f.find("itemId", "btn_detail")[0];
        h.setDisabled(j);
        l.setDisabled(o);
        c.setDisabled(d);
        b.setDisabled(e);
        k.setDisabled(n)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.ActivitiesPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    selected_rec: null,
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.activities_panel = Ext.getCmp(this.owner.ActivitiesPanelId);
        this.activities_panel.addListener("resize", Ext.createDelegate(this.onResize, this));
        this.activities_panel.addListener("activate", Ext.createDelegate(this.onActivate, this));
        this.activities_panel.addListener("cancel", Ext.createDelegate(this.onCancelFn, this));
        this.activities_list = this.activities_panel.find("itemId", "activities_list")[0];
        this.activities_list.onClickListFn = Ext.createDelegate(this.onClickListFn, this);
        this.activities_list.onClickSuffix = Ext.createDelegate(this.onClickSuffix, this);
        this.activities_list.onClickRestoreStatus = Ext.createDelegate(this.onClickRestoreStatus, this);
        this.activities_list.onChangeSelectionStatus = Ext.createDelegate(this.onChangeSelectionStatus, this)
    },
    onResize: function(c, f, d, b, e, a) {
        this.activities_list.setWidth(f);
        this.activities_list.setHeight(d - 50)
    },
    onActivate: function() {
        this.setBtnsStatus();
        this.activities_list.clearSelections()
    },
    onChangeSelectionStatus: function(b, a) {
        this.setBtnsStatus(a.status, a.backup_policy);
        this.selected_rec = b[0]
    },
    onClickListFn: function(b) {
        if (1 !== b.length) {
            this.setBtnsStatus();
            return
        }
        this.selected_rec = b[0];
        var a = this.selected_rec.get("status");
        var c = this.selected_rec.get("backup_policy");
        this.setBtnsStatus(a, c)
    },
    onCancelFn: function() {
        var a = this.selected_rec.get("task_id");
        var b = this.selected_rec.get("job_id");
        this.owner.getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_cancel_task"), function(c) {
            if ("yes" === c) {
                this.doCancel(a, b)
            }
        }, this)
    },
    doCancel: function(a, b) {
        this.application.getController("MainWindow").setJobDeleting(a, b, true);
        this.application.getController("MainWindow").setTaskListPanels();
        this.setBtnsStatus();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "cancel_task",
            params: {
                task_id: a,
                job_id: b
            },
            callback: function(f, e, d, c) {
                if (!f) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("common", "error"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(e));
                    this.application.getController("MainWindow").setJobDeleting(a, b, false);
                    return
                }
            },
            scope: this
        })
    },
    setBtnsStatus: function(b, d) {
        var e = true;
        if (b !== undefined && d !== SYNO.SDS.ActiveBackupOffice365.BackupPolicy.CONTINUOUS) {
            e = false
        }
        var a = this.activities_panel.getTopToolbar();
        var c = a.find("itemId", "btn_cancel")[0];
        c.setDisabled(e)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.LogDetailWindow.TaskInformationPanel", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var d = new SYNO.ux.Panel({
            owner: this,
            itemId: "icon_panel",
            region: "west",
            width: 114,
            autoFlexcroll: false,
            cls: "icon_panel",
            padding: 0
        });
        var c = new SYNO.ux.FormPanel({
            owner: this,
            itemId: "form_panel",
            autoFlexcroll: false,
            labelWidth: 199,
            region: "center",
            cls: "form_panel",
            items: [{
                xtype: "displayfield",
                hideLabel: true,
                cls: "status",
                itemId: "status",
                value: "-"
            }, {
                xtype: "displayfield",
                cls: "duration",
                itemId: "duration",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "duration"),
                labelStyle: "font-weight: bold; line-height: 12px; padding: 4px 4px 4px 0;",
                value: "-"
            }, {
                xtype: "displayfield",
                cls: "transfered_size",
                itemId: "transfered_size",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "transfered_size"),
                labelStyle: "font-weight: bold; line-height: 12px; padding: 4px 4px 4px 0;",
                value: "-"
            }]
        });
        var a = {
            cls: "task_information",
            padding: "0 20px",
            autoFlexcroll: false,
            layout: "border",
            items: [d, c]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.LogDetailWindow.LogGridnPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.user_id = a.user_id;
        this.task_execution_id = a.task_execution_id;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: false,
            enableStatusType: true,
            enableTaskType: false,
            enableEventType: true,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: b,
            cls: "log_grid",
            store: d,
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "status"),
            dataIndex: "status",
            width: 80,
            sortable: false,
            id: "type",
            align: "center",
            renderer: (function(e, l, j, n, d, m) {
                var h = j.data.status;
                var g = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(h);
                var k = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(h);
                var f = j.data.error_code;
                if (h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING || h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR) {
                    l.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(SYNO.SDS.ActiveBackupOffice365.GetErrorString(f)) + '"'
                }
                return '<span style="color:' + g + '">' + k + "</span>"
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            align: "center",
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "user_account"),
            dataIndex: "user_account",
            align: "center",
            id: "user_account",
            width: 80,
            renderer: (function(k, h, d, f, j, e) {
                var g = Ext.util.Format.htmlEncode(d.data.user_account);
                h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(g) + '"';
                return g
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_name"),
            dataIndex: "file_name",
            align: "center",
            id: "file_name",
            width: 120,
            renderer: (function(k, h, d, g, j, e) {
                var f = Ext.util.Format.htmlEncode(d.data.file_path);
                h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return Ext.util.Format.htmlEncode(d.data.file_name)
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_type"),
            dataIndex: "file_type",
            align: "center",
            id: "file_type",
            width: 80,
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                var k = SYNO.SDS.ActiveBackupOffice365.Utils.getFileTypeString(h.file_type);
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_size"),
            dataIndex: "file_size",
            align: "center",
            id: "file_size",
            width: 80,
            renderer: (function(e, h, g, l, d, k) {
                var f = g.data;
                if (f.file_type === SYNO.SDS.ActiveBackupOffice365.FileType.FOLDER) {
                    return ""
                }
                var m = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(f.file_size);
                var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(f.file_size);
                return m + " " + j
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "event_type"),
            dataIndex: "event_type",
            align: "center",
            id: "event_type",
            width: 80,
            renderer: (function(j, g, d, f, h, e) {
                var k = d.data.event_type;
                return SYNO.SDS.ActiveBackupOffice365.Utils.getEventTypeString(k)
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_file_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "status", "task_type", "event_type", "user_account", "email", "description", "file_name", "file_path", "file_size", "file_type", "timestamp", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "file_logs",
            baseParams: {
                task_id: this.task_id,
                user_id: this.user_id,
                task_execution_id: this.task_execution_id,
                offset: 0,
                limit: this.pageSize
            },
            appWindow: this,
            listeners: {
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.LogDetailWindow.MainWindow", {
    extend: "SYNO.SDS.ModalWindow",
    panel_task_information: null,
    panel_log_grid: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.task_id = a.task_id;
        this.task_execution_id = a.task_execution_id
    },
    fillConfig: function(b) {
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-log_detail_window",
            closable: true,
            title: b.window_title,
            minWidth: b.width,
            minHeight: b.height,
            maximizable: true,
            resizable: true,
            border: true,
            layout: "border",
            items: [this.getTaskInformationPanel(b), this.getLogGridPanel(b)]
        };
        return Ext.apply(a, b)
    },
    getTaskInformationPanel: function(a) {
        if (null === this.panel_task_information) {
            this.panel_task_information = new SYNO.SDS.ActiveBackupOffice365.View.LogDetailWindow.TaskInformationPanel({
                itemId: "task_information",
                owner: this.owner,
                region: "north",
                height: 108,
                border: false
            })
        }
        return this.panel_task_information
    },
    getLogGridPanel: function(a) {
        var b;
        if (a.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP) {
            b = {
                xtype: "syno_tabpanel",
                activeTab: 0,
                cls: "tabpanel",
                itemId: "service_detail_window",
                deferredRender: false,
                items: [this.getUserPanel(a), this.getFileLogPanel(a), this.getMailLogPanel(a), this.getContactLogPanel(a), this.getCalendarLogPanel(a)]
            }
        } else {
            var c = 0;
            if (a.service_type === SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE) {
                c = 1
            } else {
                if (a.service_type === SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL) {
                    c = 2
                } else {
                    if (a.service_type === SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT) {
                        c = 3
                    } else {
                        c = 4
                    }
                }
            }
            b = {
                xtype: "syno_panel",
                itemId: "service_detail_window",
                activeItem: c,
                layout: "card",
                items: [this.getUserPanel(a), this.getFileLogPanel(a), this.getMailLogPanel(a), this.getContactLogPanel(a), this.getCalendarLogPanel(a)]
            }
        }
        return new SYNO.ux.Panel({
            region: "center",
            cls: "grid_wrapper_panel",
            layout: "fit",
            items: b
        })
    },
    getUserPanel: function(a) {
        return new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.UserStatusPanel({
            itemId: "user_status",
            title: SYNO.SDS.ActiveBackupOffice365.String("overview", "users"),
            owner: this.owner,
            task_id: a.task_id,
            width: a.width,
            task_execution_id: a.task_execution_id,
            height: a.height,
            log_detail_panel: true
        })
    },
    getFileLogPanel: function(a) {
        return new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.FileLogPanel({
            itemId: "file_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "file_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height,
            task_type: a.task_type,
            hide_tb: (a.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.RESTORE)
        })
    },
    getMailLogPanel: function(a) {
        return new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.MailLogPanel({
            itemId: "mail_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "mail_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height,
            hide_tb: (a.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.RESTORE)
        })
    },
    getContactLogPanel: function(a) {
        return new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.ContactLogPanel({
            itemId: "contact_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "contact_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height,
            hide_tb: (a.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.RESTORE)
        })
    },
    getCalendarLogPanel: function(a) {
        return new SYNO.SDS.ActiveBackupOffice365.View.ServiceDetailWindow.CalendarLogPanel({
            itemId: "calendar_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "calendar_log"),
            owner: this.owner,
            task_id: a.task_id,
            task_execution_id: a.task_execution_id,
            width: a.width,
            height: a.height,
            hide_tb: (a.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.RESTORE)
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.LogDetailWindow.TaskInformationPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {},
    setData: function(a) {
        this.setStatusIcon(a);
        this.setStatus(a);
        this.setDuration(a);
        this.setTransferredSize(a);
        this.setProcessedCount(a)
    },
    setStatusIcon: function(c) {
        var b = this.componentQuery("main_window task_information icon_panel");
        if (!b) {
            return
        }
        switch (c.status) {
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.OK:
                var a = "0px -0px";
                break;
            case SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING:
                a = "0px -140px";
                break;
            default:
                a = "0px -70px"
        }
        b.getEl().setStyle({
            "background-position": a
        })
    },
    setStatus: function(e) {
        var b = this.componentQuery("main_window task_information form_panel status");
        if (!b) {
            return
        }
        var a = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(e.status, e.error_code);
        b.setValue(a);
        var d = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(e.status, e.error_code);
        b.getEl().setStyle({
            color: d
        });
        if (e.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING || e.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR) {
            var c = SYNO.SDS.ActiveBackupOffice365.GetErrorString(e.error_code);
            b.getEl().set({
                "ext:qtip": c
            })
        }
    },
    setDuration: function(c) {
        var a = this.componentQuery("main_window task_information form_panel duration");
        if (!a) {
            return
        }
        var d = c.last_execution_time - c.start_run_time;
        var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.convertTimeFormat(d);
        b = (b === "") ? "-" : b;
        a.setValue(b)
    },
    setTransferredSize: function(d) {
        var a = this.componentQuery("main_window task_information form_panel transfered_size");
        if (!a) {
            return
        }
        var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(d.transfered_amount);
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(d.transfered_amount);
        a.setValue(b + " " + c)
    },
    setProcessedCount: function(b) {
        var a = this.componentQuery("main_window task_information form_panel processed_count");
        if (!a) {
            return
        }
        Ext.get(a.id + ".success_icon").set({
            "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "success_processed_count")
        });
        Ext.get(a.id + ".warning_icon").set({
            "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "warning_processed_count")
        });
        Ext.get(a.id + ".error_icon").set({
            "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "error_processed_count")
        });
        Ext.get(a.id + ".success_icon").update(b.success_processed_count.toString());
        Ext.get(a.id + ".warning_icon").update(b.warning_processed_count.toString());
        Ext.get(a.id + ".error_icon").update(b.error_processed_count.toString())
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.LogDetailWindow.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Widget",
    viewport: "SYNO.SDS.ActiveBackupOffice365.View.LogDetailWindow.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.LogDetailWindow.TaskInformationPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.UserStatusPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.FileLogPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.MailLogPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.ContactLogPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ServiceDetailWindow.CalendarLogPanel"],
    models: [],
    stores: [],
    constructor: function(a) {
        this.callParent([a]);
        this.ondestroy_callback = a.ondestroy_callback;
        this.task_id = a.task_id;
        this.user_id = a.user_id;
        this.task_execution_id = a.task_execution_id
    },
    init: function() {
        this.control({
            main_window: {
                destroy: this.onDestroy,
                beforeshow: this.onBeforeshow
            }
        })
    },
    onDestroy: function() {
        this.ondestroy_callback()
    },
    onBeforeshow: function() {
        this.app().getController("UserStatusPanel").setData(this.task_id, this.task_execution_id)
    },
    setTaskInformation: function(a) {
        this.app().getController("TaskInformationPanel").setData(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.LogPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.log_panel = Ext.getCmp(this.owner.LogPanelId);
        this.log_panel.addListener("rowclick", this.onRowClick, this);
        this.log_panel.addListener("activate", this.onActivate, this);
        this.data_store = this.log_panel.getStore();
        this.data_store.addListener("load", this.storeLoad, this);
        this.find_field = this.log_panel.findField;
        this.search_panel = this.find_field.searchPanel;
        this.mon(this.search_panel, "search", this.onSearch, this, {
            buffer: this.searchBuffer
        })
    },
    onActivate: function() {
        if (this.onConditionalJump) {
            this.onConditionalJump = false;
            return
        }
        this.find_field.reset();
        this.search_panel.onReset();
        this.data_store.baseParams = {
            offset: 0,
            limit: this.log_panel.pageSize
        };
        this.loadStore()
    },
    storeLoad: function() {
        var a = this.log_panel.getTopToolbar();
        this.selected_data = null
    },
    onSearch: function(a, b) {
        this.data_store.baseParams = {
            offset: 0,
            limit: this.log_panel.pageSize
        };
        Ext.apply(this.data_store.baseParams, b);
        this.loadStore()
    },
    onRowClick: function(a, d, c) {
        this.selected_data = this.data_store.getAt(d).data;
        if (this.selected_data.task_execution_id === 0) {
            return
        }
        var b = Ext.fly(c.getTarget());
        if (b && (b.hasClass("log_link"))) {
            this.openLogDetailWindow()
        }
    },
    openLogDetailWindow: function() {
        this.owner.setStatusBusy();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "get_task_log",
            params: {
                task_id: this.selected_data.task_id,
                task_execution_id: this.selected_data.task_execution_id,
                offset: 0,
                limit: 0
            },
            callback: function(g, f, e, d) {
                this.owner.clearStatusBusy();
                if (f.has_fail) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(f)));
                    return
                }
                if (f.is_task_deleted === true) {
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.String("error", "deleted_task"));
                    return
                }
                var c = {};
                if (f.task_logs.length === 0) {
                    c = f.default_task_log
                } else {
                    c = f.task_logs[0]
                }
                var h = this.getServiceType(c);
                var b = this.createWidget(SYNO.SDS.ActiveBackupOffice365.Controller.LogDetailWindow.MainWindow, {
                    owner: this.owner,
                    ondestroy_callback: this.logDetailWindowCallback.createDelegate(this),
                    task_id: this.selected_data.task_id,
                    task_execution_id: this.selected_data.task_execution_id,
                    task_type: c.task_type,
                    service_type: h,
                    width: 980,
                    height: 560
                });
                var a = c.task_name;
                a += " - " + SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeString(c.task_type);
                a += " - " + SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(c.last_execution_time);
                b.getViewport().setTitle(a);
                b.setTaskInformation(c);
                b.getViewport().open()
            },
            scope: this
        })
    },
    getServiceType: function(a) {
        if (a.task_type === SYNO.SDS.ActiveBackupOffice365.TaskType.BACKUP) {
            return SYNO.SDS.ActiveBackupOffice365.ServiceType.ALL_TYPE
        }
        if (a.total_drive_count > 0) {
            return SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE
        }
        if (a.total_mail_count > 0) {
            return SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL
        }
        if (a.total_contact_count > 0) {
            return SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT
        }
        if (a.total_calendar_count > 0) {
            return SYNO.SDS.ActiveBackupOffice365.ServiceType.CALENDAR
        }
        return SYNO.SDS.ActiveBackupOffice365.ServiceType.ALL_TYPE
    },
    logDetailWindowCallback: function() {},
    loadStore: function() {
        this.data_store.load()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverViewTasksStatistics", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "task_name", "storage_usage", "last_execution_time", "total_user", "protected_user", "unprotected_user", "success_user", "processing_backup", "processing_restore", "error_user", "deleted_user", "enable_drive", "enable_mail", "enable_archive_mail", "union_enable_mail", "enable_contact", "enable_calendar"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverViewUsersStatistics", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["unique_id", "task_name", "user_id", "user_name", "user_email", "mail_usage", "archive_mail_usage", "drive_usage", "contact_usage", "calendar_usage", "usage_percentage", "usage_total"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverViewServiceUsage", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["service_type", "storage_usage", "mail_used_storage", "archive_mail_used_storage"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverViewTrendUsage", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "status", "task_name", "task_type", "transfered_amount", "task_execution_id", "last_execution_time", "backup_policy", "error_code"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.TaskList", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "job_id", "task_name", "task_status", "processing_name", "last_execution_time", "backup_policy", "status", "elapsed_time", "error_code", "enable_schedule", "job_id", "enable_drive", "enable_mail", "enable_archive_mail", "enable_contact", "enable_calendar", "processed_drive", "processed_mail", "processed_archive_mail", "processed_contact", "processed_calendar", "status_drive", "status_mail", "status_archive_mail", "status_contact", "status_calendar", "warning_drive", "warning_mail", "warning_archive_mail", "warning_contact", "warning_calendar", "error_drive", "error_mail", "error_archive_mail", "error_contact", "error_calendar"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.ActivitiesList", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "job_id", "task_name", "task_type", "status", "elapsed_time", "error_code", "processing_name", "backup_policy", "last_execution_time", "size", "is_manual_backup", "runner_name", "service_type", "path", "percentage"]
        };
        return Ext.apply(a, b)
    }
});
Ext.ns("SYNO.SDS.ActiveBackupOffice365");
Ext.define("SYNO.SDS.ActiveBackupOffice365.Instance", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.App",
    appWindowName: "SYNO.SDS.ActiveBackupOffice365.View.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.MainWindow", "SYNO.SDS.ActiveBackupOffice365.Controller.OverViewStatisticPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.UserService", "SYNO.SDS.ActiveBackupOffice365.Controller.UserUsage", "SYNO.SDS.ActiveBackupOffice365.Controller.LastBackupStatus", "SYNO.SDS.ActiveBackupOffice365.Controller.LastEventLog", "SYNO.SDS.ActiveBackupOffice365.Controller.StorageUsage", "SYNO.SDS.ActiveBackupOffice365.Controller.CurrentActivities", "SYNO.SDS.ActiveBackupOffice365.Controller.TrendUsage", "SYNO.SDS.ActiveBackupOffice365.Controller.TaskListPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.ActivitiesPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.LogPanel"],
    models: [],
    stores: ["SYNO.SDS.ActiveBackupOffice365.Store.OverViewTasksStatistics", "SYNO.SDS.ActiveBackupOffice365.Store.OverViewUsersStatistics", "SYNO.SDS.ActiveBackupOffice365.Store.OverViewServiceUsage", "SYNO.SDS.ActiveBackupOffice365.Store.OverViewTrendUsage", "SYNO.SDS.ActiveBackupOffice365.Store.TaskList", "SYNO.SDS.ActiveBackupOffice365.Store.ActivitiesList"],
    constructor: function() {
        this.callParent(arguments)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.BackupHistogram", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    initialized: false,
    init: function() {
        this.control({
            "main_window histogram": {
                activate: this.onActivated,
                set_yaxis_unit: this.setYaxisUnit
            }
        });
        this.detail_window_histogram = this.componentQuery("main_window histogram detail_window_histogram");
        this.histogram_panel = this.componentQuery("main_window histogram");
        this.setHistogramBtns("day");
        Ext.get(this.histogram_panel.btn_panel_id + ".day").addListener("click", Ext.createDelegate(this.selectDay, this));
        Ext.get(this.histogram_panel.btn_panel_id + ".hour").addListener("click", Ext.createDelegate(this.selectHour, this))
    },
    selectDay: function(a) {
        this.setHistogramBtns("day")
    },
    selectHour: function(a) {
        this.setHistogramBtns("hour")
    },
    setHistogramBtns: function(a) {
        if (a === this.time_period_value) {
            return
        }
        if (a === "day") {
            Ext.get(this.histogram_panel.btn_panel_id + ".day").addClass("selected");
            Ext.get(this.histogram_panel.btn_panel_id + ".hour").removeClass("selected")
        }
        if (a === "hour") {
            Ext.get(this.histogram_panel.btn_panel_id + ".hour").addClass("selected");
            Ext.get(this.histogram_panel.btn_panel_id + ".day").removeClass("selected")
        }
        this.detail_window_histogram.setTimeInteval(a);
        if (!this.initialized) {
            this.detail_window_histogram.setInitPageOffset();
            this.initialized = true
        } else {
            this.detail_window_histogram.setPointedPageOffset()
        }
        this.time_period_value = a
    },
    setData: function(b, a) {
        this.detail_window_histogram.color_task_id_pair = a;
        this.detail_window_histogram.loadData(b)
    },
    getData: function() {},
    onActivated: function() {},
    setYaxisUnit: function(a) {
        this.stage_unit = a;
        this.setSizeLabel()
    },
    setSizeLabel: function() {
        var a = this.stage_unit;
        if (!a) {
            this.componentQuery("main_window histogram size_label").setValue(SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size"))
        } else {
            this.componentQuery("main_window histogram size_label").setValue(SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size") + "(" + a + ")")
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.BackupInformationPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window detail_info_window backup_information": {
                activate: this.onActivated
            }
        })
    },
    setData: function(a) {
        if (a.status === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WAITING) {
            a.processing_name = "-";
            a.elapsed_time = 0;
            a.transfered_size = 0;
            a.success_processed_count = 0;
            a.warning_processed_count = 0;
            a.error_processed_count = 0;
            a.success_drive_processed_count = 0;
            a.warning_drive_processed_count = 0;
            a.error_drive_processed_count = 0
        }
        this.setProcessingUser(a);
        this.setStatus(a);
        this.setResult(a);
        this.setDuration(a);
        this.setElapsedTime(a);
        this.setLastExecutionTime(a);
        this.setTransferredSize(a);
        this.setTransferredCount(a);
        if (a.status == SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WAITING || a.status == SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.QUEUING || a.status == SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.BACKUPING) {
            this.componentQuery("main_window backup_information form_panel elapsed_time").setVisible(true);
            this.componentQuery("main_window backup_information form_panel processing_user").setVisible(true);
            this.componentQuery("main_window backup_information form_panel duration").setVisible(false);
            this.componentQuery("main_window backup_information form_panel last_execution_time").setVisible(false);
            this.componentQuery("main_window backup_information form_panel status").setVisible(true);
            this.componentQuery("main_window backup_information form_panel result").setVisible(false)
        } else {
            this.componentQuery("main_window backup_information form_panel elapsed_time").setVisible(false);
            this.componentQuery("main_window backup_information form_panel processing_user").setVisible(false);
            this.componentQuery("main_window backup_information form_panel duration").setVisible(true);
            this.componentQuery("main_window backup_information form_panel last_execution_time").setVisible(true);
            this.componentQuery("main_window backup_information form_panel status").setVisible(false);
            this.componentQuery("main_window backup_information form_panel result").setVisible(true)
        }
    },
    getData: function() {},
    onActivated: function() {},
    onCancelFn: function(a) {},
    setProcessingUser: function(b) {
        var a = this.componentQuery("main_window backup_information form_panel processing_user");
        if (!a) {
            return
        }
        var c;
        if (!b.processing_name || b.processing_name === "") {
            c = "-"
        } else {
            c = b.processing_name
        }
        a.setValue(SYNO.SDS.ActiveBackupOffice365Lib.Utils.shortenText(c, 45));
        a.getEl().set({
            "ext:qtip": c
        })
    },
    setStatus: function(d) {
        var b = this.componentQuery("main_window backup_information form_panel status");
        if (!b) {
            return
        }
        var a = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(d.status, d.error_code);
        b.setValue(a);
        var c = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(d.status, d.error_code);
        b.getEl().setStyle({
            color: c
        })
    },
    setResult: function(d) {
        var b = this.componentQuery("main_window backup_information form_panel result");
        if (!b) {
            return
        }
        var a = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(d.status, d.error_code);
        b.setValue(a);
        var c = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(d.status, d.error_code);
        b.getEl().setStyle({
            color: c
        })
    },
    setDuration: function(c) {
        var a = this.componentQuery("main_window backup_information form_panel duration");
        if (!a) {
            return
        }
        var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.convertTimeFormat(c.duration);
        b = (b === "") ? "-" : b;
        a.setValue(b)
    },
    setElapsedTime: function(b) {
        var a = this.componentQuery("main_window backup_information form_panel elapsed_time");
        if (!a) {
            return
        }
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.convertTimeFormat(b.elapsed_time);
        c = (c === "") ? "-" : c;
        a.setValue(c)
    },
    setLastExecutionTime: function(c) {
        var a = this.componentQuery("main_window backup_information form_panel last_execution_time");
        if (!a) {
            return
        }
        var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(c.last_execution_time);
        b = (b === "") ? "-" : b;
        a.setValue(b)
    },
    setTransferredSize: function(d) {
        var a = this.componentQuery("main_window backup_information form_panel transfered_size");
        if (!a) {
            return
        }
        var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(d.transfered_size);
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(d.transfered_size);
        a.setValue(b + " " + c)
    },
    setTransferredCount: function(b) {
        var a = this.componentQuery("main_window backup_information form_panel processed_count");
        if (!a) {
            return
        }
        Ext.get(a.id + ".success_icon").set({
            "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "success_processed_count")
        });
        Ext.get(a.id + ".warning_icon").set({
            "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "warning_processed_count")
        });
        Ext.get(a.id + ".error_icon").set({
            "ext:qtip": SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "error_processed_count")
        });
        Ext.get(a.id + ".success_icon").update(b.success_processed_count.toString());
        Ext.get(a.id + ".warning_icon").update(b.warning_processed_count.toString());
        Ext.get(a.id + ".error_icon").update(b.error_processed_count.toString())
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.BackupInformationPanel", {
    extend: "SYNO.ux.Panel",
    task_list: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var c = new SYNO.ux.FormPanel({
            owner: this,
            itemId: "form_panel",
            autoFlexcroll: false,
            labelWidth: 230,
            padding: 0,
            region: "center",
            cls: "form_panel",
            items: [{
                xtype: "displayfield",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("common", "status"),
                cls: "status",
                itemId: "status",
                value: "-"
            }, {
                xtype: "displayfield",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "result"),
                cls: "result",
                itemId: "result",
                value: "-"
            }, {
                xtype: "displayfield",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "processing_user"),
                labelStyle: "line-height: 18px;",
                cls: "processing_user",
                itemId: "processing_user",
                value: "-"
            }, {
                xtype: "displayfield",
                cls: "elapsed_time",
                itemId: "elapsed_time",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time"),
                labelStyle: "line-height: 18px;",
                value: "-"
            }, {
                xtype: "displayfield",
                cls: "last_execution_time",
                itemId: "last_execution_time",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time"),
                labelStyle: "line-height: 18px;",
                value: "-"
            }, {
                xtype: "displayfield",
                cls: "duration",
                itemId: "duration",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "duration"),
                labelStyle: "line-height: 18px;",
                value: "-"
            }, {
                xtype: "displayfield",
                cls: "transfered_size",
                itemId: "transfered_size",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "transfered_size"),
                labelStyle: "line-height: 18px;",
                value: "-"
            }, {
                xtype: "compositefield",
                padding: 0,
                itemId: "processed_count",
                labelStyle: "line-height: 18px;",
                id: this.transfered_count_id = Ext.id(),
                cls: "processed_count",
                fieldLabel: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "processed_user"),
                height: 22,
                items: [{
                    xtype: "panel",
                    hideLabel: true,
                    border: false,
                    padding: 0,
                    height: 22,
                    html: '<div class="icon_list"><div id="' + this.transfered_count_id + '.error_icon" class="error_icon">-</div><div id="' + this.transfered_count_id + '.warning_icon" class="warning_icon">-</div><div id="' + this.transfered_count_id + '.success_icon" class="success_icon">-</div></div>'
                }]
            }]
        });
        var a = {
            border: false,
            layout: "fit",
            padding: "5px 50px 0 50px",
            height: 460,
            width: 790,
            cls: "backup_information",
            items: [c]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.DetailWindowHistogramContainer", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.color_task_id_pair = []
    },
    fillConfig: function(a) {
        this.stage_histogram = new SYNO.SDS.ActiveBackupOffice365.Histogram.StageBarChart({
            index: 0,
            svgConfig: a.svgConfig,
            onClickBar: a.onClickBar,
            clickPreNextBtn: this.clickPreNextBtn.createDelegate(this),
            setYaxisUnit: a.setYaxisUnit
        });
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-histogram-container",
            layout: "fit",
            items: [{
                xtype: "panel",
                itemId: "histogram_card",
                cls: "bar-chart",
                border: false,
                layout: "card",
                activeItem: 0,
                items: [this.stage_histogram]
            }]
        };
        return Ext.apply(a, b)
    },
    clickPreNextBtn: function() {
        this.refreshPanel()
    },
    setTimeInteval: function(a) {
        this.stage_histogram.setTimeInteval(a);
        this.refreshPanel()
    },
    setInitPageOffset: function(a) {
        this.stage_histogram.setInitPageOffset();
        this.refreshPanel()
    },
    setPointedPageOffset: function() {
        this.stage_histogram.setPointedPageOffset();
        this.refreshPanel()
    },
    setPageOffset: function(a) {
        this.stage_histogram.setPageOffset(a);
        this.refreshPanel()
    },
    focusData: function(a) {
        this.stage_histogram.setNewFocusTaskId(a);
        this.refreshPanel()
    },
    resizeLoadData: function(a) {
        this.stage_histogram.setNewSvgConfig(a);
        this.refreshPanel()
    },
    refreshPanel: function() {
        this.stage_histogram.loadData(this.data)
    },
    loadData: function(b) {
        var a = b.slice();
        this.styledData(a);
        a.sort(function(d, c) {
            return new Date(d.last_execution_time) - new Date(c.last_execution_time)
        });
        this.data = a;
        this.stage_histogram.loadData(a)
    },
    styledData: function(a) {
        Ext.each(this.color_task_id_pair, function(b) {
            b.color_count = 0
        }, this);
        Ext.each(a, function(d) {
            var b = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(d.transfered_amount);
            var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(d.transfered_amount);
            d.size_string = String.format(SYNO.SDS.ActiveBackupOffice365.String("histogram", "space_usage") + " : {0} {1}", b, c);
            d.tool_tip = d.size_string + "<br/>";
            d.tool_tip += SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime(d.last_execution_time);
            d.opacity = 1;
            Ext.each(this.color_task_id_pair, function(f) {
                if (d.task_id === f.task_id) {
                    var e = f.color_set;
                    d.color = e[(f.color_count) % (e.length)];
                    f.color_count += 1;
                    return
                }
            }, this)
        }, this)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.BackupHistogram", {
    extend: "SYNO.ux.Panel",
    top_bar_panel: null,
    form_panel: null,
    histogram_panel: null,
    histogram: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            cls: "backup_histogram",
            autoFlexcroll: false,
            border: false,
            layout: "border",
            items: [{
                xtype: "panel",
                padding: "0px 50px 0 50px",
                region: "north",
                border: false,
                height: 20,
                items: [{
                    xtype: "displayfield",
                    itemId: "size_label",
                    height: 20,
                    cls: "size_label",
                    value: SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size")
                }]
            }, {
                xtype: "panel",
                region: "center",
                border: false,
                layout: "border",
                items: [this.getTopBar(b), this.getHistogram(b)]
            }]
        };
        return Ext.apply(a, b)
    },
    getTopBar: function(a) {
        var b = new SYNO.ux.Panel({
            owner: this,
            appWin: a.appWin,
            flex: 1,
            cls: "btns_panel",
            id: this.btn_panel_id = Ext.id(),
            region: "east",
            width: 346,
            height: 40,
            html: '<div class="time_range_btns_wrapper"><div class="value_wrapper"><div id = "' + this.btn_panel_id + '.hour" class=value hour">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "hour") + '</div></div><div class="seperator"></div><div class="value_wrapper"><div id = "' + this.btn_panel_id + '.day" class=value day">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "day") + "</div></div></div>"
        });
        if (null === this.top_bar_panel) {
            this.top_bar_panel = new SYNO.ux.Panel({
                owner: this,
                appWin: a.appWin,
                region: "north",
                padding: "0 50px 0 50px",
                height: 44,
                items: [{
                    xtype: "panel",
                    cls: "top_bar_panel",
                    border: false,
                    layout: "border",
                    height: 44,
                    items: [{
                        xtype: "panel",
                        region: "center",
                        border: false
                    }, b]
                }]
            })
        }
        return this.top_bar_panel
    },
    getHistogram: function(a) {
        if (null === this.histogram) {
            this.histogram = new SYNO.SDS.ActiveBackupOffice365.Model.DetailWindowHistogramContainer({
                owner: this,
                itemId: "detail_window_histogram",
                appWin: a.appWin,
                onClickBar: Ext.emptyFn,
                setYaxisUnit: Ext.createDelegate(this.setYaxisUnit, this),
                svgConfig: {
                    margin: {
                        top: 14,
                        right: 50,
                        bottom: 30,
                        left: 50
                    },
                    width: 760,
                    height: 186
                }
            })
        }
        if (null === this.histogram_panel) {
            this.histogram_panel = new SYNO.ux.Panel({
                owner: this,
                appWin: a.appWin,
                region: "center",
                layout: "fit",
                items: this.histogram
            })
        }
        return this.histogram_panel
    },
    setYaxisUnit: function(b, a) {
        this.fireEvent("set_yaxis_unit", b, a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.UserStatusPanel", {
    extend: "SYNO.ux.GridPanel",
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchfield = new SYNO.ux.TextFilter({
            iconStyle: "filter",
            itemId: "filter",
            emptyText: _JSLIBSTR("uicommon", "search"),
            enableKeyEvents: true
        });
        this.btn_refresh = new SYNO.ux.Button({
            cls: "refresh_btn",
            iconCls: "refresh_icon",
            itemId: "btn_refresh"
        });
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            cls: "tool-bar",
            items: ["->", this.searchfield, this.btn_refresh]
        });
        var a = {
            tbar: b,
            cls: "user_status",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            })
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "email"),
            dataIndex: "email",
            align: "center",
            width: 200,
            id: "email",
            renderer: (function(k, h, d, g, j, e) {
                var f = Ext.util.Format.htmlEncode(d.data.email);
                h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return f
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "user_name"),
            dataIndex: "user_name",
            align: "center",
            id: "user_name",
            width: 120,
            renderer: (function(k, g, d, f, j, e) {
                var h = Ext.util.Format.htmlEncode(d.data.user_name);
                g.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(h) + '"';
                return h
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("tasklist", "last_execution_time"),
            dataIndex: "time",
            align: "center",
            id: "time",
            width: 200,
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "status"),
            dataIndex: "status",
            id: "status",
            align: "center",
            width: 80,
            renderer: (function(e, l, j, o, d, m) {
                var p = j.data.remote_status;
                if (p === SYNO.SDS.ActiveBackupOffice365.AccountStatus.DELETED) {
                    var g = SYNO.SDS.ActiveBackupOffice365.Utils.getAccountStatusColor(p);
                    var k = SYNO.SDS.ActiveBackupOffice365.Utils.getAccountStatusString(p);
                    return '<span style="color:' + g + '">' + k + "</span>"
                }
                var h = j.data.status;
                if (h == SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.OK) {
                    var n = SYNO.SDS.ActiveBackupOffice365.String("task_status", "success");
                    n = '<span class="success">' + n + "</span>"
                } else {
                    if (h == SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING) {
                        n = SYNO.SDS.ActiveBackupOffice365.String("common", "warning");
                        n = '<span class="warning">' + n + "</span>"
                    } else {
                        if (h == SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR) {
                            n = SYNO.SDS.ActiveBackupOffice365.String("task_status", "error");
                            n = '<span class="error">' + n + "</span>"
                        } else {
                            n = "-"
                        }
                    }
                }
                var f = j.data.error_code;
                if (h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING || h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR) {
                    l.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(SYNO.SDS.ActiveBackupOffice365.GetErrorString(f)) + '"'
                }
                return n
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "size"),
            dataIndex: "size",
            align: "center",
            id: "size",
            width: 80,
            renderer: (function(e, h, g, l, d, k) {
                var f = g.data;
                var m = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(f.size);
                var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(f.size);
                return m + " " + j
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: true,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            fields: ["id", "selected", "email", "user_name", "remote_status", "status", "time", "size", "error_code"],
            listeners: {
                scope: this,
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.UserLogPanel", {
    extend: "SYNO.ux.GridPanel",
    pageSize: 200,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(c) {
        var d = this.createStore(c);
        this.searchPanel = new SYNO.SDS.ActiveBackupOffice365.Model.SearchPanel({
            itemId: "search_panel",
            cls: "syno-activebackupoffice365lib-search-panel",
            renderTo: Ext.getBody(),
            shadow: false,
            jsConfig: this.jsConfig,
            hidden: true,
            enableKeyWord: true,
            enableLogType: false,
            enableStatusType: true,
            enableTaskType: true,
            enableEventType: true,
            enableCustDate: true,
            owner: this
        });
        this.findField = new SYNO.SDS.ActiveBackupOffice365.Model.AdvancedSearchField({
            itemId: "advanced_search_field",
            iconStyle: "filter",
            owner: this
        });
        this.findField.searchPanel = this.searchPanel;
        var b = new Ext.Toolbar({
            owner: this,
            itemId: "tool_bar",
            items: ["->", this.findField]
        });
        var e = new SYNO.ux.PagingToolbar({
            store: d,
            pageSize: this.pageSize,
            displayInfo: true
        });
        var a = {
            title: SYNO.SDS.ActiveBackupOffice365.String("log", "log"),
            tbar: b,
            cls: "user_log",
            store: d,
            padding: "0 5px",
            colModel: this.createColumnModel(c),
            selModel: new Ext.grid.RowSelectionModel({
                singleSelect: false
            }),
            bbar: e
        };
        return Ext.apply(a, c)
    },
    createColumnModel: function(c) {
        var b = [{
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "status"),
            dataIndex: "status",
            width: 80,
            sortable: false,
            id: "type",
            align: "center",
            renderer: (function(e, l, j, n, d, m) {
                var h = j.data.status;
                var g = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusColor(h);
                var k = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(h);
                var f = j.data.error_code;
                if (h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.WARNING || h === SYNO.SDS.ActiveBackupOffice365.BackupJobStatus.ERROR) {
                    l.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(SYNO.SDS.ActiveBackupOffice365.GetErrorString(f)) + '"'
                }
                return '<span style="color:' + g + '">' + k + "</span>"
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "log_time"),
            dataIndex: "timestamp",
            id: "time",
            width: 160,
            sortable: false,
            align: "center",
            renderer: SYNO.SDS.ActiveBackupOffice365Lib.Utils.RenderTime
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("account_info", "user_account"),
            dataIndex: "user_account",
            align: "center",
            id: "user_account",
            width: 80,
            renderer: (function(k, h, d, f, j, e) {
                var g = Ext.util.Format.htmlEncode(d.data.user_account);
                h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(g) + '"';
                return g
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_name"),
            dataIndex: "file_name",
            align: "center",
            id: "file_name",
            width: 120,
            renderer: (function(k, h, d, g, j, e) {
                var f = Ext.util.Format.htmlEncode(d.data.file_path);
                h.attr = 'ext:qtip="' + Ext.util.Format.htmlEncode(f) + '"';
                return Ext.util.Format.htmlEncode(d.data.file_name)
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_type"),
            dataIndex: "file_type",
            align: "center",
            id: "file_type",
            width: 80,
            renderer: (function(l, g, d, f, j, e) {
                var h = d.data;
                var k = SYNO.SDS.ActiveBackupOffice365.Utils.getFileTypeString(h.file_type);
                return k
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("log", "file_size"),
            dataIndex: "file_size",
            align: "center",
            id: "file_size",
            width: 80,
            renderer: (function(e, h, g, l, d, k) {
                var f = g.data;
                if (f.file_type === SYNO.SDS.ActiveBackupOffice365.FileType.FOLDER) {
                    return ""
                }
                var m = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(f.file_size);
                var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(f.file_size);
                return m + " " + j
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "task_type"),
            dataIndex: "task_type",
            align: "center",
            id: "task_type",
            width: 80,
            renderer: (function(e, k, g, m, d, l) {
                var h = g.data.task_type;
                var f = SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeColor(h);
                var j = SYNO.SDS.ActiveBackupOffice365.Utils.getTaskTypeString(h);
                return '<span style="color:' + f + '">' + j + "</span>"
            }).createDelegate(this)
        }, {
            header: SYNO.SDS.ActiveBackupOffice365.String("common", "event_type"),
            dataIndex: "event_type",
            align: "center",
            id: "event_type",
            width: 80,
            renderer: (function(j, g, d, f, h, e) {
                var k = d.data.event_type;
                return SYNO.SDS.ActiveBackupOffice365.Utils.getEventTypeString(k)
            }).createDelegate(this)
        }];
        var a = new Ext.grid.ColumnModel({
            defaults: {
                sortable: false,
                menuDisabled: true
            },
            columns: b
        });
        return a
    },
    onBeforeStoreLoad: function(a, b) {
        a.removeAll()
    },
    createStore: function(b) {
        var a = new SYNO.API.JsonStore({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            method: "get_file_log",
            version: 1,
            pruneModifiedRecords: true,
            autoLoad: false,
            fields: ["task_id", "user_id", "task_execution_id", "status", "task_type", "event_type", "user_account", "email", "description", "file_name", "file_path", "file_size", "file_type", "timestamp", "error_code"],
            totalProperty: "count",
            idProperty: "id",
            root: "file_logs",
            baseParams: {
                task_id: this.task_id,
                offset: 0,
                limit: this.pageSize
            },
            appWindow: this,
            listeners: {
                beforeload: this.onBeforeStoreLoad
            }
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.MainWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.task_id = a.task_id
    },
    fillConfig: function(b) {
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-detail_info_window",
            closable: true,
            title: b.window_title,
            resizable: false,
            padding: "0 20px",
            border: true,
            layout: "fit",
            items: [{
                xtype: "syno_tabpanel",
                itemId: "detail_info_window",
                activeTab: 0,
                cls: "tabpanel",
                deferredRender: false,
                items: this.getTabs(b)
            }]
        };
        return Ext.apply(a, b)
    },
    getTabs: function(a) {
        this.panel_user_status = new SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.UserStatusPanel({
            itemId: "user_status",
            title: SYNO.SDS.ActiveBackupOffice365.String("overview", "users"),
            owner: this.owner,
            task_id: a.task_id,
            width: a.width,
            height: a.height
        });
        this.panel_user_log = new SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.UserLogPanel({
            itemId: "user_log",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "file_log"),
            owner: this.owner,
            task_id: a.task_id,
            width: a.width,
            height: a.height
        });
        return [this.getBackupPanel(a), this.panel_user_status, this.panel_user_log]
    },
    getBackupPanel: function(a) {
        var b = new SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.BackupInformationPanel({
            itemId: "backup_information",
            height: 206,
            width: a.width,
            region: "north",
            owner: this.owner
        });
        var c = new SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.BackupHistogram({
            itemId: "histogram",
            region: "center",
            width: a.width,
            owner: this.owner
        });
        return new SYNO.ux.Panel({
            itemId: "backup",
            cls: "backup",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "backup_information"),
            owner: this.owner,
            border: false,
            layout: "border",
            items: [b, c]
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.UserStatusPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window detail_info_window user_status": {
                activate: this.onActivated
            }
        });
        this.panel = this.componentQuery("main_window user_status");
        this.data_store = this.panel.getStore();
        this.panel.searchfield.addListener("keyup", Ext.createDelegate(this.onKeyUpSearch, this));
        this.panel.searchfield.trigger.addListener("click", Ext.createDelegate(this.onKeyUpSearch, this));
        this.panel.btn_refresh.addListener("click", Ext.createDelegate(this.onClickRefresh, this));
        this.LoadAccountData()
    },
    setData: function(a) {
        this.task_id = a
    },
    getData: function() {},
    onActivated: function() {},
    onClickRefresh: function() {
        this.LoadAccountData()
    },
    onKeyUpSearch: function() {
        var a = this.panel.searchfield.getValue();
        if (a == "") {
            this.data_store.filter([])
        } else {
            this.data_store.filter([{
                fn: function(d) {
                    var h = d.get("user_name");
                    var e = d.get("email");
                    var c = d.get("status");
                    var b = SYNO.SDS.ActiveBackupOffice365.Utils.getStatusString(c);
                    var g = d.get("remote_status");
                    if (g === SYNO.SDS.ActiveBackupOffice365.AccountStatus.DELETED) {
                        b = SYNO.SDS.ActiveBackupOffice365.Utils.getAccountStatusString(g)
                    }
                    var f = new RegExp(a, "i");
                    return ((f.test(h)) || (f.test(e)) || (f.test(b)))
                },
                scope: this
            }])
        }
    },
    LoadAccountData: function() {
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "list_local_user",
            params: {
                task_id: this.task_id
            },
            callback: function(d, c, b, a) {
                if (!d) {
                    var e = SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(SYNO.API.Util.GetFirstError(c));
                    if (SYNO.API.Util.GetFirstError(c).code === SYNO.SDS.ActiveBackupOffice365.WebapiCode.WEBAPI_BM_ERR_LOCAL_BKPFOLDER_NOT_FOUND) {
                        e = e + "(" + SYNO.API.Util.GetFirstError(c).errors.not_found_path + ")"
                    }
                    this.owner.getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), e);
                    return
                }
                this.data_store.loadData(c.user_list);
                this.onKeyUpSearch()
            },
            scope: this
        })
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.UserLogPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    isSearchPanelOpen: false,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window detail_info_window user_log": {
                activate: this.onActivated,
                rowclick: this.onRowClick,
                rowdblclick: this.onRowDoubleClick
            }
        });
        this.log_panel = this.componentQuery("main_window detail_info_window user_log");
        this.data_store = this.log_panel.getStore();
        this.loadStore();
        this.searchPanel = this.componentQuery("main_window detail_info_window user_log").searchPanel;
        this.mon(this.searchPanel, "search", this.onSearch, this)
    },
    setData: function(a) {},
    getData: function() {},
    onSearch: function(a, b) {
        this.data_store.baseParams = {
            task_id: this.log_panel.task_id,
            offset: 0,
            limit: this.log_panel.pageSize
        };
        Ext.apply(this.data_store.baseParams, b);
        this.loadStore()
    },
    onActivated: function() {},
    loadStore: function() {
        this.data_store.load()
    },
    onRowClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    },
    onRowDoubleClick: function(a, c, b) {
        this.selected_data = this.data_store.getAt(c).data
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Widget",
    viewport: "SYNO.SDS.ActiveBackupOffice365.View.DetailInfoWindow.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.BackupInformationPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.BackupHistogram", "SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.UserStatusPanel", "SYNO.SDS.ActiveBackupOffice365.Controller.DetailInfoWindow.UserLogPanel"],
    models: [],
    stores: [],
    constructor: function(a) {
        this.callParent([a]);
        this.ondestroy_callback = a.ondestroy_callback;
        this.task_id = a.task_id;
        this.restore_tasks = []
    },
    init: function() {
        this.control({
            main_window: {
                destroy: this.onDestroy,
                beforeshow: this.onBeforeshow
            }
        })
    },
    onDestroy: function() {
        this.ondestroy_callback()
    },
    onBeforeshow: function() {
        this.app().getController("UserStatusPanel").setData(this.task_id)
    },
    loadInformationData: function(a) {
        this.app().getController("BackupInformationPanel").setData(a)
    },
    loadHistogramData: function(b, a) {
        this.app().getController("BackupHistogram").setData(b, a)
    },
    setActiveTab: function(a) {
        this.componentQuery("main_window detail_info_window").setActiveTab(a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.LogDetailWindow.LogGridnPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window log_grid": {
                afterlayout: this.onAfterlayout
            }
        });
        this.log_panel = this.componentQuery("main_window log_grid");
        this.data_store = this.log_panel.getStore();
        this.searchPanel = this.componentQuery("main_window log_grid").searchPanel;
        this.mon(this.searchPanel, "search", this.onSearch, this)
    },
    onSearch: function(a, b) {
        this.data_store.baseParams = {
            task_id: this.log_panel.task_id,
            task_execution_id: this.log_panel.task_execution_id,
            offset: 0,
            limit: this.log_panel.pageSize
        };
        Ext.apply(this.data_store.baseParams, b);
        this.loadStore()
    },
    onAfterlayout: function() {
        this.loadStore()
    },
    loadStore: function() {
        this.data_store.load()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.OverViewPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_panel = Ext.getCmp(this.owner.OverViewPanelId);
        this.overview_panel.addListener("resize", Ext.createDelegate(this.onResize, this));
        this.overview_info_panel = this.overview_panel.find("itemId", "overview_info_panel")[0];
        this.overview_histogram_panel = this.overview_panel.find("itemId", "overview_histogram_panel")[0];
        this.overview_histogram_top_bar = this.overview_panel.find("itemId", "overview_histogram_top_bar")[0];
        this.overview_histogram = this.overview_panel.find("itemId", "overview_histogram")[0];
        this.overview_histogram_panel.addListener("clickbar", Ext.createDelegate(this.onClickOverViewConponent, this));
        this.overview_legend_panel = this.overview_panel.find("itemId", "overview_legend_panel")[0];
        this.overview_legend = this.overview_legend_panel.find("itemId", "overview_legend")[0];
        this.overview_legend_panel.addListener("clicklegend", Ext.createDelegate(this.onClickOverViewConponent, this));
        this.application.getController("MainWindow").color_task_id_pair = this.overview_legend.color_task_id_pair;
        this.overview_histogram.color_task_id_pair = this.overview_legend.color_task_id_pair
    },
    onDestroy: function() {},
    onClickOverViewConponent: function(a) {
        this.overview_histogram.focusData(a.task_id);
        this.overview_legend.focusData(a.task_id)
    },
    onResize: function(l, a, e, g, b, f) {
        var c = 223 + 31 + 6;
        var k = 544 - c;
        var h = e - c;
        var j = 223;
        if (a < 1464) {
            this.overview_info_panel.setHeight(j)
        } else {
            this.overview_info_panel.setHeight(j - 92);
            h += 92
        }
        j = h;
        var d = {
            margin: {
                top: 14,
                right: 23,
                bottom: 30,
                left: 50
            },
            width: a,
            height: j - 100
        };
        this.overview_histogram.setHeight(j);
        this.overview_histogram_top_bar.setWidth(a - 49);
        this.overview_histogram.resizeLoadData(d);
        this.overview_histogram_panel.setHeight(j);
        j = 32;
        this.overview_legend_panel.setHeight(j);
        this.overview_legend.resizeLoadData(j, a - 40);
        this.overview_panel.doLayout()
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.OverViewHistogramPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    initialized: false,
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_panel = Ext.getCmp(this.owner.OverViewPanelId);
        this.histogram = this.overview_panel.find("itemId", "overview_histogram")[0];
        this.size_label = this.overview_panel.find("itemId", "size_label")[0];
        this.histogram_panel = this.overview_panel.find("itemId", "overview_histogram_panel")[0];
        this.histogram_panel.addListener("set_yaxis_unit", Ext.createDelegate(this.setYAxisUnit, this));
        this.setHistogramBtns("day");
        Ext.get(this.histogram_panel.btn_panel_id + ".day").addListener("click", Ext.createDelegate(this.selectDay, this));
        Ext.get(this.histogram_panel.btn_panel_id + ".hour").addListener("click", Ext.createDelegate(this.selectHour, this));
        var a = this.app().getStore("OverviewHistogram");
        a.addListener("datachanged", Ext.createDelegate(this.onDataChange, this))
    },
    selectDay: function(a) {
        this.setHistogramBtns("day")
    },
    selectHour: function(a) {
        this.setHistogramBtns("hour")
    },
    setHistogramBtns: function(a) {
        if (a === this.time_period_value) {
            return
        }
        if (a === "day") {
            Ext.get(this.histogram_panel.btn_panel_id + ".day").addClass("selected");
            Ext.get(this.histogram_panel.btn_panel_id + ".hour").removeClass("selected")
        }
        if (a === "hour") {
            Ext.get(this.histogram_panel.btn_panel_id + ".hour").addClass("selected");
            Ext.get(this.histogram_panel.btn_panel_id + ".day").removeClass("selected")
        }
        this.histogram.setTimeInteval(a);
        this.histogram.setPointedPageOffset();
        this.time_period_value = a
    },
    onDataChange: function() {
        var a = this.application.getStore("OverviewHistogram");
        var b = [];
        a.each(function(c) {
            var e = {};
            for (var d in c.data) {
                e[d] = c.data[d]
            }
            b.push(e)
        });
        this.histogram.loadData(b);
        if (!this.initialized) {
            this.histogram.setInitPageOffset();
            this.initialized = true
        }
    },
    setYAxisUnit: function(b, a) {
        this.setSizeLabel(b)
    },
    setSizeLabel: function(a) {
        var b = a;
        if (!b) {
            this.size_label.setValue(SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size"))
        } else {
            this.size_label.setValue(SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size") + "(" + b + ")")
        }
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.OverViewInformation", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        var a = this.app().getStore("OverViewSpaceContainer");
        a.addListener("datachanged", Ext.createDelegate(this.onDataChange, this));
        this.overview_panel = Ext.getCmp(this.owner.OverViewPanelId);
        this.user_card_container = this.overview_panel.find("itemId", "user_card_container")[0]
    },
    onDataChange: function() {
        var a = this.application.getStore("OverViewSpaceContainer");
        var b = [];
        a.each(function(c) {
            var e = {};
            for (var d in c.data) {
                e[d] = c.data[d]
            }
            b.push(e)
        });
        this.user_card_container.loadData(b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.OverViewLegendPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    init: function() {
        this.owner = this.componentQuery("app_window");
        this.overview_panel = Ext.getCmp(this.owner.OverViewPanelId);
        this.overview_legend = this.overview_panel.find("itemId", "overview_legend")[0];
        var a = this.app().getStore("OverViewLegendContainer");
        a.addListener("datachanged", Ext.createDelegate(this.onDataChange, this))
    },
    onDataChange: function() {
        var a = this.application.getStore("OverViewLegendContainer");
        var b = [];
        a.each(function(c) {
            var e = {};
            for (var d in c.data) {
                e[d] = c.data[d]
            }
            b.push(e)
        });
        this.overview_legend.loadData(b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.RestoreTaskList", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent(arguments);
        this.addClass("syno-activebackupoffice365-restore-task-listview");
        this.old_task_percentage_pair = {};
        this.new_task_percentage_pair = {}
    },
    createTpl: function() {
        var a = new Ext.XTemplate('<tpl for=".">', '<div class="item-wrap">', '<div class="form">', '<div class="label">{account_string:htmlEncode}</div><div class="value user_account">{user_account:htmlEncode}</div>', '<div class="label">{elapsed_time_string:htmlEncode}</div><div class="value elapsed_time">{elapsed_time:htmlEncode}</div>', '<div class="label">{path_string:htmlEncode}</div><div ext:qtip="{path:htmlEncode}" class="value path">{path}</div>', '<div class="label">{progress_string:htmlEncode}</div><div class="restoring-progress-warpper">', '<div class="restoring-background" ext:qtip="{restore_detal_desc}">', '<div job_id="{job_id}" class="restoring-progress" style="width:{percentage_old}%"; ></div>', "</div>", '<div class="percentage">{percentage:htmlEncode}%</div>', '<div class="cancel-btn">' + SYNO.SDS.ActiveBackupOffice365.String("btn", "cancel") + "</div>", "</div>", "</div>", "</div>", "</tpl>");
        return a
    },
    prepareData: function(c, b, a) {
        this.new_task_percentage_pair[c.job_id] = c.percentage;
        if (this.old_task_percentage_pair[c.job_id]) {
            c.percentage_old = this.old_task_percentage_pair[c.job_id]
        } else {
            c.percentage_old = 0
        }
        c.account_string = SYNO.SDS.ActiveBackupOffice365.String("account_info", "user_account") + ": ";
        c.path_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "processing_path") + ": ";
        c.elapsed_time_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "elapsed_time") + ": ";
        c.progress_string = SYNO.SDS.ActiveBackupOffice365.String("tasklist", "progress") + ": ";
        c.elapsed_time = SYNO.SDS.ActiveBackupOffice365Lib.Utils.convertTimeFormat(c.elapsed_time);
        c.path = Ext.util.Format.htmlEncode(c.path);
        if (c.path === "") {
            c.path = "-"
        }
        return c
    },
    onClick: function(d, a, c) {
        this.callParent(arguments);
        this.last_selected_rec = this.getSelectedRecords();
        var b = Ext.fly(a);
        if (b && (b.hasClass("cancel-btn"))) {
            job_id = this.last_selected_rec[0].get("job_id");
            this.onCancelFn(job_id)
        }
    },
    setProgress: function() {
        var a = this;
        var b = this.getEl().query(".restoring-progress");
        Ext.each(b, function(e) {
            var d = e.getAttribute("job_id");
            var c = a.new_task_percentage_pair[d];
            e.setStyle({
                width: c + "%"
            })
        });
        a.old_task_percentage_pair = a.new_task_percentage_pair;
        a.new_task_percentage_pair = {}
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.RestoreWindow.RestoreInformationPanel", {
    extend: "SYNO.ux.Panel",
    task_list: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.task_id = a.task_id;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        this.store = this.createStore(b);
        var a = {
            border: false,
            layout: "card",
            height: 460,
            width: 790,
            cls: "restore_information",
            items: [{
                xtype: "panel",
                index: 0,
                layout: "fit",
                border: false,
                items: this.getTaskList(b)
            }, {
                xtype: "panel",
                index: 1,
                border: false,
                cls: "empty-panel",
                html: '<div class="background-wrapper"><div class="background"><div class="img"></div><div class="desc-title">' + SYNO.SDS.ActiveBackupOffice365.String("tasklist", "no_restore_tasks") + '</div><div class="desc-desc"></div></div></div>'
            }]
        };
        return Ext.apply(a, b)
    },
    getTaskList: function(a) {
        if (null === this.task_list) {
            this.task_list = new SYNO.SDS.ActiveBackupOffice365.Model.RestoreTaskList({
                owner: this,
                appWin: a.appWin,
                itemId: "restore_tasklist",
                store: this.store,
                autoFlexcroll: true,
                trackResetOnLoad: false,
                multiSelect: false,
                singleSelect: true,
                onClickListFn: null
            })
        }
        return this.task_list
    },
    createStore: function() {
        var a = new SYNO.API.JsonStore({
            fields: ["task_id", "job_id", "user_account", "email", "path", "elapsed_time", "percentage"]
        });
        this.addManagedComponent(a);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.RestoreWindow.MainWindow", {
    extend: "SYNO.SDS.ModalWindow",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)]);
        this.task_id = a.task_id
    },
    fillConfig: function(b) {
        this.panel_restore_information = new SYNO.SDS.ActiveBackupOffice365.View.RestoreWindow.RestoreInformationPanel({
            itemId: "restore_information",
            title: SYNO.SDS.ActiveBackupOffice365.String("detail_info_window", "restore_information"),
            owner: this.owner,
            task_id: b.task_id,
            width: b.width,
            height: b.height
        });
        var a = {
            itemId: "main_window",
            cls: "syno-activebackupoffice365-restore_window",
            closable: true,
            title: b.window_title,
            resizable: false,
            padding: "0 20px",
            border: true,
            layout: "fit",
            items: [this.panel_restore_information]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.RestoreWindow.RestoreInformationPanel", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Controller",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([a])
    },
    init: function() {
        this.control({
            "main_window restore_information": {
                activate: this.onActivated
            }
        });
        this.data_store = this.componentQuery("main_window restore_information").store;
        this.task_list = this.componentQuery("main_window restore_information").task_list;
        this.task_list.onCancelFn = Ext.createDelegate(this.onCancelFn, this);
        this.componentQuery("main_window restore_information").layout.setActiveItem(0)
    },
    setData: function(a) {
        this.data_store.loadData(a);
        this.task_list.setProgress()
    },
    getData: function() {},
    onActivated: function() {},
    onCancelFn: function(a) {
        this.componentQuery("main_window").getMsgBox().confirm(SYNO.SDS.ActiveBackupOffice365.String("common", "warning"), SYNO.SDS.ActiveBackupOffice365.String("warning", "confirm_cancel_task"), function(b) {
            if ("yes" === b) {
                this.doCancel(a)
            }
        }, this)
    },
    doCancel: function(a) {
        this.application.setRestoreTaskDeleting(a, true);
        this.application.loadRestoreInformationData();
        this.sendWebAPI({
            api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
            version: 1,
            method: "cancel_task",
            params: {
                task_id: this.task_id,
                job_id: a
            },
            callback: function(e, d, c, b) {
                if (!e) {
                    this.componentQuery("main_window").getMsgBox().alert(SYNO.SDS.ActiveBackupOffice365.String("app", "app_name"), SYNO.SDS.ActiveBackupOffice365.GetWebapiErrorString(d));
                    this.application.setRestoreTaskDeleting(a, false);
                    return
                }
            },
            scope: this
        })
    },
    setEmptyPanel: function() {
        this.componentQuery("main_window restore_information").layout.setActiveItem(1)
    },
    setListPanel: function() {
        this.componentQuery("main_window restore_information").layout.setActiveItem(0)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Controller.RestoreWindow.MainWindow", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.core.Widget",
    viewport: "SYNO.SDS.ActiveBackupOffice365.View.RestoreWindow.MainWindow",
    controllers: ["SYNO.SDS.ActiveBackupOffice365.Controller.RestoreWindow.RestoreInformationPanel"],
    models: [],
    stores: [],
    constructor: function(a) {
        this.callParent([a]);
        this.ondestroy_callback = a.ondestroy_callback;
        this.task_id = a.task_id;
        this.restore_tasks = []
    },
    stopPollRestoreTask: function() {
        if (this.connPollId) {
            this.pollUnreg(this.connPollId);
            this.connPollId = null
        }
    },
    startPollRestoreTask: function(a) {
        if (this.connPollId) {
            return
        }
        var b = function(f, e, d, c) {
            if (!f) {
                return
            }
            this.loadRestoreInformationData(e.restore_tasks)
        };
        this.connPollId = this.pollReg({
            immediate: a,
            interval: 2,
            webapi: {
                api: SYNO.SDS.ActiveBackupOffice365.WebAPI,
                method: "list_restore_tasks",
                params: {
                    task_id: this.task_id
                },
                version: 1
            },
            status_callback: b,
            scope: this
        })
    },
    loadRestoreInformationData: function(b) {
        if (!b) {
            b = this.restore_tasks
        }
        Ext.each(b, function(c) {
            Ext.each(this.restore_tasks, function(d) {
                if (c.job_id === d.job_id) {
                    c.is_deleting = d.is_deleting
                }
            }, this)
        }, this);
        this.restore_tasks = b;
        var a = [];
        Ext.each(this.restore_tasks, function(c) {
            if (!c.is_deleting) {
                a.push(c)
            }
        }, this);
        if (a.length === 0) {
            this.app().getController("RestoreInformationPanel").setEmptyPanel()
        } else {
            this.app().getController("RestoreInformationPanel").setListPanel();
            this.app().getController("RestoreInformationPanel").setData(a)
        }
    },
    setRestoreTaskDeleting: function(b, a) {
        Ext.each(this.restore_tasks, function(c) {
            if (c.job_id === b) {
                c.is_deleting = a;
                return
            }
        }, this)
    },
    init: function() {
        this.control({
            main_window: {
                destroy: this.onDestroy,
                beforeshow: this.onBeforeshow
            }
        })
    },
    onDestroy: function() {
        this.stopPollRestoreTask();
        this.ondestroy_callback()
    },
    onBeforeshow: function() {
        this.startPollRestoreTask(true)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.HistogramContainer", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.color_task_id_pair = []
    },
    fillConfig: function(a) {
        this.stage_histogram = new SYNO.SDS.ActiveBackupOffice365.Histogram.StageBarChart({
            index: 1,
            svgConfig: a.svgConfig,
            onClickBar: a.onClickBar,
            clickPreNextBtn: this.clickPreNextBtn.createDelegate(this),
            setYaxisUnit: a.setYaxisUnit
        });
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-histogram-container",
            layout: "fit",
            items: [{
                xtype: "panel",
                itemId: "histogram_card",
                cls: "bar-chart",
                border: false,
                layout: "card",
                activeItem: 0,
                items: [this.stage_histogram]
            }]
        };
        return Ext.apply(a, b)
    },
    clickPreNextBtn: function() {
        this.refreshPanel()
    },
    setTimeInterval: function(a) {
        this.stage_histogram.setTimeInterval(a);
        this.refreshPanel()
    },
    setInitPageOffset: function() {
        this.stage_histogram.setInitPageOffset();
        this.refreshPanel()
    },
    setPointedPageOffset: function() {
        this.stage_histogram.setPointedPageOffset();
        this.refreshPanel()
    },
    setPageOffset: function(a) {
        this.stage_histogram.setPageOffset(a);
        this.refreshPanel()
    },
    focusData: function(a) {
        this.stage_histogram.setNewFocusTaskId(a);
        this.refreshPanel()
    },
    resizeLoadData: function(a) {
        this.stage_histogram.setNewSvgConfig(a);
        this.refreshPanel()
    },
    refreshPanel: function() {
        this.stage_histogram.loadData(this.data)
    },
    loadData: function(b) {
        var a = b.slice();
        var c = [];
        Ext.each(a, function(d) {
            if (d.transfered_amount === 0) {
                return
            }
            c.push(d)
        }, this);
        this.styledData(c);
        this.data = c.slice();
        this.stage_histogram.loadData(c)
    },
    styledData: function(a) {
        Ext.each(this.color_task_id_pair, function(b) {
            b.color_count = 0
        }, this);
        Ext.each(a, function(b) {
            b.opacity = 1;
            Ext.each(this.color_task_id_pair, function(d) {
                if (b.task_id === d.task_id) {
                    var c = d.color_set;
                    b.color = c[(d.color_count) % (c.length)];
                    d.color_count += 1;
                    return
                }
            }, this)
        }, this)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.LegendContainer.Container", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.color_task_id_pair = [];
        this.FocusTaskId = -1
    },
    fillConfig: function(a) {
        this.legend_store = new SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore({
            fields: ["index", "task_id", "server_type", "task_name", "tool_tip", "color", "size_percentage", "opacity"]
        });
        this.legend = new SYNO.SDS.ActiveBackupOffice365.LegendContainer.Legend({
            owner: this,
            appWin: this.appWin,
            width: a.width,
            height: a.height,
            cls: "legend",
            store: this.legend_store,
            autoFlexcroll: true,
            trackResetOnLoad: false,
            onClickLegend: a.onClickLegend
        });
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-legend-container",
            items: [{
                xtype: "panel",
                cls: "legend_panel",
                border: false,
                items: this.legend
            }]
        };
        return Ext.apply(a, b)
    },
    focusData: function(a) {
        this.FocusTaskId = a;
        this.processFocusData(this.data);
        this.legend_store.loadData(this.data)
    },
    resizeLoadData: function(a, b) {
        this.legend.setWidth(b);
        this.legend.setHeight(a);
        this.legend_store.loadData(this.data)
    },
    loadData: function(c) {
        var b = c.slice();
        b.sort(function(e, d) {
            return e.task_id - d.task_id
        });
        this.processFocusData(b);
        var a = this.processData(b);
        this.data = a;
        this.legend_store.loadData(a)
    },
    processFocusData: function(a) {
        Ext.each(a, function(b) {
            b.opacity = 1
        }, this);
        if (this.FocusTaskId === -1) {
            return
        }
        Ext.each(a, function(b) {
            if (b.task_id !== this.FocusTaskId) {
                b.opacity = 0.35
            }
        }, this)
    },
    processData: function(d) {
        var b = 0;
        var c = SYNO.SDS.ActiveBackupOffice365.Config.COLORS;
        var a = [];
        Ext.each(d, function(f) {
            f.task_name = Ext.util.Format.htmlEncode(f.task_name);
            f.tool_tip = Ext.util.Format.htmlEncode(f.task_name);
            var g = false;
            Ext.each(this.color_task_id_pair, function(h) {
                if (f.task_id === h.task_id) {
                    f.color = h.color_set[0];
                    g = true;
                    return
                }
            }, this);
            if (!g) {
                var e = c[(this.color_task_id_pair.length) % (c.length)];
                this.color_task_id_pair.push({
                    task_id: f.task_id,
                    color_set: e
                });
                f.color = e[0]
            }
            a.push(f)
        }, this);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.LegendContainer.Legend", {
    extend: "SYNO.ux.ExpandableListView",
    constructor: function(a) {
        this.callParent(arguments);
        this.onClickLegend = a.onClickLegend
    },
    createTpl: function() {
        var a = new Ext.XTemplate("", '<tpl for=".">', '<div class="legend-w" ext:qtip="{tool_tip}" task_id = {task_id}>', '<div class="rect" style="background-color:{color}; opacity:{opacity};" task_id = {task_id}></div>', '<div class="name" task_id = {task_id}>', "{task_name}", "</div>", "</div>", "</tpl>");
        return a
    },
    onClick: function(g, b, f) {
        this.callParent(arguments);
        var c = Ext.get(b);
        var a = c.getAttribute("task_id");
        if (!a) {
            a = -1
        }
        var d = {
            task_id: parseInt(a, 10)
        };
        this.onClickLegend(d)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.StorageUsageContainer", {
    extend: "SYNO.ux.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a]);
        this.color_task_id_pair = []
    },
    fillConfig: function(a) {
        this.storage_info = new SYNO.SDS.ActiveBackupOffice365.Space.StorageInfo({
            width: 130,
            region: "east"
        });
        this.pie = new SYNO.SDS.ActiveBackupOffice365.Space.PieChart(Ext.apply({
            onClickArc: this.onClickArc
        }, a));
        this.pie_panel = new SYNO.ux.Panel({
            cls: "pie_panel",
            width: a.svgConfig.width,
            border: false,
            items: [this.pie]
        });
        this.label_panel = new SYNO.ux.Panel({
            width: a.svgConfig.width,
            cls: "label_panel",
            html: '<div class = "pie_label">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "total_usage") + "</div>"
        });
        this.left_panel = new SYNO.ux.Panel({
            itemId: "left_panel",
            region: "center",
            border: false,
            items: [this.pie_panel, this.label_panel]
        });
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-storage-usage-container",
            layout: "border",
            items: [this.storage_info, this.left_panel]
        };
        return Ext.apply(a, b)
    },
    onClickArc: function(a) {},
    resizeLoadData: function(a) {
        this.pie.setNewSvgConfig(a);
        this.pie.loadData(this.data)
    },
    loadData: function(b) {
        b.sort(function(d, c) {
            return c.storage_usage - d.storage_usage
        });
        var a = this.processData(b);
        this.data = a;
        this.storage_info.loadData(b);
        if (a.length === 0) {
            a.push({
                tool_tip: SYNO.SDS.ActiveBackupOffice365.String("histogram", "no_available_data"),
                color: SYNO.SDS.ActiveBackupOffice365.Config.DEFAULT_COLOR,
                storage_usage: 100,
                total_size: 0,
                total_unit: "MB"
            })
        }
        this.pie.loadData(a)
    },
    processData: function(f, b) {
        var e = [];
        var a = 0;
        Ext.each(f, function(g) {
            a += g.storage_usage
        }, this);
        var c = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(a);
        var d = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(a);
        Ext.each(f, function(k) {
            var h = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(k.storage_usage);
            var j = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(k.storage_usage);
            k.storage = h + " " + j;
            var g = "<p class = 'label'>" + SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeString(k.service_type) + "</br><p class = 'label'>" + k.storage + "</p>";
            k.tool_tip = g;
            k.color = SYNO.SDS.ActiveBackupOffice365.Utils.getServiceTypeColor(k.service_type);
            k.total_size = c;
            k.total_unit = d;
            e.push(k)
        }, this);
        return e
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Space.StorageInfo", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a])
    },
    fillConfig: function(a) {
        this.overall_statistics = new SYNO.ux.Panel({
            owner: this,
            autoFlexcroll: false,
            labelWidth: 150,
            id: this.space_info_id = Ext.id(),
            cls: "overall_statistics",
            html: '<div class="lengend-wrapper"><div class="legend"><div class="header drive">' + SYNO.SDS.ActiveBackupOffice365.String("service_type", "drive") + '</div><div id="' + this.space_info_id + '.drive" class="value">-</div></div><div class="legend"><div class="header mail">' + SYNO.SDS.ActiveBackupOffice365.String("service_type", "mail") + '</div><div id="' + this.space_info_id + '.mail" class="value">-</div></div><div class="legend"><div class="header contact">' + SYNO.SDS.ActiveBackupOffice365.String("service_type", "contact") + '</div><div id="' + this.space_info_id + '.contact" class="value">-</div></div><div class="legend"><div class="header calendar">' + SYNO.SDS.ActiveBackupOffice365.String("service_type", "calendar") + '</div><div id="' + this.space_info_id + '.calendar" class="value">-</div></div>'
        });
        var b = {
            border: false,
            layout: "fit",
            items: [this.overall_statistics]
        };
        return Ext.apply(a, b)
    },
    loadData: function(a) {
        this.setOverallStatistics(a);
        this.doLayout()
    },
    setOverallStatistics: function(a) {
        Ext.each(a, function(b) {
            switch (b.service_type) {
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.DRIVE:
                    Ext.get(this.space_info_id + ".drive").update(b.storage);
                    break;
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.MAIL:
                    Ext.get(this.space_info_id + ".mail").update(b.storage);
                    break;
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.CONTACT:
                    Ext.get(this.space_info_id + ".contact").update(b.storage);
                    break;
                case SYNO.SDS.ActiveBackupOffice365.ServiceType.CALENDAR:
                    Ext.get(this.space_info_id + ".calendar").update(b.storage);
                    break
            }
        }, this)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Space.PieChart", {
    extend: "Ext.BoxComponent",
    constructor: function(a) {
        Ext.apply(this, a);
        SYNO.SDS.ActiveBackupOffice365.QuickTips.init();
        this.callParent(arguments);
        this.d3 = SYNO.SDS.DataDrivenDocuments.DrawHelper;
        this.FocusTaskId = -1
    },
    onRender: function(b, a) {
        var c = this.d3;
        this.callParent(arguments);
        this.svg = c.select("#" + this.id).attr("class", this.cls).append("svg").attr("width", this.svgConfig.width).attr("height", this.svgConfig.height);
        var e = this.svgConfig.margin.left;
        var d = this.svgConfig.margin.top;
        this.svgGraphics = this.svg.append("g").attr("transform", "translate(" + e + "," + d + ")")
    },
    setNewFocusTaskId: function(a) {
        this.FocusTaskId = a
    },
    setNewSvgConfig: function(a) {
        this.svgConfig = a
    },
    resizeLoadData: function(b, a) {
        this.svgConfig = b;
        this.draw(a)
    },
    loadData: function(a) {
        if (!Ext.isDefined(a)) {
            return
        }
        this.draw(a)
    },
    initShadowEffect: function() {
        var b = this.svg;
        var a = b.append("defs");
        this.shadowId = "shadow" + Ext.id();
        var c = a.append("filter").attr("id", this.shadowId);
        c.append("feGaussianBlur").attr("in", "SourceAlpha").attr("stdDeviation", 2).attr("result", "blur");
        c.append("feOffset").attr("in", "blur").attr("dx", 0).attr("dy", 0).attr("result", "offsetBlur");
        var d = c.append("feMerge");
        d.append("feMergeNode").attr("in", "offsetBlur");
        d.append("feMergeNode").attr("in", "SourceGraphic");
        this.svgShadow = a
    },
    draw: function(h) {
        if (!h) {
            return
        }
        var l = this;
        var n = this.d3,
            c = this.svgConfig.width,
            k = this.svgConfig.height,
            j = this.svgConfig.radius,
            e = this.svgConfig.border,
            f = (j + this.svgConfig.margin.left + this.svgConfig.border + this.svgConfig.shadow),
            d = (j + this.svgConfig.margin.top + this.svgConfig.border + this.svgConfig.shadow);
        if (this.svgGraphics) {
            this.svgGraphics.remove();
            this.svgGraphics = null
        }
        if (!this.svgShadow) {
            this.initShadowEffect()
        }
        this.svgEle = this.svg.data([h]).attr("width", c).attr("height", k).on("mouseover", function(q, p, o) {
            if (!l.select_arc) {
                n.select(l.last_selected).transition().duration(300).attr("stroke-width", "0px").attr("filter", null)
            }
            l.select_arc = false
        }).on("click", function(r, p, o) {
            if (!l.click_arc) {
                var q = {
                    task_id: -1
                };
                l.onClickArc(q)
            }
            l.click_arc = false
        });
        this.svgGraphics = this.svgEle.append("svg:g").attr("transform", "translate(" + f + "," + d + ")");
        var b = n.svg.arc().innerRadius(j * 0.8).outerRadius(j);
        var g = n.layout.pie().value(function(o) {
            return o.storage_usage
        }).sort(null);
        var a = this.svgGraphics.selectAll("g.slice").data(g).enter().append("svg:g").attr("class", "slice");
        var m = "url(#" + this.shadowId + ")";
        a.append("svg:path").attr("fill", function(o) {
            return o.data.color
        }).attr("stroke", "#FFFFFF").attr("stroke-width", "0px").attr("d", b).attr("synotcqtip", function(o) {
            return o.data.tool_tip
        }).on("mouseover", function(q, p, o) {
            l.select_arc = true;
            this.parentNode.parentNode.appendChild(this.parentNode);
            if (l.last_selected !== this) {
                n.select(l.last_selected).transition().duration(300).attr("stroke-width", "0px").attr("filter", null);
                l.last_selected = this
            }
            n.select(this).transition().duration(300).attr("stroke-width", e + "px").attr("filter", m)
        }).on("mouseout", function(q, p, o) {
            n.select(this).transition().duration(300).attr("stroke-width", "0px").attr("filter", null)
        }).on("click", function(q, p, o) {
            l.click_arc = true;
            l.onClickArc(q.data)
        });
        this.svgText = this.svgGraphics.append("text").attr("x", 0).attr("y", 10).style("text-anchor", "middle");
        this.svgText.append("tspan").style("fill", "#505A64").style("font-size", "28px").text(h[0].total_size);
        this.svgText.append("tspan").style("fill", "#505A64").style("font-size", "14px").text(" " + h[0].total_unit)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Model.UserCardContainer", {
    extend: "Ext.Panel",
    constructor: function(a) {
        a = this.fillConfig(a);
        this.callParent([a])
    },
    fillConfig: function(a) {
        var b = {
            border: false,
            cls: "syno-activebackupoffice365-user-card-container",
            id: this.user_card_panel_id = Ext.id(),
            layout: "fit",
            html: '<div class="panel_wrapper"><div class="card_wrapper"><div class="header_desc" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("overview", "users") + '">' + SYNO.SDS.ActiveBackupOffice365.String("overview", "users") + '</div><div class="icon_image protected_user"></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.protected_user" class="value">-</div></div></div><div class="card_wrapper"><div class="header_desc" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("space_container", "total_used_capacity") + '">' + SYNO.SDS.ActiveBackupOffice365.String("space_container", "total_used_capacity") + '</div><div class="icon_image total_used_capacity"></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.total_used_capacity" class="value">-</div><div id="' + this.user_card_panel_id + '.total_used_unit" class="value suffix"></div></div></div><div class="card_wrapper"><div class="header_desc" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("task_status", "processing_user") + '">' + SYNO.SDS.ActiveBackupOffice365.String("task_status", "processing_user") + '</div><div class="icon_image processing_backup"></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.processing_backup" class="value">-</div></div></div><div class="card_wrapper"><div class="header_desc" ext:qtip="' + SYNO.SDS.ActiveBackupOffice365.String("task_status", "error") + '">' + SYNO.SDS.ActiveBackupOffice365.String("task_status", "error") + '</div><div id="' + this.user_card_panel_id + '.error_image" class="icon_image error_user"></div><div class="info_wrapper"><div id="' + this.user_card_panel_id + '.error_user" class="value">-</div></div></div></div>'
        };
        return Ext.apply(a, b)
    },
    loadData: function(c) {
        var b = c.slice();
        var a = this.getStatisticData(b);
        Ext.get(this.user_card_panel_id + ".protected_user").update(a.protected_user.toString(10));
        Ext.get(this.user_card_panel_id + ".processing_backup").update(a.processing_user.toString(10));
        if (a.error_user > 0) {
            Ext.get(this.user_card_panel_id + ".error_user").addClass("error");
            Ext.get(this.user_card_panel_id + ".error_image").addClass("error")
        } else {
            Ext.get(this.user_card_panel_id + ".error_user").removeClass("error");
            Ext.get(this.user_card_panel_id + ".error_image").removeClass("error")
        }
        Ext.get(this.user_card_panel_id + ".error_user").update(a.error_user.toString(10));
        Ext.get(this.user_card_panel_id + ".total_used_capacity").update(a.total_used_capacity.toString(10));
        Ext.get(this.user_card_panel_id + ".total_used_unit").update(a.unit.toString(10))
    },
    getStatisticData: function(b) {
        var a = {};
        a.total_used_capacity = 0;
        a.protected_user = 0;
        a.total_user = 0;
        a.success_user = 0;
        a.processing_user = 0;
        a.error_user = 0;
        a.deleted_user = 0;
        Ext.each(b, function(c) {
            var d = Ext.isNumber(c.storage_usage) ? c.storage_usage : 0;
            a.total_used_capacity += d;
            a.protected_user += c.protected_user;
            a.total_user += c.total_user;
            a.success_user += c.success_user;
            a.processing_user += c.processing_backup;
            a.processing_user += c.processing_restore;
            a.error_user += c.error_user;
            a.deleted_user += c.deleted_user
        }, this);
        a.unit = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getUnit(a.total_used_capacity);
        a.total_used_capacity = SYNO.SDS.ActiveBackupOffice365Lib.Utils.getConvertSize(a.total_used_capacity);
        return a
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverviewHistogram", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "server_type", "task_name", "task_type", "transfered_amount", "task_execution_id", "last_execution_time", "backup_policy"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverViewLegendContainer", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "task_name", "storage_usage", "last_execution_time"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.Store.OverViewSpaceContainer", {
    extend: "SYNO.SDS.ActiveBackupOffice365Lib.data.JsonStore",
    constructor: function(a) {
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            fields: ["task_id", "task_name", "storage_usage", "last_execution_time", "total_user", "protected_user", "unprotected_user", "success_user", "processing_backup", "processing_restore", "error_user", "deleted_user"]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.OverViewInformation", {
    extend: "Ext.Panel",
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            itemId: "overview_info_panel",
            border: false,
            layout: "fit",
            items: [new SYNO.SDS.ActiveBackupOffice365.Model.UserCardContainer({
                owner: this,
                itemId: "user_card_container",
                appWin: b.appWin
            })]
        };
        return Ext.apply(a, b)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.OverViewHistogramPanel", {
    extend: "Ext.Panel",
    top_bar_panel: null,
    form_panel: null,
    histogram_panel: null,
    histogram: null,
    right_margin: 23,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            itemId: "overview_histogram_panel",
            cls: "histogram-panel",
            border: false,
            layout: "border",
            items: [{
                xtype: "panel",
                region: "north",
                border: false,
                height: 60,
                items: [{
                    xtype: "syno_fieldset",
                    title: SYNO.SDS.ActiveBackupOffice365.String("histogram", "historical_transmission"),
                    collapsible: false
                }, {
                    xtype: "displayfield",
                    height: 20,
                    itemId: "size_label",
                    cls: "size_label",
                    value: SYNO.SDS.ActiveBackupOffice365.String("histogram", "transfererd_size")
                }]
            }, {
                xtype: "panel",
                region: "center",
                border: false,
                layout: "border",
                items: [this.getTopBar(b), this.getHistogram(b)]
            }]
        };
        return Ext.apply(a, b)
    },
    getTopBar: function(a) {
        var b = new SYNO.ux.Panel({
            owner: this,
            appWin: a.appWin,
            flex: 1,
            region: "east",
            cls: "btns_panel",
            id: this.btn_panel_id = Ext.id(),
            width: 344,
            height: 40,
            html: '<div class="time_range_btns_wrapper"><div class="value_wrapper"><div id = "' + this.btn_panel_id + '.hour" class=value hour">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "hour") + '</div></div><div class="seperator"></div><div class="value_wrapper"><div id = "' + this.btn_panel_id + '.day" class=value day">' + SYNO.SDS.ActiveBackupOffice365.String("histogram", "day") + "</div></div></div>"
        });
        if (null === this.top_bar_panel) {
            this.top_bar_panel = new SYNO.ux.Panel({
                owner: this,
                appWin: a.appWin,
                itemId: "overview_histogram_top_bar",
                region: "north",
                padding: "0 " + this.right_margin + "px 0 50px",
                height: 44,
                items: [{
                    xtype: "panel",
                    cls: "top_bar_panel",
                    border: false,
                    layout: "border",
                    height: 44,
                    items: [{
                        xtype: "panel",
                        region: "center",
                        border: false
                    }, b]
                }]
            })
        }
        return this.top_bar_panel
    },
    getHistogram: function(a) {
        if (null === this.histogram) {
            this.histogram = new SYNO.SDS.ActiveBackupOffice365.Model.HistogramContainer({
                owner: this,
                itemId: "overview_histogram",
                appWin: a.appWin,
                onClickBar: Ext.createDelegate(this.onClickBar, this),
                setYaxisUnit: Ext.createDelegate(this.setYaxisUnit, this),
                svgConfig: {
                    margin: {
                        top: 14,
                        right: this.right_margin,
                        bottom: 30,
                        left: 50
                    },
                    width: a.width,
                    height: a.height - 100
                }
            })
        }
        if (null === this.histogram_panel) {
            this.histogram_panel = new SYNO.ux.Panel({
                owner: this,
                appWin: a.appWin,
                region: "center",
                layout: "fit",
                items: this.histogram
            })
        }
        return this.histogram_panel
    },
    setYaxisUnit: function(b, a) {
        this.fireEvent("set_yaxis_unit", b, a)
    },
    onClickBar: function(a) {
        this.fireEvent("clickbar", a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.OverViewLegendPanel", {
    extend: "Ext.Panel",
    legend_panel: null,
    legend: null,
    constructor: function(a) {
        this.owner = a.owner;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            itemId: "overview_legend_panel",
            border: false,
            layout: "border",
            items: [{
                xtype: "panel",
                region: "west",
                width: 33,
                border: false
            }, this.getLegend(b)]
        };
        return Ext.apply(a, b)
    },
    getLegend: function(a) {
        if (null === this.legend) {
            this.legend = new SYNO.SDS.ActiveBackupOffice365.Model.LegendContainer.Container({
                owner: this,
                itemId: "overview_legend",
                appWin: a.appWin,
                width: a.width - 40,
                height: a.height,
                onClickLegend: Ext.createDelegate(this.onClickLegend, this)
            })
        }
        if (null === this.legend_panel) {
            this.legend_panel = new SYNO.ux.Panel({
                owner: this,
                appWin: a.appWin,
                region: "center",
                layout: "fit",
                items: this.legend
            })
        }
        return this.legend_panel
    },
    onClickLegend: function(a) {
        this.fireEvent("clicklegend", a)
    }
});
Ext.define("SYNO.SDS.ActiveBackupOffice365.View.OverViewPanel", {
    extend: "Ext.Panel",
    information_panel: null,
    histogram_panel: null,
    legend_panel: null,
    constructor: function(a) {
        this.owner = a.owner.application;
        this.callParent([this.fillConfig(a)])
    },
    fillConfig: function(b) {
        var a = {
            itemId: "overview_panel",
            border: false,
            cls: "syno-activebackupoffice365-overview-panel",
            layout: "border",
            items: [this.getInformationPanel(b), {
                xtype: "panel",
                region: "center",
                border: false,
                layout: "border",
                items: [this.getHistogramPanel(b), {
                    xtype: "panel",
                    region: "center",
                    border: false,
                    layout: "border",
                    items: [this.getLegendPanel(b), {
                        xtype: "panel",
                        region: "center",
                        border: false
                    }]
                }]
            }]
        };
        return Ext.apply(a, b)
    },
    getInformationPanel: function(a) {
        if (null === this.information_panel) {
            this.information_panel = new SYNO.SDS.ActiveBackupOffice365.View.OverViewInformation(Ext.apply({
                height: 223,
                width: 752,
                region: "north"
            }, a))
        }
        return this.information_panel
    },
    getHistogramPanel: function(a) {
        if (null === this.histogram_panel) {
            this.histogram_panel = new SYNO.SDS.ActiveBackupOffice365.View.OverViewHistogramPanel(Ext.apply({
                height: 284,
                width: 752,
                region: "north"
            }, a))
        }
        return this.histogram_panel
    },
    getLegendPanel: function(a) {
        if (null === this.legend_panel) {
            this.legend_panel = new SYNO.SDS.ActiveBackupOffice365.View.OverViewLegendPanel(Ext.apply({
                height: 32,
                width: 752,
                region: "north"
            }, a))
        }
        return this.legend_panel
    }
});